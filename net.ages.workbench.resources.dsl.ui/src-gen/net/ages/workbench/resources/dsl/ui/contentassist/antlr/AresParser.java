/*
* generated by Xtext
*/
package net.ages.workbench.resources.dsl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import net.ages.workbench.resources.dsl.services.AresGrammarAccess;

public class AresParser extends AbstractContentAssistParser {
	
	@Inject
	private AresGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected net.ages.workbench.resources.dsl.ui.contentassist.antlr.internal.InternalAresParser createParser() {
		net.ages.workbench.resources.dsl.ui.contentassist.antlr.internal.InternalAresParser result = new net.ages.workbench.resources.dsl.ui.contentassist.antlr.internal.InternalAresParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getAresModelAccess().getGroup(), "rule__AresModel__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getDefinitionAccess().getGroup(), "rule__Definition__Group__0");
					put(grammarAccess.getDefinitionAccess().getGroup_2(), "rule__Definition__Group_2__0");
					put(grammarAccess.getAresModelAccess().getNameAssignment_1(), "rule__AresModel__NameAssignment_1");
					put(grammarAccess.getAresModelAccess().getDsl_Model_definitionsAssignment_2(), "rule__AresModel__Dsl_Model_definitionsAssignment_2");
					put(grammarAccess.getDefinitionAccess().getNameAssignment_0(), "rule__Definition__NameAssignment_0");
					put(grammarAccess.getDefinitionAccess().getDsl_Definition_TextAssignment_2_0(), "rule__Definition__Dsl_Definition_TextAssignment_2_0");
					put(grammarAccess.getDefinitionAccess().getDsl_Definition_RefAssignment_3(), "rule__Definition__Dsl_Definition_RefAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			net.ages.workbench.resources.dsl.ui.contentassist.antlr.internal.InternalAresParser typedParser = (net.ages.workbench.resources.dsl.ui.contentassist.antlr.internal.InternalAresParser) parser;
			typedParser.entryRuleAresModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public AresGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(AresGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
