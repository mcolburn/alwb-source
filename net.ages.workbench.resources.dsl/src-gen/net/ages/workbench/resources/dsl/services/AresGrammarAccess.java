/*
* generated by Xtext
*/
package net.ages.workbench.resources.dsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class AresGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class AresModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AresModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cA_Resource_Whose_NameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDsl_Model_definitionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDsl_Model_definitionsDefinitionParserRuleCall_2_0 = (RuleCall)cDsl_Model_definitionsAssignment_2.eContents().get(0);
		
		//AresModel:
		//	"A_Resource_Whose_Name = " name=QualifiedName dsl_Model_definitions+=Definition*;
		public ParserRule getRule() { return rule; }

		//"A_Resource_Whose_Name = " name=QualifiedName dsl_Model_definitions+=Definition*
		public Group getGroup() { return cGroup; }

		//"A_Resource_Whose_Name = "
		public Keyword getA_Resource_Whose_NameKeyword_0() { return cA_Resource_Whose_NameKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//dsl_Model_definitions+=Definition*
		public Assignment getDsl_Model_definitionsAssignment_2() { return cDsl_Model_definitionsAssignment_2; }

		//Definition
		public RuleCall getDsl_Model_definitionsDefinitionParserRuleCall_2_0() { return cDsl_Model_definitionsDefinitionParserRuleCall_2_0; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Definition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameQualifiedNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cDsl_Definition_TextAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cDsl_Definition_TextSTRINGTerminalRuleCall_2_0_0 = (RuleCall)cDsl_Definition_TextAssignment_2_0.eContents().get(0);
		private final Keyword cReverseSolidusKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cDsl_Definition_RefAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cDsl_Definition_RefDefinitionCrossReference_3_0 = (CrossReference)cDsl_Definition_RefAssignment_3.eContents().get(0);
		private final RuleCall cDsl_Definition_RefDefinitionQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cDsl_Definition_RefDefinitionCrossReference_3_0.eContents().get(1);
		
		//// ('\\')* is present in the rule above due to a bug in the ResourceBundle editor
		//// that inserts slashes when it saves.
		//Definition:
		//	name=QualifiedName "=" (dsl_Definition_Text=STRING "\\"*)? dsl_Definition_Ref=[Definition|QualifiedName]?;
		public ParserRule getRule() { return rule; }

		//name=QualifiedName "=" (dsl_Definition_Text=STRING "\\"*)? dsl_Definition_Ref=[Definition|QualifiedName]?
		public Group getGroup() { return cGroup; }

		//name=QualifiedName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0_0() { return cNameQualifiedNameParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//(dsl_Definition_Text=STRING "\\"*)?
		public Group getGroup_2() { return cGroup_2; }

		//dsl_Definition_Text=STRING
		public Assignment getDsl_Definition_TextAssignment_2_0() { return cDsl_Definition_TextAssignment_2_0; }

		//STRING
		public RuleCall getDsl_Definition_TextSTRINGTerminalRuleCall_2_0_0() { return cDsl_Definition_TextSTRINGTerminalRuleCall_2_0_0; }

		//"\\"*
		public Keyword getReverseSolidusKeyword_2_1() { return cReverseSolidusKeyword_2_1; }

		//dsl_Definition_Ref=[Definition|QualifiedName]?
		public Assignment getDsl_Definition_RefAssignment_3() { return cDsl_Definition_RefAssignment_3; }

		//[Definition|QualifiedName]
		public CrossReference getDsl_Definition_RefDefinitionCrossReference_3_0() { return cDsl_Definition_RefDefinitionCrossReference_3_0; }

		//QualifiedName
		public RuleCall getDsl_Definition_RefDefinitionQualifiedNameParserRuleCall_3_0_1() { return cDsl_Definition_RefDefinitionQualifiedNameParserRuleCall_3_0_1; }
	}
	
	
	private AresModelElements pAresModel;
	private QualifiedNameElements pQualifiedName;
	private DefinitionElements pDefinition;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public AresGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("net.ages.workbench.resources.dsl.Ares".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//AresModel:
	//	"A_Resource_Whose_Name = " name=QualifiedName dsl_Model_definitions+=Definition*;
	public AresModelElements getAresModelAccess() {
		return (pAresModel != null) ? pAresModel : (pAresModel = new AresModelElements());
	}
	
	public ParserRule getAresModelRule() {
		return getAresModelAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//// ('\\')* is present in the rule above due to a bug in the ResourceBundle editor
	//// that inserts slashes when it saves.
	//Definition:
	//	name=QualifiedName "=" (dsl_Definition_Text=STRING "\\"*)? dsl_Definition_Ref=[Definition|QualifiedName]?;
	public DefinitionElements getDefinitionAccess() {
		return (pDefinition != null) ? pDefinition : (pDefinition = new DefinitionElements());
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
