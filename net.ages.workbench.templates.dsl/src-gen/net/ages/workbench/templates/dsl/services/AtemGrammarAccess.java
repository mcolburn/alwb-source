/*
* generated by Xtext
*/
package net.ages.workbench.templates.dsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class AtemGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class AtemModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AtemModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTemplateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDsl_Template_StatusAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDsl_Template_StatusTemplateStatusParserRuleCall_2_0 = (RuleCall)cDsl_Template_StatusAssignment_2.eContents().get(0);
		private final Assignment cImportsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cImportsImportParserRuleCall_3_0 = (RuleCall)cImportsAssignment_3.eContents().get(0);
		private final Assignment cDsl_Template_DriverAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDsl_Template_DriverDriverParserRuleCall_4_0 = (RuleCall)cDsl_Template_DriverAssignment_4.eContents().get(0);
		private final Assignment cDsl_Template_headAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDsl_Template_headHeadParserRuleCall_5_0 = (RuleCall)cDsl_Template_headAssignment_5.eContents().get(0);
		private final Assignment cDsl_Template_prefaceAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDsl_Template_prefacePrefaceParserRuleCall_6_0 = (RuleCall)cDsl_Template_prefaceAssignment_6.eContents().get(0);
		private final Assignment cDsl_Template_componentsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDsl_Template_componentsAbstractComponentParserRuleCall_7_0 = (RuleCall)cDsl_Template_componentsAssignment_7.eContents().get(0);
		private final Keyword cEndTemplateKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		/// *
		// * Note: there is a limit to the number of rules you can have.  If you add new ones
		// * and suddenly get errors you can't explain, it might be that you added too many rules.
		// * / AtemModel:
		//	"Template" name=QualifiedName dsl_Template_Status=TemplateStatus? imports+=Import* dsl_Template_Driver=Driver?
		//	dsl_Template_head=Head? dsl_Template_preface=Preface? dsl_Template_components+=AbstractComponent* "End-Template";
		public ParserRule getRule() { return rule; }

		//"Template" name=QualifiedName dsl_Template_Status=TemplateStatus? imports+=Import* dsl_Template_Driver=Driver?
		//dsl_Template_head=Head? dsl_Template_preface=Preface? dsl_Template_components+=AbstractComponent* "End-Template"
		public Group getGroup() { return cGroup; }

		//"Template"
		public Keyword getTemplateKeyword_0() { return cTemplateKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//dsl_Template_Status=TemplateStatus?
		public Assignment getDsl_Template_StatusAssignment_2() { return cDsl_Template_StatusAssignment_2; }

		//TemplateStatus
		public RuleCall getDsl_Template_StatusTemplateStatusParserRuleCall_2_0() { return cDsl_Template_StatusTemplateStatusParserRuleCall_2_0; }

		//imports+=Import*
		public Assignment getImportsAssignment_3() { return cImportsAssignment_3; }

		//Import
		public RuleCall getImportsImportParserRuleCall_3_0() { return cImportsImportParserRuleCall_3_0; }

		//dsl_Template_Driver=Driver?
		public Assignment getDsl_Template_DriverAssignment_4() { return cDsl_Template_DriverAssignment_4; }

		//Driver
		public RuleCall getDsl_Template_DriverDriverParserRuleCall_4_0() { return cDsl_Template_DriverDriverParserRuleCall_4_0; }

		//dsl_Template_head=Head?
		public Assignment getDsl_Template_headAssignment_5() { return cDsl_Template_headAssignment_5; }

		//Head
		public RuleCall getDsl_Template_headHeadParserRuleCall_5_0() { return cDsl_Template_headHeadParserRuleCall_5_0; }

		//dsl_Template_preface=Preface?
		public Assignment getDsl_Template_prefaceAssignment_6() { return cDsl_Template_prefaceAssignment_6; }

		//Preface
		public RuleCall getDsl_Template_prefacePrefaceParserRuleCall_6_0() { return cDsl_Template_prefacePrefaceParserRuleCall_6_0; }

		//dsl_Template_components+=AbstractComponent*
		public Assignment getDsl_Template_componentsAssignment_7() { return cDsl_Template_componentsAssignment_7; }

		//AbstractComponent
		public RuleCall getDsl_Template_componentsAbstractComponentParserRuleCall_7_0() { return cDsl_Template_componentsAbstractComponentParserRuleCall_7_0; }

		//"End-Template"
		public Keyword getEndTemplateKeyword_8() { return cEndTemplateKeyword_8; }
	}

	public class HeadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Head");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHeadKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDsl_Head_componentsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDsl_Head_componentsHeadComponentParserRuleCall_1_0 = (RuleCall)cDsl_Head_componentsAssignment_1.eContents().get(0);
		private final Keyword cEnd_HeadKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Head:
		//	"Head" dsl_Head_components+=HeadComponent+ "End_Head";
		public ParserRule getRule() { return rule; }

		//"Head" dsl_Head_components+=HeadComponent+ "End_Head"
		public Group getGroup() { return cGroup; }

		//"Head"
		public Keyword getHeadKeyword_0() { return cHeadKeyword_0; }

		//dsl_Head_components+=HeadComponent+
		public Assignment getDsl_Head_componentsAssignment_1() { return cDsl_Head_componentsAssignment_1; }

		//HeadComponent
		public RuleCall getDsl_Head_componentsHeadComponentParserRuleCall_1_0() { return cDsl_Head_componentsHeadComponentParserRuleCall_1_0; }

		//"End_Head"
		public Keyword getEnd_HeadKeyword_2() { return cEnd_HeadKeyword_2; }
	}

	public class HeadComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HeadComponent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCommemorationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDateParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPageHeaderEvenParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPageHeaderOddParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPageFooterEvenParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cPageFooterOddParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cPageKeepWithNextParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cPageNumberParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cTemplateTitleParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//HeadComponent:
		//	Commemoration | Date | PageHeaderEven | PageHeaderOdd | PageFooterEven | PageFooterOdd | PageKeepWithNext | PageNumber
		//	| TemplateTitle;
		public ParserRule getRule() { return rule; }

		//Commemoration | Date | PageHeaderEven | PageHeaderOdd | PageFooterEven | PageFooterOdd | PageKeepWithNext | PageNumber |
		//TemplateTitle
		public Alternatives getAlternatives() { return cAlternatives; }

		//Commemoration
		public RuleCall getCommemorationParserRuleCall_0() { return cCommemorationParserRuleCall_0; }

		//Date
		public RuleCall getDateParserRuleCall_1() { return cDateParserRuleCall_1; }

		//PageHeaderEven
		public RuleCall getPageHeaderEvenParserRuleCall_2() { return cPageHeaderEvenParserRuleCall_2; }

		//PageHeaderOdd
		public RuleCall getPageHeaderOddParserRuleCall_3() { return cPageHeaderOddParserRuleCall_3; }

		//PageFooterEven
		public RuleCall getPageFooterEvenParserRuleCall_4() { return cPageFooterEvenParserRuleCall_4; }

		//PageFooterOdd
		public RuleCall getPageFooterOddParserRuleCall_5() { return cPageFooterOddParserRuleCall_5; }

		//PageKeepWithNext
		public RuleCall getPageKeepWithNextParserRuleCall_6() { return cPageKeepWithNextParserRuleCall_6; }

		//PageNumber
		public RuleCall getPageNumberParserRuleCall_7() { return cPageNumberParserRuleCall_7; }

		//TemplateTitle
		public RuleCall getTemplateTitleParserRuleCall_8() { return cTemplateTitleParserRuleCall_8; }
	}

	public class DriverElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Driver");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGeneration_DriverKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cService_Regular_ExpressionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDsl_Driver_RegExAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDsl_Driver_RegExSTRINGTerminalRuleCall_2_0 = (RuleCall)cDsl_Driver_RegExAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cService_StatusKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDsl_Driver_StatusAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDsl_Driver_StatusTemplateStatusesEnumRuleCall_3_1_0 = (RuleCall)cDsl_Driver_StatusAssignment_3_1.eContents().get(0);
		private final Keyword cEnd_Generation_DriverKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Driver:
		//	"Generation_Driver" "Service_Regular_Expression" dsl_Driver_RegEx=STRING ("Service_Status"
		//	dsl_Driver_Status=TemplateStatuses)? "End_Generation_Driver";
		public ParserRule getRule() { return rule; }

		//"Generation_Driver" "Service_Regular_Expression" dsl_Driver_RegEx=STRING ("Service_Status"
		//dsl_Driver_Status=TemplateStatuses)? "End_Generation_Driver"
		public Group getGroup() { return cGroup; }

		//"Generation_Driver"
		public Keyword getGeneration_DriverKeyword_0() { return cGeneration_DriverKeyword_0; }

		//"Service_Regular_Expression"
		public Keyword getService_Regular_ExpressionKeyword_1() { return cService_Regular_ExpressionKeyword_1; }

		//dsl_Driver_RegEx=STRING
		public Assignment getDsl_Driver_RegExAssignment_2() { return cDsl_Driver_RegExAssignment_2; }

		//STRING
		public RuleCall getDsl_Driver_RegExSTRINGTerminalRuleCall_2_0() { return cDsl_Driver_RegExSTRINGTerminalRuleCall_2_0; }

		//("Service_Status" dsl_Driver_Status=TemplateStatuses)?
		public Group getGroup_3() { return cGroup_3; }

		//"Service_Status"
		public Keyword getService_StatusKeyword_3_0() { return cService_StatusKeyword_3_0; }

		//dsl_Driver_Status=TemplateStatuses
		public Assignment getDsl_Driver_StatusAssignment_3_1() { return cDsl_Driver_StatusAssignment_3_1; }

		//TemplateStatuses
		public RuleCall getDsl_Driver_StatusTemplateStatusesEnumRuleCall_3_1_0() { return cDsl_Driver_StatusTemplateStatusesEnumRuleCall_3_1_0; }

		//"End_Generation_Driver"
		public Keyword getEnd_Generation_DriverKeyword_4() { return cEnd_Generation_DriverKeyword_4; }
	}

	public class TemplateTitleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TemplateTitle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTemplate_TitleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDsl_TemplateTitle_ElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDsl_TemplateTitle_ElementsHeaderFooterFragmentParserRuleCall_1_0 = (RuleCall)cDsl_TemplateTitle_ElementsAssignment_1.eContents().get(0);
		private final Keyword cEnd_TitleKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//TemplateTitle:
		//	"Template_Title" dsl_TemplateTitle_Elements+=HeaderFooterFragment+ "End_Title";
		public ParserRule getRule() { return rule; }

		//"Template_Title" dsl_TemplateTitle_Elements+=HeaderFooterFragment+ "End_Title"
		public Group getGroup() { return cGroup; }

		//"Template_Title"
		public Keyword getTemplate_TitleKeyword_0() { return cTemplate_TitleKeyword_0; }

		//dsl_TemplateTitle_Elements+=HeaderFooterFragment+
		public Assignment getDsl_TemplateTitle_ElementsAssignment_1() { return cDsl_TemplateTitle_ElementsAssignment_1; }

		//HeaderFooterFragment
		public RuleCall getDsl_TemplateTitle_ElementsHeaderFooterFragmentParserRuleCall_1_0() { return cDsl_TemplateTitle_ElementsHeaderFooterFragmentParserRuleCall_1_0; }

		//"End_Title"
		public Keyword getEnd_TitleKeyword_2() { return cEnd_TitleKeyword_2; }
	}

	public class PageKeepWithNextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PageKeepWithNext");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPage_Keep_With_NextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDsl_PageKeepWithNext_valueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDsl_PageKeepWithNext_valueSTRINGTerminalRuleCall_1_0 = (RuleCall)cDsl_PageKeepWithNext_valueAssignment_1.eContents().get(0);
		private final Keyword cEnd_Page_Keep_With_NextKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//PageKeepWithNext:
		//	"Page_Keep_With_Next" dsl_PageKeepWithNext_value=STRING "End_Page_Keep_With_Next";
		public ParserRule getRule() { return rule; }

		//"Page_Keep_With_Next" dsl_PageKeepWithNext_value=STRING "End_Page_Keep_With_Next"
		public Group getGroup() { return cGroup; }

		//"Page_Keep_With_Next"
		public Keyword getPage_Keep_With_NextKeyword_0() { return cPage_Keep_With_NextKeyword_0; }

		//dsl_PageKeepWithNext_value=STRING
		public Assignment getDsl_PageKeepWithNext_valueAssignment_1() { return cDsl_PageKeepWithNext_valueAssignment_1; }

		//STRING
		public RuleCall getDsl_PageKeepWithNext_valueSTRINGTerminalRuleCall_1_0() { return cDsl_PageKeepWithNext_valueSTRINGTerminalRuleCall_1_0; }

		//"End_Page_Keep_With_Next"
		public Keyword getEnd_Page_Keep_With_NextKeyword_2() { return cEnd_Page_Keep_With_NextKeyword_2; }
	}

	public class PageHeaderEvenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PageHeaderEven");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPage_Header_EvenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDsl_PageHeader_columnsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDsl_PageHeader_columnsHeaderFooterColumnParserRuleCall_1_0 = (RuleCall)cDsl_PageHeader_columnsAssignment_1.eContents().get(0);
		private final Keyword cEnd_Page_Header_EvenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//PageHeaderEven:
		//	"Page_Header_Even" dsl_PageHeader_columns+=HeaderFooterColumn+ "End_Page_Header_Even";
		public ParserRule getRule() { return rule; }

		//"Page_Header_Even" dsl_PageHeader_columns+=HeaderFooterColumn+ "End_Page_Header_Even"
		public Group getGroup() { return cGroup; }

		//"Page_Header_Even"
		public Keyword getPage_Header_EvenKeyword_0() { return cPage_Header_EvenKeyword_0; }

		//dsl_PageHeader_columns+=HeaderFooterColumn+
		public Assignment getDsl_PageHeader_columnsAssignment_1() { return cDsl_PageHeader_columnsAssignment_1; }

		//HeaderFooterColumn
		public RuleCall getDsl_PageHeader_columnsHeaderFooterColumnParserRuleCall_1_0() { return cDsl_PageHeader_columnsHeaderFooterColumnParserRuleCall_1_0; }

		//"End_Page_Header_Even"
		public Keyword getEnd_Page_Header_EvenKeyword_2() { return cEnd_Page_Header_EvenKeyword_2; }
	}

	public class PageHeaderOddElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PageHeaderOdd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPage_Header_OddKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDsl_PageHeader_columnsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDsl_PageHeader_columnsHeaderFooterColumnParserRuleCall_1_0 = (RuleCall)cDsl_PageHeader_columnsAssignment_1.eContents().get(0);
		private final Keyword cEnd_Page_Header_OddKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//PageHeaderOdd:
		//	"Page_Header_Odd" dsl_PageHeader_columns+=HeaderFooterColumn+ "End_Page_Header_Odd";
		public ParserRule getRule() { return rule; }

		//"Page_Header_Odd" dsl_PageHeader_columns+=HeaderFooterColumn+ "End_Page_Header_Odd"
		public Group getGroup() { return cGroup; }

		//"Page_Header_Odd"
		public Keyword getPage_Header_OddKeyword_0() { return cPage_Header_OddKeyword_0; }

		//dsl_PageHeader_columns+=HeaderFooterColumn+
		public Assignment getDsl_PageHeader_columnsAssignment_1() { return cDsl_PageHeader_columnsAssignment_1; }

		//HeaderFooterColumn
		public RuleCall getDsl_PageHeader_columnsHeaderFooterColumnParserRuleCall_1_0() { return cDsl_PageHeader_columnsHeaderFooterColumnParserRuleCall_1_0; }

		//"End_Page_Header_Odd"
		public Keyword getEnd_Page_Header_OddKeyword_2() { return cEnd_Page_Header_OddKeyword_2; }
	}

	public class PageFooterEvenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PageFooterEven");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPage_Footer_EvenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDsl_PageHeader_columnsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDsl_PageHeader_columnsHeaderFooterColumnParserRuleCall_1_0 = (RuleCall)cDsl_PageHeader_columnsAssignment_1.eContents().get(0);
		private final Keyword cEnd_Page_Footer_EvenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//PageFooterEven:
		//	"Page_Footer_Even" dsl_PageHeader_columns+=HeaderFooterColumn+ "End_Page_Footer_Even";
		public ParserRule getRule() { return rule; }

		//"Page_Footer_Even" dsl_PageHeader_columns+=HeaderFooterColumn+ "End_Page_Footer_Even"
		public Group getGroup() { return cGroup; }

		//"Page_Footer_Even"
		public Keyword getPage_Footer_EvenKeyword_0() { return cPage_Footer_EvenKeyword_0; }

		//dsl_PageHeader_columns+=HeaderFooterColumn+
		public Assignment getDsl_PageHeader_columnsAssignment_1() { return cDsl_PageHeader_columnsAssignment_1; }

		//HeaderFooterColumn
		public RuleCall getDsl_PageHeader_columnsHeaderFooterColumnParserRuleCall_1_0() { return cDsl_PageHeader_columnsHeaderFooterColumnParserRuleCall_1_0; }

		//"End_Page_Footer_Even"
		public Keyword getEnd_Page_Footer_EvenKeyword_2() { return cEnd_Page_Footer_EvenKeyword_2; }
	}

	public class PageFooterOddElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PageFooterOdd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPage_Footer_OddKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDsl_PageHeader_columnsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDsl_PageHeader_columnsHeaderFooterColumnParserRuleCall_1_0 = (RuleCall)cDsl_PageHeader_columnsAssignment_1.eContents().get(0);
		private final Keyword cEnd_Page_Footer_OddKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//PageFooterOdd:
		//	"Page_Footer_Odd" dsl_PageHeader_columns+=HeaderFooterColumn+ "End_Page_Footer_Odd";
		public ParserRule getRule() { return rule; }

		//"Page_Footer_Odd" dsl_PageHeader_columns+=HeaderFooterColumn+ "End_Page_Footer_Odd"
		public Group getGroup() { return cGroup; }

		//"Page_Footer_Odd"
		public Keyword getPage_Footer_OddKeyword_0() { return cPage_Footer_OddKeyword_0; }

		//dsl_PageHeader_columns+=HeaderFooterColumn+
		public Assignment getDsl_PageHeader_columnsAssignment_1() { return cDsl_PageHeader_columnsAssignment_1; }

		//HeaderFooterColumn
		public RuleCall getDsl_PageHeader_columnsHeaderFooterColumnParserRuleCall_1_0() { return cDsl_PageHeader_columnsHeaderFooterColumnParserRuleCall_1_0; }

		//"End_Page_Footer_Odd"
		public Keyword getEnd_Page_Footer_OddKeyword_2() { return cEnd_Page_Footer_OddKeyword_2; }
	}

	public class HeaderFooterColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HeaderFooterColumn");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHeaderFooterColumnLeftParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cHeaderFooterColumnCenterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cHeaderFooterColumnRightParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//HeaderFooterColumn:
		//	HeaderFooterColumnLeft | HeaderFooterColumnCenter | HeaderFooterColumnRight;
		public ParserRule getRule() { return rule; }

		//HeaderFooterColumnLeft | HeaderFooterColumnCenter | HeaderFooterColumnRight
		public Alternatives getAlternatives() { return cAlternatives; }

		//HeaderFooterColumnLeft
		public RuleCall getHeaderFooterColumnLeftParserRuleCall_0() { return cHeaderFooterColumnLeftParserRuleCall_0; }

		//HeaderFooterColumnCenter
		public RuleCall getHeaderFooterColumnCenterParserRuleCall_1() { return cHeaderFooterColumnCenterParserRuleCall_1; }

		//HeaderFooterColumnRight
		public RuleCall getHeaderFooterColumnRightParserRuleCall_2() { return cHeaderFooterColumnRightParserRuleCall_2; }
	}

	public class HeaderFooterColumnLeftElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HeaderFooterColumnLeft");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDsl_HeaderFooterColumn_fragmentsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDsl_HeaderFooterColumn_fragmentsHeaderFooterFragmentParserRuleCall_1_0 = (RuleCall)cDsl_HeaderFooterColumn_fragmentsAssignment_1.eContents().get(0);
		
		//HeaderFooterColumnLeft:
		//	"left" dsl_HeaderFooterColumn_fragments+=HeaderFooterFragment+;
		public ParserRule getRule() { return rule; }

		//"left" dsl_HeaderFooterColumn_fragments+=HeaderFooterFragment+
		public Group getGroup() { return cGroup; }

		//"left"
		public Keyword getLeftKeyword_0() { return cLeftKeyword_0; }

		//dsl_HeaderFooterColumn_fragments+=HeaderFooterFragment+
		public Assignment getDsl_HeaderFooterColumn_fragmentsAssignment_1() { return cDsl_HeaderFooterColumn_fragmentsAssignment_1; }

		//HeaderFooterFragment
		public RuleCall getDsl_HeaderFooterColumn_fragmentsHeaderFooterFragmentParserRuleCall_1_0() { return cDsl_HeaderFooterColumn_fragmentsHeaderFooterFragmentParserRuleCall_1_0; }
	}

	public class HeaderFooterColumnCenterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HeaderFooterColumnCenter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCenterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDsl_HeaderFooterColumn_fragmentsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDsl_HeaderFooterColumn_fragmentsHeaderFooterFragmentParserRuleCall_1_0 = (RuleCall)cDsl_HeaderFooterColumn_fragmentsAssignment_1.eContents().get(0);
		
		//HeaderFooterColumnCenter:
		//	"center" dsl_HeaderFooterColumn_fragments+=HeaderFooterFragment+;
		public ParserRule getRule() { return rule; }

		//"center" dsl_HeaderFooterColumn_fragments+=HeaderFooterFragment+
		public Group getGroup() { return cGroup; }

		//"center"
		public Keyword getCenterKeyword_0() { return cCenterKeyword_0; }

		//dsl_HeaderFooterColumn_fragments+=HeaderFooterFragment+
		public Assignment getDsl_HeaderFooterColumn_fragmentsAssignment_1() { return cDsl_HeaderFooterColumn_fragmentsAssignment_1; }

		//HeaderFooterFragment
		public RuleCall getDsl_HeaderFooterColumn_fragmentsHeaderFooterFragmentParserRuleCall_1_0() { return cDsl_HeaderFooterColumn_fragmentsHeaderFooterFragmentParserRuleCall_1_0; }
	}

	public class HeaderFooterColumnRightElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HeaderFooterColumnRight");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRightKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDsl_HeaderFooterColumn_fragmentsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDsl_HeaderFooterColumn_fragmentsHeaderFooterFragmentParserRuleCall_1_0 = (RuleCall)cDsl_HeaderFooterColumn_fragmentsAssignment_1.eContents().get(0);
		
		//HeaderFooterColumnRight:
		//	"right" dsl_HeaderFooterColumn_fragments+=HeaderFooterFragment+;
		public ParserRule getRule() { return rule; }

		//"right" dsl_HeaderFooterColumn_fragments+=HeaderFooterFragment+
		public Group getGroup() { return cGroup; }

		//"right"
		public Keyword getRightKeyword_0() { return cRightKeyword_0; }

		//dsl_HeaderFooterColumn_fragments+=HeaderFooterFragment+
		public Assignment getDsl_HeaderFooterColumn_fragmentsAssignment_1() { return cDsl_HeaderFooterColumn_fragmentsAssignment_1; }

		//HeaderFooterFragment
		public RuleCall getDsl_HeaderFooterColumn_fragmentsHeaderFooterFragmentParserRuleCall_1_0() { return cDsl_HeaderFooterColumn_fragmentsHeaderFooterFragmentParserRuleCall_1_0; }
	}

	public class HeaderFooterFragmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HeaderFooterFragment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHeaderFooterTextParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cHeaderFooterDateParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cHeaderFooterPageNumberParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cHeaderFooterLookupParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cHeaderFooterTitleParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cHeaderFooterCommemorationParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//HeaderFooterFragment:
		//	HeaderFooterText | HeaderFooterDate | HeaderFooterPageNumber | HeaderFooterLookup | HeaderFooterTitle |
		//	HeaderFooterCommemoration;
		public ParserRule getRule() { return rule; }

		//HeaderFooterText | HeaderFooterDate | HeaderFooterPageNumber | HeaderFooterLookup | HeaderFooterTitle |
		//HeaderFooterCommemoration
		public Alternatives getAlternatives() { return cAlternatives; }

		//HeaderFooterText
		public RuleCall getHeaderFooterTextParserRuleCall_0() { return cHeaderFooterTextParserRuleCall_0; }

		//HeaderFooterDate
		public RuleCall getHeaderFooterDateParserRuleCall_1() { return cHeaderFooterDateParserRuleCall_1; }

		//HeaderFooterPageNumber
		public RuleCall getHeaderFooterPageNumberParserRuleCall_2() { return cHeaderFooterPageNumberParserRuleCall_2; }

		//HeaderFooterLookup
		public RuleCall getHeaderFooterLookupParserRuleCall_3() { return cHeaderFooterLookupParserRuleCall_3; }

		//HeaderFooterTitle
		public RuleCall getHeaderFooterTitleParserRuleCall_4() { return cHeaderFooterTitleParserRuleCall_4; }

		//HeaderFooterCommemoration
		public RuleCall getHeaderFooterCommemorationParserRuleCall_5() { return cHeaderFooterCommemorationParserRuleCall_5; }
	}

	public class HeaderFooterTextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HeaderFooterText");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDsl_HeaderFooterTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDsl_HeaderFooterTextSTRINGTerminalRuleCall_1_0 = (RuleCall)cDsl_HeaderFooterTextAssignment_1.eContents().get(0);
		
		//HeaderFooterText:
		//	"@text" dsl_HeaderFooterText=STRING;
		public ParserRule getRule() { return rule; }

		//"@text" dsl_HeaderFooterText=STRING
		public Group getGroup() { return cGroup; }

		//"@text"
		public Keyword getTextKeyword_0() { return cTextKeyword_0; }

		//dsl_HeaderFooterText=STRING
		public Assignment getDsl_HeaderFooterTextAssignment_1() { return cDsl_HeaderFooterTextAssignment_1; }

		//STRING
		public RuleCall getDsl_HeaderFooterTextSTRINGTerminalRuleCall_1_0() { return cDsl_HeaderFooterTextSTRINGTerminalRuleCall_1_0; }
	}

	public class HeaderFooterDateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HeaderFooterDate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDsl_HeaderFooterDateAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cDsl_HeaderFooterDateDateKeyword_0_0 = (Keyword)cDsl_HeaderFooterDateAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLangKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDsl_HeaderFooterDate_LanguageAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDsl_HeaderFooterDate_LanguageLanguageEnumRuleCall_1_1_0 = (RuleCall)cDsl_HeaderFooterDate_LanguageAssignment_1_1.eContents().get(0);
		
		//HeaderFooterDate:
		//	dsl_HeaderFooterDate?="@date" ("lang" dsl_HeaderFooterDate_Language=Language)?;
		public ParserRule getRule() { return rule; }

		//dsl_HeaderFooterDate?="@date" ("lang" dsl_HeaderFooterDate_Language=Language)?
		public Group getGroup() { return cGroup; }

		//dsl_HeaderFooterDate?="@date"
		public Assignment getDsl_HeaderFooterDateAssignment_0() { return cDsl_HeaderFooterDateAssignment_0; }

		//"@date"
		public Keyword getDsl_HeaderFooterDateDateKeyword_0_0() { return cDsl_HeaderFooterDateDateKeyword_0_0; }

		//("lang" dsl_HeaderFooterDate_Language=Language)?
		public Group getGroup_1() { return cGroup_1; }

		//"lang"
		public Keyword getLangKeyword_1_0() { return cLangKeyword_1_0; }

		//dsl_HeaderFooterDate_Language=Language
		public Assignment getDsl_HeaderFooterDate_LanguageAssignment_1_1() { return cDsl_HeaderFooterDate_LanguageAssignment_1_1; }

		//Language
		public RuleCall getDsl_HeaderFooterDate_LanguageLanguageEnumRuleCall_1_1_0() { return cDsl_HeaderFooterDate_LanguageLanguageEnumRuleCall_1_1_0; }
	}

	public class HeaderFooterPageNumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HeaderFooterPageNumber");
		private final Assignment cDsl_HeaderFooterPageNumberAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cDsl_HeaderFooterPageNumberPageNbrKeyword_0 = (Keyword)cDsl_HeaderFooterPageNumberAssignment.eContents().get(0);
		
		//HeaderFooterPageNumber:
		//	dsl_HeaderFooterPageNumber?="@pageNbr";
		public ParserRule getRule() { return rule; }

		//dsl_HeaderFooterPageNumber?="@pageNbr"
		public Assignment getDsl_HeaderFooterPageNumberAssignment() { return cDsl_HeaderFooterPageNumberAssignment; }

		//"@pageNbr"
		public Keyword getDsl_HeaderFooterPageNumberPageNbrKeyword_0() { return cDsl_HeaderFooterPageNumberPageNbrKeyword_0; }
	}

	public class HeaderFooterLookupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HeaderFooterLookup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLookupKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDsl_HeaderFooterLookup_ElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDsl_HeaderFooterLookup_ElementsElementTypeParserRuleCall_1_0 = (RuleCall)cDsl_HeaderFooterLookup_ElementsAssignment_1.eContents().get(0);
		private final Keyword cLangKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDsl_HeaderFooterLookup_LanguageAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDsl_HeaderFooterLookup_LanguageLanguageEnumRuleCall_3_0 = (RuleCall)cDsl_HeaderFooterLookup_LanguageAssignment_3.eContents().get(0);
		
		//HeaderFooterLookup:
		//	"@lookup" dsl_HeaderFooterLookup_Elements+=ElementType* "lang" dsl_HeaderFooterLookup_Language=Language;
		public ParserRule getRule() { return rule; }

		//"@lookup" dsl_HeaderFooterLookup_Elements+=ElementType* "lang" dsl_HeaderFooterLookup_Language=Language
		public Group getGroup() { return cGroup; }

		//"@lookup"
		public Keyword getLookupKeyword_0() { return cLookupKeyword_0; }

		//dsl_HeaderFooterLookup_Elements+=ElementType*
		public Assignment getDsl_HeaderFooterLookup_ElementsAssignment_1() { return cDsl_HeaderFooterLookup_ElementsAssignment_1; }

		//ElementType
		public RuleCall getDsl_HeaderFooterLookup_ElementsElementTypeParserRuleCall_1_0() { return cDsl_HeaderFooterLookup_ElementsElementTypeParserRuleCall_1_0; }

		//"lang"
		public Keyword getLangKeyword_2() { return cLangKeyword_2; }

		//dsl_HeaderFooterLookup_Language=Language
		public Assignment getDsl_HeaderFooterLookup_LanguageAssignment_3() { return cDsl_HeaderFooterLookup_LanguageAssignment_3; }

		//Language
		public RuleCall getDsl_HeaderFooterLookup_LanguageLanguageEnumRuleCall_3_0() { return cDsl_HeaderFooterLookup_LanguageLanguageEnumRuleCall_3_0; }
	}

	public class HeaderFooterTitleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HeaderFooterTitle");
		private final Assignment cDsl_HeaderFooterTitleAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cDsl_HeaderFooterTitleTitleKeyword_0 = (Keyword)cDsl_HeaderFooterTitleAssignment.eContents().get(0);
		
		//HeaderFooterTitle:
		//	dsl_HeaderFooterTitle?="@title";
		public ParserRule getRule() { return rule; }

		//dsl_HeaderFooterTitle?="@title"
		public Assignment getDsl_HeaderFooterTitleAssignment() { return cDsl_HeaderFooterTitleAssignment; }

		//"@title"
		public Keyword getDsl_HeaderFooterTitleTitleKeyword_0() { return cDsl_HeaderFooterTitleTitleKeyword_0; }
	}

	public class HeaderFooterCommemorationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HeaderFooterCommemoration");
		private final Assignment cDsl_HeaderFooterCommemorationAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cDsl_HeaderFooterCommemorationCommemorationKeyword_0 = (Keyword)cDsl_HeaderFooterCommemorationAssignment.eContents().get(0);
		
		//HeaderFooterCommemoration:
		//	dsl_HeaderFooterCommemoration?="@commemoration";
		public ParserRule getRule() { return rule; }

		//dsl_HeaderFooterCommemoration?="@commemoration"
		public Assignment getDsl_HeaderFooterCommemorationAssignment() { return cDsl_HeaderFooterCommemorationAssignment; }

		//"@commemoration"
		public Keyword getDsl_HeaderFooterCommemorationCommemorationKeyword_0() { return cDsl_HeaderFooterCommemorationCommemorationKeyword_0; }
	}

	public class CommemorationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Commemoration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTemplate_CommemorationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDsl_Commemoration_ElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDsl_Commemoration_ElementsHeaderFooterFragmentParserRuleCall_1_0 = (RuleCall)cDsl_Commemoration_ElementsAssignment_1.eContents().get(0);
		private final Keyword cEnd_Template_CommemorationKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Commemoration:
		//	"Template_Commemoration" dsl_Commemoration_Elements+=HeaderFooterFragment+ "End_Template_Commemoration";
		public ParserRule getRule() { return rule; }

		//"Template_Commemoration" dsl_Commemoration_Elements+=HeaderFooterFragment+ "End_Template_Commemoration"
		public Group getGroup() { return cGroup; }

		//"Template_Commemoration"
		public Keyword getTemplate_CommemorationKeyword_0() { return cTemplate_CommemorationKeyword_0; }

		//dsl_Commemoration_Elements+=HeaderFooterFragment+
		public Assignment getDsl_Commemoration_ElementsAssignment_1() { return cDsl_Commemoration_ElementsAssignment_1; }

		//HeaderFooterFragment
		public RuleCall getDsl_Commemoration_ElementsHeaderFooterFragmentParserRuleCall_1_0() { return cDsl_Commemoration_ElementsHeaderFooterFragmentParserRuleCall_1_0; }

		//"End_Template_Commemoration"
		public Keyword getEnd_Template_CommemorationKeyword_2() { return cEnd_Template_CommemorationKeyword_2; }
	}

	public class TemplateStatusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TemplateStatus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStatusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDsl_TemplateStatusAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDsl_TemplateStatusTemplateStatusesEnumRuleCall_1_0 = (RuleCall)cDsl_TemplateStatusAssignment_1.eContents().get(0);
		
		//TemplateStatus:
		//	"Status" dsl_TemplateStatus=TemplateStatuses;
		public ParserRule getRule() { return rule; }

		//"Status" dsl_TemplateStatus=TemplateStatuses
		public Group getGroup() { return cGroup; }

		//"Status"
		public Keyword getStatusKeyword_0() { return cStatusKeyword_0; }

		//dsl_TemplateStatus=TemplateStatuses
		public Assignment getDsl_TemplateStatusAssignment_1() { return cDsl_TemplateStatusAssignment_1; }

		//TemplateStatuses
		public RuleCall getDsl_TemplateStatusTemplateStatusesEnumRuleCall_1_0() { return cDsl_TemplateStatusTemplateStatusesEnumRuleCall_1_0; }
	}

	public class AbstractComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractComponent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cActorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAidParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBlockParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBreakParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDialogParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cTitleParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cHeading1ParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cHeading2ParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cHeading3ParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cHymnParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cMediaParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cInfoParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cLitBookParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cParagraphParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cPassThroughHtmlParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cPassThroughPdfParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cReadingParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cRestoreLocaleParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cRubricParserRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		private final RuleCall cSectionParserRuleCall_19 = (RuleCall)cAlternatives.eContents().get(19);
		private final RuleCall cSectionFragmentParserRuleCall_20 = (RuleCall)cAlternatives.eContents().get(20);
		private final RuleCall cSetLocaleParserRuleCall_21 = (RuleCall)cAlternatives.eContents().get(21);
		private final RuleCall cTemplateFragmentParserRuleCall_22 = (RuleCall)cAlternatives.eContents().get(22);
		private final RuleCall cSubTitleParserRuleCall_23 = (RuleCall)cAlternatives.eContents().get(23);
		private final RuleCall cVerseParserRuleCall_24 = (RuleCall)cAlternatives.eContents().get(24);
		private final RuleCall cVersionParserRuleCall_25 = (RuleCall)cAlternatives.eContents().get(25);
		private final RuleCall cVersionSwitchParserRuleCall_26 = (RuleCall)cAlternatives.eContents().get(26);
		private final RuleCall cWhenDateParserRuleCall_27 = (RuleCall)cAlternatives.eContents().get(27);
		private final RuleCall cWhenDayNameParserRuleCall_28 = (RuleCall)cAlternatives.eContents().get(28);
		private final RuleCall cWhenExistsParserRuleCall_29 = (RuleCall)cAlternatives.eContents().get(29);
		private final RuleCall cWhenLukanCycleDayParserRuleCall_30 = (RuleCall)cAlternatives.eContents().get(30);
		private final RuleCall cWhenModeOfWeekParserRuleCall_31 = (RuleCall)cAlternatives.eContents().get(31);
		private final RuleCall cWhenPaschaParserRuleCall_32 = (RuleCall)cAlternatives.eContents().get(32);
		private final RuleCall cWhenMovableCycleDayParserRuleCall_33 = (RuleCall)cAlternatives.eContents().get(33);
		private final RuleCall cWhenPentecostarionDayParserRuleCall_34 = (RuleCall)cAlternatives.eContents().get(34);
		private final RuleCall cWhenSundayAfterElevationOfCrossDayParserRuleCall_35 = (RuleCall)cAlternatives.eContents().get(35);
		private final RuleCall cWhenTriodionDayParserRuleCall_36 = (RuleCall)cAlternatives.eContents().get(36);
		private final RuleCall cWhenSundaysBeforeTriodionParserRuleCall_37 = (RuleCall)cAlternatives.eContents().get(37);
		
		//AbstractComponent:
		//	Actor //	| Condition
		//	//	| IfStatement
		//	//	| WhenCondition
		//	| Aid | Block | Break | Dialog | Title | Heading1 | Heading2 | Heading3 | Hymn | Media | Info | LitBook | Paragraph |
		//	PassThroughHtml | PassThroughPdf | Reading | RestoreLocale | Rubric | Section | SectionFragment | SetLocale |
		//	TemplateFragment | SubTitle | Verse | Version | VersionSwitch | WhenDate | WhenDayName | WhenExists |
		//	WhenLukanCycleDay | WhenModeOfWeek | WhenPascha | WhenMovableCycleDay | WhenPentecostarionDay |
		//	WhenSundayAfterElevationOfCrossDay | WhenTriodionDay | WhenSundaysBeforeTriodion;
		public ParserRule getRule() { return rule; }

		//Actor //	| Condition
		////	| IfStatement
		////	| WhenCondition
		//| Aid | Block | Break | Dialog | Title | Heading1 | Heading2 | Heading3 | Hymn | Media | Info | LitBook | Paragraph |
		//PassThroughHtml | PassThroughPdf | Reading | RestoreLocale | Rubric | Section | SectionFragment | SetLocale |
		//TemplateFragment | SubTitle | Verse | Version | VersionSwitch | WhenDate | WhenDayName | WhenExists | WhenLukanCycleDay
		//| WhenModeOfWeek | WhenPascha | WhenMovableCycleDay | WhenPentecostarionDay | WhenSundayAfterElevationOfCrossDay |
		//WhenTriodionDay | WhenSundaysBeforeTriodion
		public Alternatives getAlternatives() { return cAlternatives; }

		//Actor
		public RuleCall getActorParserRuleCall_0() { return cActorParserRuleCall_0; }

		//Aid
		public RuleCall getAidParserRuleCall_1() { return cAidParserRuleCall_1; }

		//Block
		public RuleCall getBlockParserRuleCall_2() { return cBlockParserRuleCall_2; }

		//Break
		public RuleCall getBreakParserRuleCall_3() { return cBreakParserRuleCall_3; }

		//Dialog
		public RuleCall getDialogParserRuleCall_4() { return cDialogParserRuleCall_4; }

		//Title
		public RuleCall getTitleParserRuleCall_5() { return cTitleParserRuleCall_5; }

		//Heading1
		public RuleCall getHeading1ParserRuleCall_6() { return cHeading1ParserRuleCall_6; }

		//Heading2
		public RuleCall getHeading2ParserRuleCall_7() { return cHeading2ParserRuleCall_7; }

		//Heading3
		public RuleCall getHeading3ParserRuleCall_8() { return cHeading3ParserRuleCall_8; }

		//Hymn
		public RuleCall getHymnParserRuleCall_9() { return cHymnParserRuleCall_9; }

		//Media
		public RuleCall getMediaParserRuleCall_10() { return cMediaParserRuleCall_10; }

		//Info
		public RuleCall getInfoParserRuleCall_11() { return cInfoParserRuleCall_11; }

		//LitBook
		public RuleCall getLitBookParserRuleCall_12() { return cLitBookParserRuleCall_12; }

		//Paragraph
		public RuleCall getParagraphParserRuleCall_13() { return cParagraphParserRuleCall_13; }

		//PassThroughHtml
		public RuleCall getPassThroughHtmlParserRuleCall_14() { return cPassThroughHtmlParserRuleCall_14; }

		//PassThroughPdf
		public RuleCall getPassThroughPdfParserRuleCall_15() { return cPassThroughPdfParserRuleCall_15; }

		//Reading
		public RuleCall getReadingParserRuleCall_16() { return cReadingParserRuleCall_16; }

		//RestoreLocale
		public RuleCall getRestoreLocaleParserRuleCall_17() { return cRestoreLocaleParserRuleCall_17; }

		//Rubric
		public RuleCall getRubricParserRuleCall_18() { return cRubricParserRuleCall_18; }

		//Section
		public RuleCall getSectionParserRuleCall_19() { return cSectionParserRuleCall_19; }

		//SectionFragment
		public RuleCall getSectionFragmentParserRuleCall_20() { return cSectionFragmentParserRuleCall_20; }

		//SetLocale
		public RuleCall getSetLocaleParserRuleCall_21() { return cSetLocaleParserRuleCall_21; }

		//TemplateFragment
		public RuleCall getTemplateFragmentParserRuleCall_22() { return cTemplateFragmentParserRuleCall_22; }

		//SubTitle
		public RuleCall getSubTitleParserRuleCall_23() { return cSubTitleParserRuleCall_23; }

		//Verse
		public RuleCall getVerseParserRuleCall_24() { return cVerseParserRuleCall_24; }

		//Version
		public RuleCall getVersionParserRuleCall_25() { return cVersionParserRuleCall_25; }

		//VersionSwitch
		public RuleCall getVersionSwitchParserRuleCall_26() { return cVersionSwitchParserRuleCall_26; }

		//WhenDate
		public RuleCall getWhenDateParserRuleCall_27() { return cWhenDateParserRuleCall_27; }

		//WhenDayName
		public RuleCall getWhenDayNameParserRuleCall_28() { return cWhenDayNameParserRuleCall_28; }

		//WhenExists
		public RuleCall getWhenExistsParserRuleCall_29() { return cWhenExistsParserRuleCall_29; }

		//WhenLukanCycleDay
		public RuleCall getWhenLukanCycleDayParserRuleCall_30() { return cWhenLukanCycleDayParserRuleCall_30; }

		//WhenModeOfWeek
		public RuleCall getWhenModeOfWeekParserRuleCall_31() { return cWhenModeOfWeekParserRuleCall_31; }

		//WhenPascha
		public RuleCall getWhenPaschaParserRuleCall_32() { return cWhenPaschaParserRuleCall_32; }

		//WhenMovableCycleDay
		public RuleCall getWhenMovableCycleDayParserRuleCall_33() { return cWhenMovableCycleDayParserRuleCall_33; }

		//WhenPentecostarionDay
		public RuleCall getWhenPentecostarionDayParserRuleCall_34() { return cWhenPentecostarionDayParserRuleCall_34; }

		//WhenSundayAfterElevationOfCrossDay
		public RuleCall getWhenSundayAfterElevationOfCrossDayParserRuleCall_35() { return cWhenSundayAfterElevationOfCrossDayParserRuleCall_35; }

		//WhenTriodionDay
		public RuleCall getWhenTriodionDayParserRuleCall_36() { return cWhenTriodionDayParserRuleCall_36; }

		//WhenSundaysBeforeTriodion
		public RuleCall getWhenSundaysBeforeTriodionParserRuleCall_37() { return cWhenSundaysBeforeTriodionParserRuleCall_37; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class QualifiedNameWithWildCardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildCard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildCard:
		//	QualifiedName ".*"?;
		public ParserRule getRule() { return rule; }

		//QualifiedName ".*"?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//".*"?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Import:
		//	"import" importedNamespace=QualifiedNameWithWildCard;
		public ParserRule getRule() { return rule; }

		//"import" importedNamespace=QualifiedNameWithWildCard
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=QualifiedNameWithWildCard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedNameWithWildCard
		public RuleCall getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0; }
	}

	public class VersionSwitchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VersionSwitch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSwitchVersionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDsl_VersionSwitch_flagAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDsl_VersionSwitch_flagVersionSwitchTypeEnumRuleCall_1_0 = (RuleCall)cDsl_VersionSwitch_flagAssignment_1.eContents().get(0);
		private final Keyword cEndSwitchVersionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//VersionSwitch:
		//	"Switch-Version" dsl_VersionSwitch_flag=VersionSwitchType "End-Switch-Version";
		public ParserRule getRule() { return rule; }

		//"Switch-Version" dsl_VersionSwitch_flag=VersionSwitchType "End-Switch-Version"
		public Group getGroup() { return cGroup; }

		//"Switch-Version"
		public Keyword getSwitchVersionKeyword_0() { return cSwitchVersionKeyword_0; }

		//dsl_VersionSwitch_flag=VersionSwitchType
		public Assignment getDsl_VersionSwitch_flagAssignment_1() { return cDsl_VersionSwitch_flagAssignment_1; }

		//VersionSwitchType
		public RuleCall getDsl_VersionSwitch_flagVersionSwitchTypeEnumRuleCall_1_0() { return cDsl_VersionSwitch_flagVersionSwitchTypeEnumRuleCall_1_0; }

		//"End-Switch-Version"
		public Keyword getEndSwitchVersionKeyword_2() { return cEndSwitchVersionKeyword_2; }
	}

	public class ResourceTextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ResourceText");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSidKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDsl_ResourceTextRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cDsl_ResourceTextRefDefinitionCrossReference_1_0 = (CrossReference)cDsl_ResourceTextRefAssignment_1.eContents().get(0);
		private final RuleCall cDsl_ResourceTextRefDefinitionQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cDsl_ResourceTextRefDefinitionCrossReference_1_0.eContents().get(1);
		private final Assignment cDsl_ResourceText_Media_OffAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cDsl_ResourceText_Media_OffMediaOffKeyword_2_0 = (Keyword)cDsl_ResourceText_Media_OffAssignment_2.eContents().get(0);
		
		//ResourceText:
		//	"sid" dsl_ResourceTextRef=[def::Definition|QualifiedName] dsl_ResourceText_Media_Off?="media-off"?;
		public ParserRule getRule() { return rule; }

		//"sid" dsl_ResourceTextRef=[def::Definition|QualifiedName] dsl_ResourceText_Media_Off?="media-off"?
		public Group getGroup() { return cGroup; }

		//"sid"
		public Keyword getSidKeyword_0() { return cSidKeyword_0; }

		//dsl_ResourceTextRef=[def::Definition|QualifiedName]
		public Assignment getDsl_ResourceTextRefAssignment_1() { return cDsl_ResourceTextRefAssignment_1; }

		//[def::Definition|QualifiedName]
		public CrossReference getDsl_ResourceTextRefDefinitionCrossReference_1_0() { return cDsl_ResourceTextRefDefinitionCrossReference_1_0; }

		//QualifiedName
		public RuleCall getDsl_ResourceTextRefDefinitionQualifiedNameParserRuleCall_1_0_1() { return cDsl_ResourceTextRefDefinitionQualifiedNameParserRuleCall_1_0_1; }

		//dsl_ResourceText_Media_Off?="media-off"?
		public Assignment getDsl_ResourceText_Media_OffAssignment_2() { return cDsl_ResourceText_Media_OffAssignment_2; }

		//"media-off"
		public Keyword getDsl_ResourceText_Media_OffMediaOffKeyword_2_0() { return cDsl_ResourceText_Media_OffMediaOffKeyword_2_0; }
	}

	public class LookupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Lookup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRidKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDsl_ResourceTextRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cDsl_ResourceTextRefDefinitionCrossReference_1_0 = (CrossReference)cDsl_ResourceTextRefAssignment_1.eContents().get(0);
		private final RuleCall cDsl_ResourceTextRefDefinitionQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cDsl_ResourceTextRefDefinitionCrossReference_1_0.eContents().get(1);
		private final Assignment cDsl_Lookup_Media_OffAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cDsl_Lookup_Media_OffMediaOffKeyword_2_0 = (Keyword)cDsl_Lookup_Media_OffAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cDsl_Lookup_Override_Mode_SetAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cDsl_Lookup_Override_Mode_SetModeKeyword_3_0_0 = (Keyword)cDsl_Lookup_Override_Mode_SetAssignment_3_0.eContents().get(0);
		private final Assignment cDsl_Lookup_OverrideModeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDsl_Lookup_OverrideModeModeTypesEnumRuleCall_3_1_0 = (RuleCall)cDsl_Lookup_OverrideModeAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cDsl_Lookup_Override__Day_SetAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cDsl_Lookup_Override__Day_SetDayKeyword_4_0_0 = (Keyword)cDsl_Lookup_Override__Day_SetAssignment_4_0.eContents().get(0);
		private final Assignment cDsl_Lookup_OverrideDayAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cDsl_Lookup_OverrideDayDowTypesEnumRuleCall_4_1_0 = (RuleCall)cDsl_Lookup_OverrideDayAssignment_4_1.eContents().get(0);
		
		//Lookup:
		//	"rid" dsl_ResourceTextRef=[def::Definition|QualifiedName] dsl_Lookup_Media_Off?="media-off"?
		//	(dsl_Lookup_Override_Mode_Set?="@mode" dsl_Lookup_OverrideMode=ModeTypes)? (dsl_Lookup_Override__Day_Set?="@day"
		//	dsl_Lookup_OverrideDay=DowTypes)?;
		public ParserRule getRule() { return rule; }

		//"rid" dsl_ResourceTextRef=[def::Definition|QualifiedName] dsl_Lookup_Media_Off?="media-off"?
		//(dsl_Lookup_Override_Mode_Set?="@mode" dsl_Lookup_OverrideMode=ModeTypes)? (dsl_Lookup_Override__Day_Set?="@day"
		//dsl_Lookup_OverrideDay=DowTypes)?
		public Group getGroup() { return cGroup; }

		//"rid"
		public Keyword getRidKeyword_0() { return cRidKeyword_0; }

		//dsl_ResourceTextRef=[def::Definition|QualifiedName]
		public Assignment getDsl_ResourceTextRefAssignment_1() { return cDsl_ResourceTextRefAssignment_1; }

		//[def::Definition|QualifiedName]
		public CrossReference getDsl_ResourceTextRefDefinitionCrossReference_1_0() { return cDsl_ResourceTextRefDefinitionCrossReference_1_0; }

		//QualifiedName
		public RuleCall getDsl_ResourceTextRefDefinitionQualifiedNameParserRuleCall_1_0_1() { return cDsl_ResourceTextRefDefinitionQualifiedNameParserRuleCall_1_0_1; }

		//dsl_Lookup_Media_Off?="media-off"?
		public Assignment getDsl_Lookup_Media_OffAssignment_2() { return cDsl_Lookup_Media_OffAssignment_2; }

		//"media-off"
		public Keyword getDsl_Lookup_Media_OffMediaOffKeyword_2_0() { return cDsl_Lookup_Media_OffMediaOffKeyword_2_0; }

		//(dsl_Lookup_Override_Mode_Set?="@mode" dsl_Lookup_OverrideMode=ModeTypes)?
		public Group getGroup_3() { return cGroup_3; }

		//dsl_Lookup_Override_Mode_Set?="@mode"
		public Assignment getDsl_Lookup_Override_Mode_SetAssignment_3_0() { return cDsl_Lookup_Override_Mode_SetAssignment_3_0; }

		//"@mode"
		public Keyword getDsl_Lookup_Override_Mode_SetModeKeyword_3_0_0() { return cDsl_Lookup_Override_Mode_SetModeKeyword_3_0_0; }

		//dsl_Lookup_OverrideMode=ModeTypes
		public Assignment getDsl_Lookup_OverrideModeAssignment_3_1() { return cDsl_Lookup_OverrideModeAssignment_3_1; }

		//ModeTypes
		public RuleCall getDsl_Lookup_OverrideModeModeTypesEnumRuleCall_3_1_0() { return cDsl_Lookup_OverrideModeModeTypesEnumRuleCall_3_1_0; }

		//(dsl_Lookup_Override__Day_Set?="@day" dsl_Lookup_OverrideDay=DowTypes)?
		public Group getGroup_4() { return cGroup_4; }

		//dsl_Lookup_Override__Day_Set?="@day"
		public Assignment getDsl_Lookup_Override__Day_SetAssignment_4_0() { return cDsl_Lookup_Override__Day_SetAssignment_4_0; }

		//"@day"
		public Keyword getDsl_Lookup_Override__Day_SetDayKeyword_4_0_0() { return cDsl_Lookup_Override__Day_SetDayKeyword_4_0_0; }

		//dsl_Lookup_OverrideDay=DowTypes
		public Assignment getDsl_Lookup_OverrideDayAssignment_4_1() { return cDsl_Lookup_OverrideDayAssignment_4_1; }

		//DowTypes
		public RuleCall getDsl_Lookup_OverrideDayDowTypesEnumRuleCall_4_1_0() { return cDsl_Lookup_OverrideDayDowTypesEnumRuleCall_4_1_0; }
	}

	public class LDPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LDP");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLdpKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDsl_LDPAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDsl_LDPLdpTypeParserRuleCall_1_0 = (RuleCall)cDsl_LDPAssignment_1.eContents().get(0);
		
		//LDP:
		//	"ldp" dsl_LDP+=LdpType*;
		public ParserRule getRule() { return rule; }

		//"ldp" dsl_LDP+=LdpType*
		public Group getGroup() { return cGroup; }

		//"ldp"
		public Keyword getLdpKeyword_0() { return cLdpKeyword_0; }

		//dsl_LDP+=LdpType*
		public Assignment getDsl_LDPAssignment_1() { return cDsl_LDPAssignment_1; }

		//LdpType
		public RuleCall getDsl_LDPLdpTypeParserRuleCall_1_0() { return cDsl_LDPLdpTypeParserRuleCall_1_0; }
	}

	public class TaggedTextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TaggedText");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDsl_TaggedText_tagAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cDsl_TaggedText_tagDefinitionCrossReference_1_0 = (CrossReference)cDsl_TaggedText_tagAssignment_1.eContents().get(0);
		private final RuleCall cDsl_TaggedText_tagDefinitionQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cDsl_TaggedText_tagDefinitionCrossReference_1_0.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDsl_TaggedTextAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDsl_TaggedTextElementTypeParserRuleCall_3_0 = (RuleCall)cDsl_TaggedTextAssignment_3.eContents().get(0);
		private final Keyword cLessThanSignSolidusGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TaggedText:
		//	"<" dsl_TaggedText_tag=[def::Definition|QualifiedName] ">" dsl_TaggedText+=ElementType* "</>";
		public ParserRule getRule() { return rule; }

		//"<" dsl_TaggedText_tag=[def::Definition|QualifiedName] ">" dsl_TaggedText+=ElementType* "</>"
		public Group getGroup() { return cGroup; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//dsl_TaggedText_tag=[def::Definition|QualifiedName]
		public Assignment getDsl_TaggedText_tagAssignment_1() { return cDsl_TaggedText_tagAssignment_1; }

		//[def::Definition|QualifiedName]
		public CrossReference getDsl_TaggedText_tagDefinitionCrossReference_1_0() { return cDsl_TaggedText_tagDefinitionCrossReference_1_0; }

		//QualifiedName
		public RuleCall getDsl_TaggedText_tagDefinitionQualifiedNameParserRuleCall_1_0_1() { return cDsl_TaggedText_tagDefinitionQualifiedNameParserRuleCall_1_0_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }

		//dsl_TaggedText+=ElementType*
		public Assignment getDsl_TaggedTextAssignment_3() { return cDsl_TaggedTextAssignment_3; }

		//ElementType
		public RuleCall getDsl_TaggedTextElementTypeParserRuleCall_3_0() { return cDsl_TaggedTextElementTypeParserRuleCall_3_0; }

		//"</>"
		public Keyword getLessThanSignSolidusGreaterThanSignKeyword_4() { return cLessThanSignSolidusGreaterThanSignKeyword_4; }
	}

	public class InfoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Info");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInfoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDsl_Info_ElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDsl_Info_ElementsInfoElementTypeParserRuleCall_2_0 = (RuleCall)cDsl_Info_ElementsAssignment_2.eContents().get(0);
		private final Keyword cEndInfoKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Info:
		//	"Info" name=ID dsl_Info_Elements+=InfoElementType* "End-Info";
		public ParserRule getRule() { return rule; }

		//"Info" name=ID dsl_Info_Elements+=InfoElementType* "End-Info"
		public Group getGroup() { return cGroup; }

		//"Info"
		public Keyword getInfoKeyword_0() { return cInfoKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//dsl_Info_Elements+=InfoElementType*
		public Assignment getDsl_Info_ElementsAssignment_2() { return cDsl_Info_ElementsAssignment_2; }

		//InfoElementType
		public RuleCall getDsl_Info_ElementsInfoElementTypeParserRuleCall_2_0() { return cDsl_Info_ElementsInfoElementTypeParserRuleCall_2_0; }

		//"End-Info"
		public Keyword getEndInfoKeyword_3() { return cEndInfoKeyword_3; }
	}

	public class InfoElementTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InfoElementType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVersionSwitchParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBlockParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cParagraphParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSubTitleParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTitleParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//InfoElementType:
		//	VersionSwitch | Block | Paragraph | SubTitle | Title;
		public ParserRule getRule() { return rule; }

		//VersionSwitch | Block | Paragraph | SubTitle | Title
		public Alternatives getAlternatives() { return cAlternatives; }

		//VersionSwitch
		public RuleCall getVersionSwitchParserRuleCall_0() { return cVersionSwitchParserRuleCall_0; }

		//Block
		public RuleCall getBlockParserRuleCall_1() { return cBlockParserRuleCall_1; }

		//Paragraph
		public RuleCall getParagraphParserRuleCall_2() { return cParagraphParserRuleCall_2; }

		//SubTitle
		public RuleCall getSubTitleParserRuleCall_3() { return cSubTitleParserRuleCall_3; }

		//Title
		public RuleCall getTitleParserRuleCall_4() { return cTitleParserRuleCall_4; }
	}

	public class DateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Date");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSet_DateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cMonthKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDsl_Date_monthAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDsl_Date_monthINTTerminalRuleCall_2_0 = (RuleCall)cDsl_Date_monthAssignment_2.eContents().get(0);
		private final Keyword cDayKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDsl_Date_dayAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDsl_Date_dayINTTerminalRuleCall_4_0 = (RuleCall)cDsl_Date_dayAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cYearKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cDsl_Date_yearAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cDsl_Date_yearINTTerminalRuleCall_5_1_0 = (RuleCall)cDsl_Date_yearAssignment_5_1.eContents().get(0);
		private final Keyword cEnd_DateKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Date:
		//	"Set_Date" "month" dsl_Date_month=INT "day" dsl_Date_day=INT ("year" dsl_Date_year=INT)? "End_Date";
		public ParserRule getRule() { return rule; }

		//"Set_Date" "month" dsl_Date_month=INT "day" dsl_Date_day=INT ("year" dsl_Date_year=INT)? "End_Date"
		public Group getGroup() { return cGroup; }

		//"Set_Date"
		public Keyword getSet_DateKeyword_0() { return cSet_DateKeyword_0; }

		//"month"
		public Keyword getMonthKeyword_1() { return cMonthKeyword_1; }

		//dsl_Date_month=INT
		public Assignment getDsl_Date_monthAssignment_2() { return cDsl_Date_monthAssignment_2; }

		//INT
		public RuleCall getDsl_Date_monthINTTerminalRuleCall_2_0() { return cDsl_Date_monthINTTerminalRuleCall_2_0; }

		//"day"
		public Keyword getDayKeyword_3() { return cDayKeyword_3; }

		//dsl_Date_day=INT
		public Assignment getDsl_Date_dayAssignment_4() { return cDsl_Date_dayAssignment_4; }

		//INT
		public RuleCall getDsl_Date_dayINTTerminalRuleCall_4_0() { return cDsl_Date_dayINTTerminalRuleCall_4_0; }

		//("year" dsl_Date_year=INT)?
		public Group getGroup_5() { return cGroup_5; }

		//"year"
		public Keyword getYearKeyword_5_0() { return cYearKeyword_5_0; }

		//dsl_Date_year=INT
		public Assignment getDsl_Date_yearAssignment_5_1() { return cDsl_Date_yearAssignment_5_1; }

		//INT
		public RuleCall getDsl_Date_yearINTTerminalRuleCall_5_1_0() { return cDsl_Date_yearINTTerminalRuleCall_5_1_0; }

		//"End_Date"
		public Keyword getEnd_DateKeyword_6() { return cEnd_DateKeyword_6; }
	}

	public class PrefaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Preface");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrefaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDsl_Preface_ElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDsl_Preface_ElementsPrefaceElementTypeParserRuleCall_2_0 = (RuleCall)cDsl_Preface_ElementsAssignment_2.eContents().get(0);
		private final Keyword cEndPrefaceKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Preface:
		//	"Preface" name=ID dsl_Preface_Elements+=PrefaceElementType* "End-Preface";
		public ParserRule getRule() { return rule; }

		//"Preface" name=ID dsl_Preface_Elements+=PrefaceElementType* "End-Preface"
		public Group getGroup() { return cGroup; }

		//"Preface"
		public Keyword getPrefaceKeyword_0() { return cPrefaceKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//dsl_Preface_Elements+=PrefaceElementType*
		public Assignment getDsl_Preface_ElementsAssignment_2() { return cDsl_Preface_ElementsAssignment_2; }

		//PrefaceElementType
		public RuleCall getDsl_Preface_ElementsPrefaceElementTypeParserRuleCall_2_0() { return cDsl_Preface_ElementsPrefaceElementTypeParserRuleCall_2_0; }

		//"End-Preface"
		public Keyword getEndPrefaceKeyword_3() { return cEndPrefaceKeyword_3; }
	}

	public class PrefaceElementTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrefaceElementType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVersionSwitchParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBlockParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cParagraphParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSectionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSectionFragmentParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSubTitleParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cTemplateFragmentParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cTitleParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//PrefaceElementType:
		//	VersionSwitch | Block | Paragraph | Section | SectionFragment | SubTitle | TemplateFragment | Title;
		public ParserRule getRule() { return rule; }

		//VersionSwitch | Block | Paragraph | Section | SectionFragment | SubTitle | TemplateFragment | Title
		public Alternatives getAlternatives() { return cAlternatives; }

		//VersionSwitch
		public RuleCall getVersionSwitchParserRuleCall_0() { return cVersionSwitchParserRuleCall_0; }

		//Block
		public RuleCall getBlockParserRuleCall_1() { return cBlockParserRuleCall_1; }

		//Paragraph
		public RuleCall getParagraphParserRuleCall_2() { return cParagraphParserRuleCall_2; }

		//Section
		public RuleCall getSectionParserRuleCall_3() { return cSectionParserRuleCall_3; }

		//SectionFragment
		public RuleCall getSectionFragmentParserRuleCall_4() { return cSectionFragmentParserRuleCall_4; }

		//SubTitle
		public RuleCall getSubTitleParserRuleCall_5() { return cSubTitleParserRuleCall_5; }

		//TemplateFragment
		public RuleCall getTemplateFragmentParserRuleCall_6() { return cTemplateFragmentParserRuleCall_6; }

		//Title
		public RuleCall getTitleParserRuleCall_7() { return cTitleParserRuleCall_7; }
	}

	public class SectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Section");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSectionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cRoleKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDsl_Section_RoleAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cDsl_Section_RoleDefinitionCrossReference_2_1_0 = (CrossReference)cDsl_Section_RoleAssignment_2_1.eContents().get(0);
		private final RuleCall cDsl_Section_RoleDefinitionQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cDsl_Section_RoleDefinitionCrossReference_2_1_0.eContents().get(1);
		private final Assignment cDsl_Section_ElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDsl_Section_ElementsSectionElementTypeParserRuleCall_3_0 = (RuleCall)cDsl_Section_ElementsAssignment_3.eContents().get(0);
		private final Keyword cEndSectionKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Section:
		//	"Section" name=ID ("role" dsl_Section_Role=[def::Definition|QualifiedName])? dsl_Section_Elements+=SectionElementType*
		//	"End-Section";
		public ParserRule getRule() { return rule; }

		//"Section" name=ID ("role" dsl_Section_Role=[def::Definition|QualifiedName])? dsl_Section_Elements+=SectionElementType*
		//"End-Section"
		public Group getGroup() { return cGroup; }

		//"Section"
		public Keyword getSectionKeyword_0() { return cSectionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("role" dsl_Section_Role=[def::Definition|QualifiedName])?
		public Group getGroup_2() { return cGroup_2; }

		//"role"
		public Keyword getRoleKeyword_2_0() { return cRoleKeyword_2_0; }

		//dsl_Section_Role=[def::Definition|QualifiedName]
		public Assignment getDsl_Section_RoleAssignment_2_1() { return cDsl_Section_RoleAssignment_2_1; }

		//[def::Definition|QualifiedName]
		public CrossReference getDsl_Section_RoleDefinitionCrossReference_2_1_0() { return cDsl_Section_RoleDefinitionCrossReference_2_1_0; }

		//QualifiedName
		public RuleCall getDsl_Section_RoleDefinitionQualifiedNameParserRuleCall_2_1_0_1() { return cDsl_Section_RoleDefinitionQualifiedNameParserRuleCall_2_1_0_1; }

		//dsl_Section_Elements+=SectionElementType*
		public Assignment getDsl_Section_ElementsAssignment_3() { return cDsl_Section_ElementsAssignment_3; }

		//SectionElementType
		public RuleCall getDsl_Section_ElementsSectionElementTypeParserRuleCall_3_0() { return cDsl_Section_ElementsSectionElementTypeParserRuleCall_3_0; }

		//"End-Section"
		public Keyword getEndSectionKeyword_4() { return cEndSectionKeyword_4; }
	}

	public class SectionElementTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SectionElementType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cActorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBlockParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBreakParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDateParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDialogParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cHeading1ParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cHeading2ParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cHeading3ParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cHymnParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cMediaParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cParagraphParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cPassThroughHtmlParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cPassThroughPdfParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cReadingParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cRestoreLocaleParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cRubricParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cSectionParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cSectionFragmentParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cSetLocaleParserRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		private final RuleCall cTemplateFragmentParserRuleCall_19 = (RuleCall)cAlternatives.eContents().get(19);
		private final RuleCall cTitleParserRuleCall_20 = (RuleCall)cAlternatives.eContents().get(20);
		private final RuleCall cSubTitleParserRuleCall_21 = (RuleCall)cAlternatives.eContents().get(21);
		private final RuleCall cVerseParserRuleCall_22 = (RuleCall)cAlternatives.eContents().get(22);
		private final RuleCall cWhenDateParserRuleCall_23 = (RuleCall)cAlternatives.eContents().get(23);
		private final RuleCall cWhenDayNameParserRuleCall_24 = (RuleCall)cAlternatives.eContents().get(24);
		private final RuleCall cWhenExistsParserRuleCall_25 = (RuleCall)cAlternatives.eContents().get(25);
		private final RuleCall cWhenLukanCycleDayParserRuleCall_26 = (RuleCall)cAlternatives.eContents().get(26);
		private final RuleCall cWhenModeOfWeekParserRuleCall_27 = (RuleCall)cAlternatives.eContents().get(27);
		private final RuleCall cWhenMovableCycleDayParserRuleCall_28 = (RuleCall)cAlternatives.eContents().get(28);
		private final RuleCall cWhenPaschaParserRuleCall_29 = (RuleCall)cAlternatives.eContents().get(29);
		private final RuleCall cWhenPentecostarionDayParserRuleCall_30 = (RuleCall)cAlternatives.eContents().get(30);
		private final RuleCall cWhenSundayAfterElevationOfCrossDayParserRuleCall_31 = (RuleCall)cAlternatives.eContents().get(31);
		private final RuleCall cWhenTriodionDayParserRuleCall_32 = (RuleCall)cAlternatives.eContents().get(32);
		private final RuleCall cWhenSundaysBeforeTriodionParserRuleCall_33 = (RuleCall)cAlternatives.eContents().get(33);
		
		//SectionElementType:
		//	Actor //	| Condition
		//	//	| Rule 
		//	//	| WhenCondition
		//	| Block | Break | Date | Dialog | Heading1 | Heading2 | Heading3 | Hymn | Media | Paragraph | PassThroughHtml |
		//	PassThroughPdf | Reading | RestoreLocale | Rubric | Section | SectionFragment | SetLocale | TemplateFragment | Title |
		//	SubTitle | Verse | WhenDate | WhenDayName | WhenExists | WhenLukanCycleDay | WhenModeOfWeek | WhenMovableCycleDay |
		//	WhenPascha | WhenPentecostarionDay | WhenSundayAfterElevationOfCrossDay | WhenTriodionDay | WhenSundaysBeforeTriodion;
		public ParserRule getRule() { return rule; }

		//Actor //	| Condition
		////	| Rule 
		////	| WhenCondition
		//| Block | Break | Date | Dialog | Heading1 | Heading2 | Heading3 | Hymn | Media | Paragraph | PassThroughHtml |
		//PassThroughPdf | Reading | RestoreLocale | Rubric | Section | SectionFragment | SetLocale | TemplateFragment | Title |
		//SubTitle | Verse | WhenDate | WhenDayName | WhenExists | WhenLukanCycleDay | WhenModeOfWeek | WhenMovableCycleDay |
		//WhenPascha | WhenPentecostarionDay | WhenSundayAfterElevationOfCrossDay | WhenTriodionDay | WhenSundaysBeforeTriodion
		public Alternatives getAlternatives() { return cAlternatives; }

		//Actor
		public RuleCall getActorParserRuleCall_0() { return cActorParserRuleCall_0; }

		//Block
		public RuleCall getBlockParserRuleCall_1() { return cBlockParserRuleCall_1; }

		//Break
		public RuleCall getBreakParserRuleCall_2() { return cBreakParserRuleCall_2; }

		//Date
		public RuleCall getDateParserRuleCall_3() { return cDateParserRuleCall_3; }

		//Dialog
		public RuleCall getDialogParserRuleCall_4() { return cDialogParserRuleCall_4; }

		//Heading1
		public RuleCall getHeading1ParserRuleCall_5() { return cHeading1ParserRuleCall_5; }

		//Heading2
		public RuleCall getHeading2ParserRuleCall_6() { return cHeading2ParserRuleCall_6; }

		//Heading3
		public RuleCall getHeading3ParserRuleCall_7() { return cHeading3ParserRuleCall_7; }

		//Hymn
		public RuleCall getHymnParserRuleCall_8() { return cHymnParserRuleCall_8; }

		//Media
		public RuleCall getMediaParserRuleCall_9() { return cMediaParserRuleCall_9; }

		//Paragraph
		public RuleCall getParagraphParserRuleCall_10() { return cParagraphParserRuleCall_10; }

		//PassThroughHtml
		public RuleCall getPassThroughHtmlParserRuleCall_11() { return cPassThroughHtmlParserRuleCall_11; }

		//PassThroughPdf
		public RuleCall getPassThroughPdfParserRuleCall_12() { return cPassThroughPdfParserRuleCall_12; }

		//Reading
		public RuleCall getReadingParserRuleCall_13() { return cReadingParserRuleCall_13; }

		//RestoreLocale
		public RuleCall getRestoreLocaleParserRuleCall_14() { return cRestoreLocaleParserRuleCall_14; }

		//Rubric
		public RuleCall getRubricParserRuleCall_15() { return cRubricParserRuleCall_15; }

		//Section
		public RuleCall getSectionParserRuleCall_16() { return cSectionParserRuleCall_16; }

		//SectionFragment
		public RuleCall getSectionFragmentParserRuleCall_17() { return cSectionFragmentParserRuleCall_17; }

		//SetLocale
		public RuleCall getSetLocaleParserRuleCall_18() { return cSetLocaleParserRuleCall_18; }

		//TemplateFragment
		public RuleCall getTemplateFragmentParserRuleCall_19() { return cTemplateFragmentParserRuleCall_19; }

		//Title
		public RuleCall getTitleParserRuleCall_20() { return cTitleParserRuleCall_20; }

		//SubTitle
		public RuleCall getSubTitleParserRuleCall_21() { return cSubTitleParserRuleCall_21; }

		//Verse
		public RuleCall getVerseParserRuleCall_22() { return cVerseParserRuleCall_22; }

		//WhenDate
		public RuleCall getWhenDateParserRuleCall_23() { return cWhenDateParserRuleCall_23; }

		//WhenDayName
		public RuleCall getWhenDayNameParserRuleCall_24() { return cWhenDayNameParserRuleCall_24; }

		//WhenExists
		public RuleCall getWhenExistsParserRuleCall_25() { return cWhenExistsParserRuleCall_25; }

		//WhenLukanCycleDay
		public RuleCall getWhenLukanCycleDayParserRuleCall_26() { return cWhenLukanCycleDayParserRuleCall_26; }

		//WhenModeOfWeek
		public RuleCall getWhenModeOfWeekParserRuleCall_27() { return cWhenModeOfWeekParserRuleCall_27; }

		//WhenMovableCycleDay
		public RuleCall getWhenMovableCycleDayParserRuleCall_28() { return cWhenMovableCycleDayParserRuleCall_28; }

		//WhenPascha
		public RuleCall getWhenPaschaParserRuleCall_29() { return cWhenPaschaParserRuleCall_29; }

		//WhenPentecostarionDay
		public RuleCall getWhenPentecostarionDayParserRuleCall_30() { return cWhenPentecostarionDayParserRuleCall_30; }

		//WhenSundayAfterElevationOfCrossDay
		public RuleCall getWhenSundayAfterElevationOfCrossDayParserRuleCall_31() { return cWhenSundayAfterElevationOfCrossDayParserRuleCall_31; }

		//WhenTriodionDay
		public RuleCall getWhenTriodionDayParserRuleCall_32() { return cWhenTriodionDayParserRuleCall_32; }

		//WhenSundaysBeforeTriodion
		public RuleCall getWhenSundaysBeforeTriodionParserRuleCall_33() { return cWhenSundaysBeforeTriodionParserRuleCall_33; }
	}

	public class LdpTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LdpType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDOMParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDOWNParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDOWTParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEOWParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cAllParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cGenDateParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cGenYearParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cMCDParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cMOWParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cNOPParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cDOPParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cSAECParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cSOLParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cDOLParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cWOLCParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cWDOLCParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cSBTParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		
		//LdpType:
		//	DOM | DOWN | DOWT | EOW | All | GenDate | GenYear | MCD | MOW | NOP | DOP | SAEC | SOL | DOL | WOLC | WDOLC | SBT;
		public ParserRule getRule() { return rule; }

		//DOM | DOWN | DOWT | EOW | All | GenDate | GenYear | MCD | MOW | NOP | DOP | SAEC | SOL | DOL | WOLC | WDOLC | SBT
		public Alternatives getAlternatives() { return cAlternatives; }

		//DOM
		public RuleCall getDOMParserRuleCall_0() { return cDOMParserRuleCall_0; }

		//DOWN
		public RuleCall getDOWNParserRuleCall_1() { return cDOWNParserRuleCall_1; }

		//DOWT
		public RuleCall getDOWTParserRuleCall_2() { return cDOWTParserRuleCall_2; }

		//EOW
		public RuleCall getEOWParserRuleCall_3() { return cEOWParserRuleCall_3; }

		//All
		public RuleCall getAllParserRuleCall_4() { return cAllParserRuleCall_4; }

		//GenDate
		public RuleCall getGenDateParserRuleCall_5() { return cGenDateParserRuleCall_5; }

		//GenYear
		public RuleCall getGenYearParserRuleCall_6() { return cGenYearParserRuleCall_6; }

		//MCD
		public RuleCall getMCDParserRuleCall_7() { return cMCDParserRuleCall_7; }

		//MOW
		public RuleCall getMOWParserRuleCall_8() { return cMOWParserRuleCall_8; }

		//NOP
		public RuleCall getNOPParserRuleCall_9() { return cNOPParserRuleCall_9; }

		//DOP
		public RuleCall getDOPParserRuleCall_10() { return cDOPParserRuleCall_10; }

		//SAEC
		public RuleCall getSAECParserRuleCall_11() { return cSAECParserRuleCall_11; }

		//SOL
		public RuleCall getSOLParserRuleCall_12() { return cSOLParserRuleCall_12; }

		//DOL
		public RuleCall getDOLParserRuleCall_13() { return cDOLParserRuleCall_13; }

		//WOLC
		public RuleCall getWOLCParserRuleCall_14() { return cWOLCParserRuleCall_14; }

		//WDOLC
		public RuleCall getWDOLCParserRuleCall_15() { return cWDOLCParserRuleCall_15; }

		//SBT
		public RuleCall getSBTParserRuleCall_16() { return cSBTParserRuleCall_16; }
	}

	public class AllElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "All");
		private final Assignment cDsl_Display_LiturgicalDayPropertiesAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cDsl_Display_LiturgicalDayPropertiesAll_Liturgical_Day_PropertiesKeyword_0 = (Keyword)cDsl_Display_LiturgicalDayPropertiesAssignment.eContents().get(0);
		
		//All:
		//	dsl_Display_LiturgicalDayProperties?="@All_Liturgical_Day_Properties";
		public ParserRule getRule() { return rule; }

		//dsl_Display_LiturgicalDayProperties?="@All_Liturgical_Day_Properties"
		public Assignment getDsl_Display_LiturgicalDayPropertiesAssignment() { return cDsl_Display_LiturgicalDayPropertiesAssignment; }

		//"@All_Liturgical_Day_Properties"
		public Keyword getDsl_Display_LiturgicalDayPropertiesAll_Liturgical_Day_PropertiesKeyword_0() { return cDsl_Display_LiturgicalDayPropertiesAll_Liturgical_Day_PropertiesKeyword_0; }
	}

	public class GenDateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GenDate");
		private final Assignment cDsl_Display_DateAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cDsl_Display_DateService_DateKeyword_0 = (Keyword)cDsl_Display_DateAssignment.eContents().get(0);
		
		//GenDate:
		//	dsl_Display_Date?="@Service_Date";
		public ParserRule getRule() { return rule; }

		//dsl_Display_Date?="@Service_Date"
		public Assignment getDsl_Display_DateAssignment() { return cDsl_Display_DateAssignment; }

		//"@Service_Date"
		public Keyword getDsl_Display_DateService_DateKeyword_0() { return cDsl_Display_DateService_DateKeyword_0; }
	}

	public class GenYearElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GenYear");
		private final Assignment cDsl_Display_YearAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cDsl_Display_YearService_YearKeyword_0 = (Keyword)cDsl_Display_YearAssignment.eContents().get(0);
		
		//GenYear:
		//	dsl_Display_Year?="@Service_Year";
		public ParserRule getRule() { return rule; }

		//dsl_Display_Year?="@Service_Year"
		public Assignment getDsl_Display_YearAssignment() { return cDsl_Display_YearAssignment; }

		//"@Service_Year"
		public Keyword getDsl_Display_YearService_YearKeyword_0() { return cDsl_Display_YearService_YearKeyword_0; }
	}

	public class MCDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MCD");
		private final Assignment cDsl_MCD_valueAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cDsl_MCD_valueDay_of_Movable_CycleKeyword_0 = (Keyword)cDsl_MCD_valueAssignment.eContents().get(0);
		
		//MCD:
		//	dsl_MCD_value?="@Day_of_Movable_Cycle";
		public ParserRule getRule() { return rule; }

		//dsl_MCD_value?="@Day_of_Movable_Cycle"
		public Assignment getDsl_MCD_valueAssignment() { return cDsl_MCD_valueAssignment; }

		//"@Day_of_Movable_Cycle"
		public Keyword getDsl_MCD_valueDay_of_Movable_CycleKeyword_0() { return cDsl_MCD_valueDay_of_Movable_CycleKeyword_0; }
	}

	public class MOWElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MOW");
		private final Assignment cDsl_Display_ModeAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cDsl_Display_ModeMode_of_WeekKeyword_0 = (Keyword)cDsl_Display_ModeAssignment.eContents().get(0);
		
		//MOW:
		//	dsl_Display_Mode?="@Mode_of_Week";
		public ParserRule getRule() { return rule; }

		//dsl_Display_Mode?="@Mode_of_Week"
		public Assignment getDsl_Display_ModeAssignment() { return cDsl_Display_ModeAssignment; }

		//"@Mode_of_Week"
		public Keyword getDsl_Display_ModeMode_of_WeekKeyword_0() { return cDsl_Display_ModeMode_of_WeekKeyword_0; }
	}

	public class NOPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NOP");
		private final Assignment cDsl_Display_ModeAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cDsl_Display_ModeName_of_PeriodKeyword_0 = (Keyword)cDsl_Display_ModeAssignment.eContents().get(0);
		
		//NOP:
		//	dsl_Display_Mode?="@Name_of_Period";
		public ParserRule getRule() { return rule; }

		//dsl_Display_Mode?="@Name_of_Period"
		public Assignment getDsl_Display_ModeAssignment() { return cDsl_Display_ModeAssignment; }

		//"@Name_of_Period"
		public Keyword getDsl_Display_ModeName_of_PeriodKeyword_0() { return cDsl_Display_ModeName_of_PeriodKeyword_0; }
	}

	public class DOMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DOM");
		private final Assignment cDsl_Display_ModeAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cDsl_Display_ModeDay_of_MonthKeyword_0 = (Keyword)cDsl_Display_ModeAssignment.eContents().get(0);
		
		//DOM:
		//	dsl_Display_Mode?="@Day_of_Month";
		public ParserRule getRule() { return rule; }

		//dsl_Display_Mode?="@Day_of_Month"
		public Assignment getDsl_Display_ModeAssignment() { return cDsl_Display_ModeAssignment; }

		//"@Day_of_Month"
		public Keyword getDsl_Display_ModeDay_of_MonthKeyword_0() { return cDsl_Display_ModeDay_of_MonthKeyword_0; }
	}

	public class DOPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DOP");
		private final Assignment cDsl_Display_ModeAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cDsl_Display_ModeDay_of_PeriodKeyword_0 = (Keyword)cDsl_Display_ModeAssignment.eContents().get(0);
		
		//DOP:
		//	dsl_Display_Mode?="@Day_of_Period";
		public ParserRule getRule() { return rule; }

		//dsl_Display_Mode?="@Day_of_Period"
		public Assignment getDsl_Display_ModeAssignment() { return cDsl_Display_ModeAssignment; }

		//"@Day_of_Period"
		public Keyword getDsl_Display_ModeDay_of_PeriodKeyword_0() { return cDsl_Display_ModeDay_of_PeriodKeyword_0; }
	}

	public class DOWNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DOWN");
		private final Assignment cDsl_Display_ModeAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cDsl_Display_ModeDay_of_Week_As_NumberKeyword_0 = (Keyword)cDsl_Display_ModeAssignment.eContents().get(0);
		
		//DOWN:
		//	dsl_Display_Mode?="@Day_of_Week_As_Number";
		public ParserRule getRule() { return rule; }

		//dsl_Display_Mode?="@Day_of_Week_As_Number"
		public Assignment getDsl_Display_ModeAssignment() { return cDsl_Display_ModeAssignment; }

		//"@Day_of_Week_As_Number"
		public Keyword getDsl_Display_ModeDay_of_Week_As_NumberKeyword_0() { return cDsl_Display_ModeDay_of_Week_As_NumberKeyword_0; }
	}

	public class DOWTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DOWT");
		private final Assignment cDsl_Display_ModeAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cDsl_Display_ModeDay_of_Week_As_TextKeyword_0 = (Keyword)cDsl_Display_ModeAssignment.eContents().get(0);
		
		//DOWT:
		//	dsl_Display_Mode?="@Day_of_Week_As_Text";
		public ParserRule getRule() { return rule; }

		//dsl_Display_Mode?="@Day_of_Week_As_Text"
		public Assignment getDsl_Display_ModeAssignment() { return cDsl_Display_ModeAssignment; }

		//"@Day_of_Week_As_Text"
		public Keyword getDsl_Display_ModeDay_of_Week_As_TextKeyword_0() { return cDsl_Display_ModeDay_of_Week_As_TextKeyword_0; }
	}

	public class EOWElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EOW");
		private final Assignment cDsl_Display_EothinonAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cDsl_Display_EothinonEothinonKeyword_0 = (Keyword)cDsl_Display_EothinonAssignment.eContents().get(0);
		
		//EOW:
		//	dsl_Display_Eothinon?="@Eothinon";
		public ParserRule getRule() { return rule; }

		//dsl_Display_Eothinon?="@Eothinon"
		public Assignment getDsl_Display_EothinonAssignment() { return cDsl_Display_EothinonAssignment; }

		//"@Eothinon"
		public Keyword getDsl_Display_EothinonEothinonKeyword_0() { return cDsl_Display_EothinonEothinonKeyword_0; }
	}

	public class SAECElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SAEC");
		private final Assignment cDsl_Display_SundayAfterElevationCrossAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cDsl_Display_SundayAfterElevationCrossSunday_After_Elevation_Cross_DateKeyword_0 = (Keyword)cDsl_Display_SundayAfterElevationCrossAssignment.eContents().get(0);
		
		//SAEC:
		//	dsl_Display_SundayAfterElevationCross?="@Sunday_After_Elevation_Cross_Date";
		public ParserRule getRule() { return rule; }

		//dsl_Display_SundayAfterElevationCross?="@Sunday_After_Elevation_Cross_Date"
		public Assignment getDsl_Display_SundayAfterElevationCrossAssignment() { return cDsl_Display_SundayAfterElevationCrossAssignment; }

		//"@Sunday_After_Elevation_Cross_Date"
		public Keyword getDsl_Display_SundayAfterElevationCrossSunday_After_Elevation_Cross_DateKeyword_0() { return cDsl_Display_SundayAfterElevationCrossSunday_After_Elevation_Cross_DateKeyword_0; }
	}

	public class SOLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SOL");
		private final Assignment cDsl_Display_StartLukanAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cDsl_Display_StartLukanLukan_Cycle_Start_DateKeyword_0 = (Keyword)cDsl_Display_StartLukanAssignment.eContents().get(0);
		
		//SOL:
		//	dsl_Display_StartLukan?="@Lukan_Cycle_Start_Date";
		public ParserRule getRule() { return rule; }

		//dsl_Display_StartLukan?="@Lukan_Cycle_Start_Date"
		public Assignment getDsl_Display_StartLukanAssignment() { return cDsl_Display_StartLukanAssignment; }

		//"@Lukan_Cycle_Start_Date"
		public Keyword getDsl_Display_StartLukanLukan_Cycle_Start_DateKeyword_0() { return cDsl_Display_StartLukanLukan_Cycle_Start_DateKeyword_0; }
	}

	public class DOLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DOL");
		private final Assignment cDsl_Display_DayLukanAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cDsl_Display_DayLukanLukan_Cycle_Elapsed_DaysKeyword_0 = (Keyword)cDsl_Display_DayLukanAssignment.eContents().get(0);
		
		//DOL:
		//	dsl_Display_DayLukan?="@Lukan_Cycle_Elapsed_Days";
		public ParserRule getRule() { return rule; }

		//dsl_Display_DayLukan?="@Lukan_Cycle_Elapsed_Days"
		public Assignment getDsl_Display_DayLukanAssignment() { return cDsl_Display_DayLukanAssignment; }

		//"@Lukan_Cycle_Elapsed_Days"
		public Keyword getDsl_Display_DayLukanLukan_Cycle_Elapsed_DaysKeyword_0() { return cDsl_Display_DayLukanLukan_Cycle_Elapsed_DaysKeyword_0; }
	}

	public class WOLCElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WOLC");
		private final Assignment cDsl_Display_DayLukanAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cDsl_Display_DayLukanLukan_Cycle_WeekKeyword_0 = (Keyword)cDsl_Display_DayLukanAssignment.eContents().get(0);
		
		//WOLC:
		//	dsl_Display_DayLukan?="@Lukan_Cycle_Week";
		public ParserRule getRule() { return rule; }

		//dsl_Display_DayLukan?="@Lukan_Cycle_Week"
		public Assignment getDsl_Display_DayLukanAssignment() { return cDsl_Display_DayLukanAssignment; }

		//"@Lukan_Cycle_Week"
		public Keyword getDsl_Display_DayLukanLukan_Cycle_WeekKeyword_0() { return cDsl_Display_DayLukanLukan_Cycle_WeekKeyword_0; }
	}

	public class WDOLCElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WDOLC");
		private final Assignment cDsl_Display_DayLukanAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cDsl_Display_DayLukanLukan_Cycle_Week_DayKeyword_0 = (Keyword)cDsl_Display_DayLukanAssignment.eContents().get(0);
		
		//WDOLC:
		//	dsl_Display_DayLukan?="@Lukan_Cycle_Week_Day";
		public ParserRule getRule() { return rule; }

		//dsl_Display_DayLukan?="@Lukan_Cycle_Week_Day"
		public Assignment getDsl_Display_DayLukanAssignment() { return cDsl_Display_DayLukanAssignment; }

		//"@Lukan_Cycle_Week_Day"
		public Keyword getDsl_Display_DayLukanLukan_Cycle_Week_DayKeyword_0() { return cDsl_Display_DayLukanLukan_Cycle_Week_DayKeyword_0; }
	}

	public class SBTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SBT");
		private final Assignment cDsl_Display_SundaysBeforeTriodionAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cDsl_Display_SundaysBeforeTriodionSundays_Before_TriodionKeyword_0 = (Keyword)cDsl_Display_SundaysBeforeTriodionAssignment.eContents().get(0);
		
		//SBT:
		//	dsl_Display_SundaysBeforeTriodion?="@Sundays_Before_Triodion";
		public ParserRule getRule() { return rule; }

		//dsl_Display_SundaysBeforeTriodion?="@Sundays_Before_Triodion"
		public Assignment getDsl_Display_SundaysBeforeTriodionAssignment() { return cDsl_Display_SundaysBeforeTriodionAssignment; }

		//"@Sundays_Before_Triodion"
		public Keyword getDsl_Display_SundaysBeforeTriodionSundays_Before_TriodionKeyword_0() { return cDsl_Display_SundaysBeforeTriodionSundays_Before_TriodionKeyword_0; }
	}

	public class TemplateFragmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TemplateFragment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInsert_templateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNameAtemModelCrossReference_1_0 = (CrossReference)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameAtemModelQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cNameAtemModelCrossReference_1_0.eContents().get(1);
		private final Keyword cEndInsertKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//TemplateFragment:
		//	"Insert_template" name=[AtemModel|QualifiedName] "End-Insert";
		public ParserRule getRule() { return rule; }

		//"Insert_template" name=[AtemModel|QualifiedName] "End-Insert"
		public Group getGroup() { return cGroup; }

		//"Insert_template"
		public Keyword getInsert_templateKeyword_0() { return cInsert_templateKeyword_0; }

		//name=[AtemModel|QualifiedName]
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//[AtemModel|QualifiedName]
		public CrossReference getNameAtemModelCrossReference_1_0() { return cNameAtemModelCrossReference_1_0; }

		//QualifiedName
		public RuleCall getNameAtemModelQualifiedNameParserRuleCall_1_0_1() { return cNameAtemModelQualifiedNameParserRuleCall_1_0_1; }

		//"End-Insert"
		public Keyword getEndInsertKeyword_2() { return cEndInsertKeyword_2; }
	}

	public class PrefaceFragmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrefaceFragment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInsert_prefaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNamePrefaceCrossReference_1_0 = (CrossReference)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNamePrefaceQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cNamePrefaceCrossReference_1_0.eContents().get(1);
		private final Keyword cEndInsertKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//PrefaceFragment:
		//	"Insert_preface" name=[Preface|QualifiedName] "End-Insert";
		public ParserRule getRule() { return rule; }

		//"Insert_preface" name=[Preface|QualifiedName] "End-Insert"
		public Group getGroup() { return cGroup; }

		//"Insert_preface"
		public Keyword getInsert_prefaceKeyword_0() { return cInsert_prefaceKeyword_0; }

		//name=[Preface|QualifiedName]
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//[Preface|QualifiedName]
		public CrossReference getNamePrefaceCrossReference_1_0() { return cNamePrefaceCrossReference_1_0; }

		//QualifiedName
		public RuleCall getNamePrefaceQualifiedNameParserRuleCall_1_0_1() { return cNamePrefaceQualifiedNameParserRuleCall_1_0_1; }

		//"End-Insert"
		public Keyword getEndInsertKeyword_2() { return cEndInsertKeyword_2; }
	}

	public class SectionFragmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SectionFragment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInsert_sectionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNameSectionCrossReference_1_0 = (CrossReference)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameSectionQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cNameSectionCrossReference_1_0.eContents().get(1);
		private final Keyword cEndInsertKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//SectionFragment:
		//	"Insert_section" name=[Section|QualifiedName] "End-Insert";
		public ParserRule getRule() { return rule; }

		//"Insert_section" name=[Section|QualifiedName] "End-Insert"
		public Group getGroup() { return cGroup; }

		//"Insert_section"
		public Keyword getInsert_sectionKeyword_0() { return cInsert_sectionKeyword_0; }

		//name=[Section|QualifiedName]
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//[Section|QualifiedName]
		public CrossReference getNameSectionCrossReference_1_0() { return cNameSectionCrossReference_1_0; }

		//QualifiedName
		public RuleCall getNameSectionQualifiedNameParserRuleCall_1_0_1() { return cNameSectionQualifiedNameParserRuleCall_1_0_1; }

		//"End-Insert"
		public Keyword getEndInsertKeyword_2() { return cEndInsertKeyword_2; }
	}

	public class BreakElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Break");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBreakKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDsl_break_typeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDsl_break_typeBreakTypeEnumRuleCall_1_0 = (RuleCall)cDsl_break_typeAssignment_1.eContents().get(0);
		private final Keyword cEnd_BreakKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Break:
		//	"Break" dsl_break_type=BreakType "End_Break";
		public ParserRule getRule() { return rule; }

		//"Break" dsl_break_type=BreakType "End_Break"
		public Group getGroup() { return cGroup; }

		//"Break"
		public Keyword getBreakKeyword_0() { return cBreakKeyword_0; }

		//dsl_break_type=BreakType
		public Assignment getDsl_break_typeAssignment_1() { return cDsl_break_typeAssignment_1; }

		//BreakType
		public RuleCall getDsl_break_typeBreakTypeEnumRuleCall_1_0() { return cDsl_break_typeBreakTypeEnumRuleCall_1_0; }

		//"End_Break"
		public Keyword getEnd_BreakKeyword_2() { return cEnd_BreakKeyword_2; }
	}

	public class PageNumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PageNumber");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSet_Page_NumberKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDsl_PageNumber_valueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDsl_PageNumber_valueINTTerminalRuleCall_1_0 = (RuleCall)cDsl_PageNumber_valueAssignment_1.eContents().get(0);
		private final Keyword cEnd_Set_Page_NumberKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//PageNumber:
		//	"Set_Page_Number" dsl_PageNumber_value=INT "End_Set_Page_Number";
		public ParserRule getRule() { return rule; }

		//"Set_Page_Number" dsl_PageNumber_value=INT "End_Set_Page_Number"
		public Group getGroup() { return cGroup; }

		//"Set_Page_Number"
		public Keyword getSet_Page_NumberKeyword_0() { return cSet_Page_NumberKeyword_0; }

		//dsl_PageNumber_value=INT
		public Assignment getDsl_PageNumber_valueAssignment_1() { return cDsl_PageNumber_valueAssignment_1; }

		//INT
		public RuleCall getDsl_PageNumber_valueINTTerminalRuleCall_1_0() { return cDsl_PageNumber_valueINTTerminalRuleCall_1_0; }

		//"End_Set_Page_Number"
		public Keyword getEnd_Set_Page_NumberKeyword_2() { return cEnd_Set_Page_NumberKeyword_2; }
	}

	public class PassThroughHtmlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PassThroughHtml");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPassthroughHtmlKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDsl_Passthrough_html_textAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDsl_Passthrough_html_textSTRINGTerminalRuleCall_1_0 = (RuleCall)cDsl_Passthrough_html_textAssignment_1.eContents().get(0);
		private final Keyword cENDPassthroughHtmlKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//PassThroughHtml:
		//	"Passthrough-Html" dsl_Passthrough_html_text=STRING "END-Passthrough-Html";
		public ParserRule getRule() { return rule; }

		//"Passthrough-Html" dsl_Passthrough_html_text=STRING "END-Passthrough-Html"
		public Group getGroup() { return cGroup; }

		//"Passthrough-Html"
		public Keyword getPassthroughHtmlKeyword_0() { return cPassthroughHtmlKeyword_0; }

		//dsl_Passthrough_html_text=STRING
		public Assignment getDsl_Passthrough_html_textAssignment_1() { return cDsl_Passthrough_html_textAssignment_1; }

		//STRING
		public RuleCall getDsl_Passthrough_html_textSTRINGTerminalRuleCall_1_0() { return cDsl_Passthrough_html_textSTRINGTerminalRuleCall_1_0; }

		//"END-Passthrough-Html"
		public Keyword getENDPassthroughHtmlKeyword_2() { return cENDPassthroughHtmlKeyword_2; }
	}

	public class PassThroughPdfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PassThroughPdf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPassthroughHtmlKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDsl_Passthrough_pdf_textAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDsl_Passthrough_pdf_textSTRINGTerminalRuleCall_1_0 = (RuleCall)cDsl_Passthrough_pdf_textAssignment_1.eContents().get(0);
		private final Keyword cENDPassthroughPdfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//PassThroughPdf:
		//	"Passthrough-Html" dsl_Passthrough_pdf_text=STRING "END-Passthrough-Pdf";
		public ParserRule getRule() { return rule; }

		//"Passthrough-Html" dsl_Passthrough_pdf_text=STRING "END-Passthrough-Pdf"
		public Group getGroup() { return cGroup; }

		//"Passthrough-Html"
		public Keyword getPassthroughHtmlKeyword_0() { return cPassthroughHtmlKeyword_0; }

		//dsl_Passthrough_pdf_text=STRING
		public Assignment getDsl_Passthrough_pdf_textAssignment_1() { return cDsl_Passthrough_pdf_textAssignment_1; }

		//STRING
		public RuleCall getDsl_Passthrough_pdf_textSTRINGTerminalRuleCall_1_0() { return cDsl_Passthrough_pdf_textSTRINGTerminalRuleCall_1_0; }

		//"END-Passthrough-Pdf"
		public Keyword getENDPassthroughPdfKeyword_2() { return cENDPassthroughPdfKeyword_2; }
	}

	public class TitleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Title");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTitleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cRoleKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDsl_Title_RoleAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cDsl_Title_RoleDefinitionCrossReference_1_1_0 = (CrossReference)cDsl_Title_RoleAssignment_1_1.eContents().get(0);
		private final RuleCall cDsl_Title_RoleDefinitionQualifiedNameParserRuleCall_1_1_0_1 = (RuleCall)cDsl_Title_RoleDefinitionCrossReference_1_1_0.eContents().get(1);
		private final Assignment cDsl_ElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDsl_ElementsElementTypeParserRuleCall_2_0 = (RuleCall)cDsl_ElementsAssignment_2.eContents().get(0);
		private final Keyword cEndTitleKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Title:
		//	"Title" ("role" dsl_Title_Role=[def::Definition|QualifiedName])? dsl_Elements+=ElementType* "End-Title";
		public ParserRule getRule() { return rule; }

		//"Title" ("role" dsl_Title_Role=[def::Definition|QualifiedName])? dsl_Elements+=ElementType* "End-Title"
		public Group getGroup() { return cGroup; }

		//"Title"
		public Keyword getTitleKeyword_0() { return cTitleKeyword_0; }

		//("role" dsl_Title_Role=[def::Definition|QualifiedName])?
		public Group getGroup_1() { return cGroup_1; }

		//"role"
		public Keyword getRoleKeyword_1_0() { return cRoleKeyword_1_0; }

		//dsl_Title_Role=[def::Definition|QualifiedName]
		public Assignment getDsl_Title_RoleAssignment_1_1() { return cDsl_Title_RoleAssignment_1_1; }

		//[def::Definition|QualifiedName]
		public CrossReference getDsl_Title_RoleDefinitionCrossReference_1_1_0() { return cDsl_Title_RoleDefinitionCrossReference_1_1_0; }

		//QualifiedName
		public RuleCall getDsl_Title_RoleDefinitionQualifiedNameParserRuleCall_1_1_0_1() { return cDsl_Title_RoleDefinitionQualifiedNameParserRuleCall_1_1_0_1; }

		//dsl_Elements+=ElementType*
		public Assignment getDsl_ElementsAssignment_2() { return cDsl_ElementsAssignment_2; }

		//ElementType
		public RuleCall getDsl_ElementsElementTypeParserRuleCall_2_0() { return cDsl_ElementsElementTypeParserRuleCall_2_0; }

		//"End-Title"
		public Keyword getEndTitleKeyword_3() { return cEndTitleKeyword_3; }
	}

	public class SubTitleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubTitle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSubTitleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cRoleKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDsl_SubTitle_RoleAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cDsl_SubTitle_RoleDefinitionCrossReference_1_1_0 = (CrossReference)cDsl_SubTitle_RoleAssignment_1_1.eContents().get(0);
		private final RuleCall cDsl_SubTitle_RoleDefinitionQualifiedNameParserRuleCall_1_1_0_1 = (RuleCall)cDsl_SubTitle_RoleDefinitionCrossReference_1_1_0.eContents().get(1);
		private final Assignment cDsl_ElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDsl_ElementsElementTypeParserRuleCall_2_0 = (RuleCall)cDsl_ElementsAssignment_2.eContents().get(0);
		private final Keyword cEndSubTitleKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SubTitle:
		//	"Sub-Title" ("role" dsl_SubTitle_Role=[def::Definition|QualifiedName])? dsl_Elements+=ElementType* "End-Sub-Title";
		public ParserRule getRule() { return rule; }

		//"Sub-Title" ("role" dsl_SubTitle_Role=[def::Definition|QualifiedName])? dsl_Elements+=ElementType* "End-Sub-Title"
		public Group getGroup() { return cGroup; }

		//"Sub-Title"
		public Keyword getSubTitleKeyword_0() { return cSubTitleKeyword_0; }

		//("role" dsl_SubTitle_Role=[def::Definition|QualifiedName])?
		public Group getGroup_1() { return cGroup_1; }

		//"role"
		public Keyword getRoleKeyword_1_0() { return cRoleKeyword_1_0; }

		//dsl_SubTitle_Role=[def::Definition|QualifiedName]
		public Assignment getDsl_SubTitle_RoleAssignment_1_1() { return cDsl_SubTitle_RoleAssignment_1_1; }

		//[def::Definition|QualifiedName]
		public CrossReference getDsl_SubTitle_RoleDefinitionCrossReference_1_1_0() { return cDsl_SubTitle_RoleDefinitionCrossReference_1_1_0; }

		//QualifiedName
		public RuleCall getDsl_SubTitle_RoleDefinitionQualifiedNameParserRuleCall_1_1_0_1() { return cDsl_SubTitle_RoleDefinitionQualifiedNameParserRuleCall_1_1_0_1; }

		//dsl_Elements+=ElementType*
		public Assignment getDsl_ElementsAssignment_2() { return cDsl_ElementsAssignment_2; }

		//ElementType
		public RuleCall getDsl_ElementsElementTypeParserRuleCall_2_0() { return cDsl_ElementsElementTypeParserRuleCall_2_0; }

		//"End-Sub-Title"
		public Keyword getEndSubTitleKeyword_3() { return cEndSubTitleKeyword_3; }
	}

	public class ParagraphElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Paragraph");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cRoleKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDsl_Para_RoleAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cDsl_Para_RoleDefinitionCrossReference_1_1_0 = (CrossReference)cDsl_Para_RoleAssignment_1_1.eContents().get(0);
		private final RuleCall cDsl_Para_RoleDefinitionQualifiedNameParserRuleCall_1_1_0_1 = (RuleCall)cDsl_Para_RoleDefinitionCrossReference_1_1_0.eContents().get(1);
		private final Assignment cDsl_ElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDsl_ElementsElementTypeParserRuleCall_2_0 = (RuleCall)cDsl_ElementsAssignment_2.eContents().get(0);
		private final Keyword cEndParaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Paragraph:
		//	"Para" ("role" dsl_Para_Role=[def::Definition|QualifiedName])? dsl_Elements+=ElementType* "End-Para";
		public ParserRule getRule() { return rule; }

		//"Para" ("role" dsl_Para_Role=[def::Definition|QualifiedName])? dsl_Elements+=ElementType* "End-Para"
		public Group getGroup() { return cGroup; }

		//"Para"
		public Keyword getParaKeyword_0() { return cParaKeyword_0; }

		//("role" dsl_Para_Role=[def::Definition|QualifiedName])?
		public Group getGroup_1() { return cGroup_1; }

		//"role"
		public Keyword getRoleKeyword_1_0() { return cRoleKeyword_1_0; }

		//dsl_Para_Role=[def::Definition|QualifiedName]
		public Assignment getDsl_Para_RoleAssignment_1_1() { return cDsl_Para_RoleAssignment_1_1; }

		//[def::Definition|QualifiedName]
		public CrossReference getDsl_Para_RoleDefinitionCrossReference_1_1_0() { return cDsl_Para_RoleDefinitionCrossReference_1_1_0; }

		//QualifiedName
		public RuleCall getDsl_Para_RoleDefinitionQualifiedNameParserRuleCall_1_1_0_1() { return cDsl_Para_RoleDefinitionQualifiedNameParserRuleCall_1_1_0_1; }

		//dsl_Elements+=ElementType*
		public Assignment getDsl_ElementsAssignment_2() { return cDsl_ElementsAssignment_2; }

		//ElementType
		public RuleCall getDsl_ElementsElementTypeParserRuleCall_2_0() { return cDsl_ElementsElementTypeParserRuleCall_2_0; }

		//"End-Para"
		public Keyword getEndParaKeyword_3() { return cEndParaKeyword_3; }
	}

	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBTagKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDsl_Block_RoleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cDsl_Block_RoleDefinitionCrossReference_1_0 = (CrossReference)cDsl_Block_RoleAssignment_1.eContents().get(0);
		private final RuleCall cDsl_Block_RoleDefinitionQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cDsl_Block_RoleDefinitionCrossReference_1_0.eContents().get(1);
		private final Assignment cDsl_ElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDsl_ElementsElementTypeParserRuleCall_2_0 = (RuleCall)cDsl_ElementsAssignment_2.eContents().get(0);
		private final Keyword cEndBTagKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Block:
		//	"bTag" dsl_Block_Role=[def::Definition|QualifiedName] dsl_Elements+=ElementType* "End-bTag";
		public ParserRule getRule() { return rule; }

		//"bTag" dsl_Block_Role=[def::Definition|QualifiedName] dsl_Elements+=ElementType* "End-bTag"
		public Group getGroup() { return cGroup; }

		//"bTag"
		public Keyword getBTagKeyword_0() { return cBTagKeyword_0; }

		//dsl_Block_Role=[def::Definition|QualifiedName]
		public Assignment getDsl_Block_RoleAssignment_1() { return cDsl_Block_RoleAssignment_1; }

		//[def::Definition|QualifiedName]
		public CrossReference getDsl_Block_RoleDefinitionCrossReference_1_0() { return cDsl_Block_RoleDefinitionCrossReference_1_0; }

		//QualifiedName
		public RuleCall getDsl_Block_RoleDefinitionQualifiedNameParserRuleCall_1_0_1() { return cDsl_Block_RoleDefinitionQualifiedNameParserRuleCall_1_0_1; }

		//dsl_Elements+=ElementType*
		public Assignment getDsl_ElementsAssignment_2() { return cDsl_ElementsAssignment_2; }

		//ElementType
		public RuleCall getDsl_ElementsElementTypeParserRuleCall_2_0() { return cDsl_ElementsElementTypeParserRuleCall_2_0; }

		//"End-bTag"
		public Keyword getEndBTagKeyword_3() { return cEndBTagKeyword_3; }
	}

	public class HymnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Hymn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHymnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDsl_ElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDsl_ElementsElementTypeParserRuleCall_1_0 = (RuleCall)cDsl_ElementsAssignment_1.eContents().get(0);
		private final Keyword cEndHymnKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Hymn:
		//	"Hymn" dsl_Elements+=ElementType* "End-Hymn";
		public ParserRule getRule() { return rule; }

		//"Hymn" dsl_Elements+=ElementType* "End-Hymn"
		public Group getGroup() { return cGroup; }

		//"Hymn"
		public Keyword getHymnKeyword_0() { return cHymnKeyword_0; }

		//dsl_Elements+=ElementType*
		public Assignment getDsl_ElementsAssignment_1() { return cDsl_ElementsAssignment_1; }

		//ElementType
		public RuleCall getDsl_ElementsElementTypeParserRuleCall_1_0() { return cDsl_ElementsElementTypeParserRuleCall_1_0; }

		//"End-Hymn"
		public Keyword getEndHymnKeyword_2() { return cEndHymnKeyword_2; }
	}

	public class MediaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Media");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMediaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDsl_ElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDsl_ElementsElementTypeParserRuleCall_1_0 = (RuleCall)cDsl_ElementsAssignment_1.eContents().get(0);
		private final Keyword cEndMediaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Media:
		//	"Media" dsl_Elements+=ElementType* "End-Media";
		public ParserRule getRule() { return rule; }

		//"Media" dsl_Elements+=ElementType* "End-Media"
		public Group getGroup() { return cGroup; }

		//"Media"
		public Keyword getMediaKeyword_0() { return cMediaKeyword_0; }

		//dsl_Elements+=ElementType*
		public Assignment getDsl_ElementsAssignment_1() { return cDsl_ElementsAssignment_1; }

		//ElementType
		public RuleCall getDsl_ElementsElementTypeParserRuleCall_1_0() { return cDsl_ElementsElementTypeParserRuleCall_1_0; }

		//"End-Media"
		public Keyword getEndMediaKeyword_2() { return cEndMediaKeyword_2; }
	}

	public class VerseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Verse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDsl_ElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDsl_ElementsElementTypeParserRuleCall_1_0 = (RuleCall)cDsl_ElementsAssignment_1.eContents().get(0);
		private final Keyword cEndVerseKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Verse:
		//	"Verse" dsl_Elements+=ElementType* "End-Verse";
		public ParserRule getRule() { return rule; }

		//"Verse" dsl_Elements+=ElementType* "End-Verse"
		public Group getGroup() { return cGroup; }

		//"Verse"
		public Keyword getVerseKeyword_0() { return cVerseKeyword_0; }

		//dsl_Elements+=ElementType*
		public Assignment getDsl_ElementsAssignment_1() { return cDsl_ElementsAssignment_1; }

		//ElementType
		public RuleCall getDsl_ElementsElementTypeParserRuleCall_1_0() { return cDsl_ElementsElementTypeParserRuleCall_1_0; }

		//"End-Verse"
		public Keyword getEndVerseKeyword_2() { return cEndVerseKeyword_2; }
	}

	public class ActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Actor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDsl_ElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDsl_ElementsElementTypeParserRuleCall_1_0 = (RuleCall)cDsl_ElementsAssignment_1.eContents().get(0);
		private final Keyword cEndActorKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Actor:
		//	"Actor" dsl_Elements+=ElementType* "End-Actor";
		public ParserRule getRule() { return rule; }

		//"Actor" dsl_Elements+=ElementType* "End-Actor"
		public Group getGroup() { return cGroup; }

		//"Actor"
		public Keyword getActorKeyword_0() { return cActorKeyword_0; }

		//dsl_Elements+=ElementType*
		public Assignment getDsl_ElementsAssignment_1() { return cDsl_ElementsAssignment_1; }

		//ElementType
		public RuleCall getDsl_ElementsElementTypeParserRuleCall_1_0() { return cDsl_ElementsElementTypeParserRuleCall_1_0; }

		//"End-Actor"
		public Keyword getEndActorKeyword_2() { return cEndActorKeyword_2; }
	}

	public class RubricElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rubric");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRubricKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDsl_ElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDsl_ElementsElementTypeParserRuleCall_1_0 = (RuleCall)cDsl_ElementsAssignment_1.eContents().get(0);
		private final Keyword cEndRubricKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Rubric:
		//	"Rubric" dsl_Elements+=ElementType* "End-Rubric";
		public ParserRule getRule() { return rule; }

		//"Rubric" dsl_Elements+=ElementType* "End-Rubric"
		public Group getGroup() { return cGroup; }

		//"Rubric"
		public Keyword getRubricKeyword_0() { return cRubricKeyword_0; }

		//dsl_Elements+=ElementType*
		public Assignment getDsl_ElementsAssignment_1() { return cDsl_ElementsAssignment_1; }

		//ElementType
		public RuleCall getDsl_ElementsElementTypeParserRuleCall_1_0() { return cDsl_ElementsElementTypeParserRuleCall_1_0; }

		//"End-Rubric"
		public Keyword getEndRubricKeyword_2() { return cEndRubricKeyword_2; }
	}

	public class DialogElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Dialog");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDialogKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDsl_ElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDsl_ElementsElementTypeParserRuleCall_1_0 = (RuleCall)cDsl_ElementsAssignment_1.eContents().get(0);
		private final Keyword cEndDialogKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Dialog:
		//	"Dialog" dsl_Elements+=ElementType* "End-Dialog";
		public ParserRule getRule() { return rule; }

		//"Dialog" dsl_Elements+=ElementType* "End-Dialog"
		public Group getGroup() { return cGroup; }

		//"Dialog"
		public Keyword getDialogKeyword_0() { return cDialogKeyword_0; }

		//dsl_Elements+=ElementType*
		public Assignment getDsl_ElementsAssignment_1() { return cDsl_ElementsAssignment_1; }

		//ElementType
		public RuleCall getDsl_ElementsElementTypeParserRuleCall_1_0() { return cDsl_ElementsElementTypeParserRuleCall_1_0; }

		//"End-Dialog"
		public Keyword getEndDialogKeyword_2() { return cEndDialogKeyword_2; }
	}

	public class ReadingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Reading");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReadingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDsl_ElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDsl_ElementsElementTypeParserRuleCall_1_0 = (RuleCall)cDsl_ElementsAssignment_1.eContents().get(0);
		private final Keyword cEndReadingKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Reading:
		//	"Reading" dsl_Elements+=ElementType* "End-Reading";
		public ParserRule getRule() { return rule; }

		//"Reading" dsl_Elements+=ElementType* "End-Reading"
		public Group getGroup() { return cGroup; }

		//"Reading"
		public Keyword getReadingKeyword_0() { return cReadingKeyword_0; }

		//dsl_Elements+=ElementType*
		public Assignment getDsl_ElementsAssignment_1() { return cDsl_ElementsAssignment_1; }

		//ElementType
		public RuleCall getDsl_ElementsElementTypeParserRuleCall_1_0() { return cDsl_ElementsElementTypeParserRuleCall_1_0; }

		//"End-Reading"
		public Keyword getEndReadingKeyword_2() { return cEndReadingKeyword_2; }
	}

	public class Heading1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Heading1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHeading_1Keyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDsl_ElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDsl_ElementsElementTypeParserRuleCall_1_0 = (RuleCall)cDsl_ElementsAssignment_1.eContents().get(0);
		private final Keyword cEnd_Heading_1Keyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Heading1:
		//	"Heading_1" dsl_Elements+=ElementType* "End_Heading_1";
		public ParserRule getRule() { return rule; }

		//"Heading_1" dsl_Elements+=ElementType* "End_Heading_1"
		public Group getGroup() { return cGroup; }

		//"Heading_1"
		public Keyword getHeading_1Keyword_0() { return cHeading_1Keyword_0; }

		//dsl_Elements+=ElementType*
		public Assignment getDsl_ElementsAssignment_1() { return cDsl_ElementsAssignment_1; }

		//ElementType
		public RuleCall getDsl_ElementsElementTypeParserRuleCall_1_0() { return cDsl_ElementsElementTypeParserRuleCall_1_0; }

		//"End_Heading_1"
		public Keyword getEnd_Heading_1Keyword_2() { return cEnd_Heading_1Keyword_2; }
	}

	public class Heading2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Heading2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHeading_2Keyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDsl_ElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDsl_ElementsElementTypeParserRuleCall_1_0 = (RuleCall)cDsl_ElementsAssignment_1.eContents().get(0);
		private final Keyword cEnd_Heading_2Keyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Heading2:
		//	"Heading_2" dsl_Elements+=ElementType* "End_Heading_2";
		public ParserRule getRule() { return rule; }

		//"Heading_2" dsl_Elements+=ElementType* "End_Heading_2"
		public Group getGroup() { return cGroup; }

		//"Heading_2"
		public Keyword getHeading_2Keyword_0() { return cHeading_2Keyword_0; }

		//dsl_Elements+=ElementType*
		public Assignment getDsl_ElementsAssignment_1() { return cDsl_ElementsAssignment_1; }

		//ElementType
		public RuleCall getDsl_ElementsElementTypeParserRuleCall_1_0() { return cDsl_ElementsElementTypeParserRuleCall_1_0; }

		//"End_Heading_2"
		public Keyword getEnd_Heading_2Keyword_2() { return cEnd_Heading_2Keyword_2; }
	}

	public class Heading3Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Heading3");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHeading_3Keyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDsl_ElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDsl_ElementsElementTypeParserRuleCall_1_0 = (RuleCall)cDsl_ElementsAssignment_1.eContents().get(0);
		private final Keyword cEnd_Heading_3Keyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Heading3:
		//	"Heading_3" dsl_Elements+=ElementType* "End_Heading_3";
		public ParserRule getRule() { return rule; }

		//"Heading_3" dsl_Elements+=ElementType* "End_Heading_3"
		public Group getGroup() { return cGroup; }

		//"Heading_3"
		public Keyword getHeading_3Keyword_0() { return cHeading_3Keyword_0; }

		//dsl_Elements+=ElementType*
		public Assignment getDsl_ElementsAssignment_1() { return cDsl_ElementsAssignment_1; }

		//ElementType
		public RuleCall getDsl_ElementsElementTypeParserRuleCall_1_0() { return cDsl_ElementsElementTypeParserRuleCall_1_0; }

		//"End_Heading_3"
		public Keyword getEnd_Heading_3Keyword_2() { return cEnd_Heading_3Keyword_2; }
	}

	public class ElementTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElementType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cResourceTextParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTaggedTextParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLookupParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLDPParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ElementType:
		//	ResourceText | TaggedText | Lookup | LDP;
		public ParserRule getRule() { return rule; }

		//ResourceText | TaggedText | Lookup | LDP
		public Alternatives getAlternatives() { return cAlternatives; }

		//ResourceText
		public RuleCall getResourceTextParserRuleCall_0() { return cResourceTextParserRuleCall_0; }

		//TaggedText
		public RuleCall getTaggedTextParserRuleCall_1() { return cTaggedTextParserRuleCall_1; }

		//Lookup
		public RuleCall getLookupParserRuleCall_2() { return cLookupParserRuleCall_2; }

		//LDP
		public RuleCall getLDPParserRuleCall_3() { return cLDPParserRuleCall_3; }
	}

	public class AidElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Aid");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAGES_IDKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Aid:
		//	"AGES_ID" name=QualifiedName;
		public ParserRule getRule() { return rule; }

		//"AGES_ID" name=QualifiedName
		public Group getGroup() { return cGroup; }

		//"AGES_ID"
		public Keyword getAGES_IDKeyword_0() { return cAGES_IDKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
	}

	public class VersionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Version");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVersionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Version:
		//	"Version" name=QualifiedName;
		public ParserRule getRule() { return rule; }

		//"Version" name=QualifiedName
		public Group getGroup() { return cGroup; }

		//"Version"
		public Keyword getVersionKeyword_0() { return cVersionKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
	}

	public class LitBookElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LitBook");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLiturgicalBookKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//LitBook:
		//	"LiturgicalBook" name=QualifiedName;
		public ParserRule getRule() { return rule; }

		//"LiturgicalBook" name=QualifiedName
		public Group getGroup() { return cGroup; }

		//"LiturgicalBook"
		public Keyword getLiturgicalBookKeyword_0() { return cLiturgicalBookKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
	}

	public class SetLocaleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SetLocale");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSet_LocaleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLocale_1Keyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDsl_SetLocale_V1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDsl_SetLocale_V1STRINGTerminalRuleCall_2_0 = (RuleCall)cDsl_SetLocale_V1Assignment_2.eContents().get(0);
		private final Keyword cLocale_2Keyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDsl_SetLocale_V2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDsl_SetLocale_V2STRINGTerminalRuleCall_4_0 = (RuleCall)cDsl_SetLocale_V2Assignment_4.eContents().get(0);
		private final Keyword cEnd_Set_LocaleKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SetLocale:
		//	"Set_Locale" "locale_1" dsl_SetLocale_V1=STRING "locale_2" dsl_SetLocale_V2=STRING "End_Set_Locale";
		public ParserRule getRule() { return rule; }

		//"Set_Locale" "locale_1" dsl_SetLocale_V1=STRING "locale_2" dsl_SetLocale_V2=STRING "End_Set_Locale"
		public Group getGroup() { return cGroup; }

		//"Set_Locale"
		public Keyword getSet_LocaleKeyword_0() { return cSet_LocaleKeyword_0; }

		//"locale_1"
		public Keyword getLocale_1Keyword_1() { return cLocale_1Keyword_1; }

		//dsl_SetLocale_V1=STRING
		public Assignment getDsl_SetLocale_V1Assignment_2() { return cDsl_SetLocale_V1Assignment_2; }

		//STRING
		public RuleCall getDsl_SetLocale_V1STRINGTerminalRuleCall_2_0() { return cDsl_SetLocale_V1STRINGTerminalRuleCall_2_0; }

		//"locale_2"
		public Keyword getLocale_2Keyword_3() { return cLocale_2Keyword_3; }

		//dsl_SetLocale_V2=STRING
		public Assignment getDsl_SetLocale_V2Assignment_4() { return cDsl_SetLocale_V2Assignment_4; }

		//STRING
		public RuleCall getDsl_SetLocale_V2STRINGTerminalRuleCall_4_0() { return cDsl_SetLocale_V2STRINGTerminalRuleCall_4_0; }

		//"End_Set_Locale"
		public Keyword getEnd_Set_LocaleKeyword_5() { return cEnd_Set_LocaleKeyword_5; }
	}

	public class RestoreLocaleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RestoreLocale");
		private final Assignment cDsl_RestoreLocaleAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cDsl_RestoreLocaleRestoreLocaleKeyword_0 = (Keyword)cDsl_RestoreLocaleAssignment.eContents().get(0);
		
		//RestoreLocale:
		//	dsl_RestoreLocale?="@restoreLocale";
		public ParserRule getRule() { return rule; }

		//dsl_RestoreLocale?="@restoreLocale"
		public Assignment getDsl_RestoreLocaleAssignment() { return cDsl_RestoreLocaleAssignment; }

		//"@restoreLocale"
		public Keyword getDsl_RestoreLocaleRestoreLocaleKeyword_0() { return cDsl_RestoreLocaleRestoreLocaleKeyword_0; }
	}

	public class WhenDateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WhenDate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhenDateIsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDsl_WhenDate_CasesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDsl_WhenDate_CasesWhenDateCaseParserRuleCall_1_0 = (RuleCall)cDsl_WhenDate_CasesAssignment_1.eContents().get(0);
		private final Assignment cDsl_WhenDate_OtherAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDsl_WhenDate_OtherWhenOtherParserRuleCall_2_0 = (RuleCall)cDsl_WhenDate_OtherAssignment_2.eContents().get(0);
		private final Keyword cEndWhenKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//WhenDate:
		//	"when-date-is" dsl_WhenDate_Cases+=WhenDateCase+ dsl_WhenDate_Other=WhenOther? "end-when";
		public ParserRule getRule() { return rule; }

		//"when-date-is" dsl_WhenDate_Cases+=WhenDateCase+ dsl_WhenDate_Other=WhenOther? "end-when"
		public Group getGroup() { return cGroup; }

		//"when-date-is"
		public Keyword getWhenDateIsKeyword_0() { return cWhenDateIsKeyword_0; }

		//dsl_WhenDate_Cases+=WhenDateCase+
		public Assignment getDsl_WhenDate_CasesAssignment_1() { return cDsl_WhenDate_CasesAssignment_1; }

		//WhenDateCase
		public RuleCall getDsl_WhenDate_CasesWhenDateCaseParserRuleCall_1_0() { return cDsl_WhenDate_CasesWhenDateCaseParserRuleCall_1_0; }

		//dsl_WhenDate_Other=WhenOther?
		public Assignment getDsl_WhenDate_OtherAssignment_2() { return cDsl_WhenDate_OtherAssignment_2; }

		//WhenOther
		public RuleCall getDsl_WhenDate_OtherWhenOtherParserRuleCall_2_0() { return cDsl_WhenDate_OtherWhenOtherParserRuleCall_2_0; }

		//"end-when"
		public Keyword getEndWhenKeyword_3() { return cEndWhenKeyword_3; }
	}

	public class WhenDateCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WhenDateCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDsl_WhenDate_Case_MonthAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDsl_WhenDate_Case_MonthMonthNameEnumRuleCall_0_0 = (RuleCall)cDsl_WhenDate_Case_MonthAssignment_0.eContents().get(0);
		private final Assignment cDsl_WhenDateCase_DaysAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDsl_WhenDateCase_DaysAbstractDateCaseParserRuleCall_1_0 = (RuleCall)cDsl_WhenDateCase_DaysAssignment_1.eContents().get(0);
		private final Keyword cUseKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDsl_WhenDateCase_True_actionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDsl_WhenDateCase_True_actionsAbstractComponentParserRuleCall_3_0 = (RuleCall)cDsl_WhenDateCase_True_actionsAssignment_3.eContents().get(0);
		
		//WhenDateCase:
		//	dsl_WhenDate_Case_Month=MonthName dsl_WhenDateCase_Days=AbstractDateCase "use:"
		//	dsl_WhenDateCase_True_actions+=AbstractComponent*;
		public ParserRule getRule() { return rule; }

		//dsl_WhenDate_Case_Month=MonthName dsl_WhenDateCase_Days=AbstractDateCase "use:"
		//dsl_WhenDateCase_True_actions+=AbstractComponent*
		public Group getGroup() { return cGroup; }

		//dsl_WhenDate_Case_Month=MonthName
		public Assignment getDsl_WhenDate_Case_MonthAssignment_0() { return cDsl_WhenDate_Case_MonthAssignment_0; }

		//MonthName
		public RuleCall getDsl_WhenDate_Case_MonthMonthNameEnumRuleCall_0_0() { return cDsl_WhenDate_Case_MonthMonthNameEnumRuleCall_0_0; }

		//dsl_WhenDateCase_Days=AbstractDateCase
		public Assignment getDsl_WhenDateCase_DaysAssignment_1() { return cDsl_WhenDateCase_DaysAssignment_1; }

		//AbstractDateCase
		public RuleCall getDsl_WhenDateCase_DaysAbstractDateCaseParserRuleCall_1_0() { return cDsl_WhenDateCase_DaysAbstractDateCaseParserRuleCall_1_0; }

		//"use:"
		public Keyword getUseKeyword_2() { return cUseKeyword_2; }

		//dsl_WhenDateCase_True_actions+=AbstractComponent*
		public Assignment getDsl_WhenDateCase_True_actionsAssignment_3() { return cDsl_WhenDateCase_True_actionsAssignment_3; }

		//AbstractComponent
		public RuleCall getDsl_WhenDateCase_True_actionsAbstractComponentParserRuleCall_3_0() { return cDsl_WhenDateCase_True_actionsAbstractComponentParserRuleCall_3_0; }
	}

	public class AbstractDateCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractDateCase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDateRangeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDateSetParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractDateCase:
		//	DateRange | DateSet;
		public ParserRule getRule() { return rule; }

		//DateRange | DateSet
		public Alternatives getAlternatives() { return cAlternatives; }

		//DateRange
		public RuleCall getDateRangeParserRuleCall_0() { return cDateRangeParserRuleCall_0; }

		//DateSet
		public RuleCall getDateSetParserRuleCall_1() { return cDateSetParserRuleCall_1; }
	}

	public class DateRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DateRange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDsl_DateRange_fromAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDsl_DateRange_fromINTTerminalRuleCall_0_0 = (RuleCall)cDsl_DateRange_fromAssignment_0.eContents().get(0);
		private final Keyword cThruKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDsl_DateRange_ToAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDsl_DateRange_ToINTTerminalRuleCall_2_0 = (RuleCall)cDsl_DateRange_ToAssignment_2.eContents().get(0);
		
		//DateRange:
		//	dsl_DateRange_from=INT "thru" dsl_DateRange_To=INT;
		public ParserRule getRule() { return rule; }

		//dsl_DateRange_from=INT "thru" dsl_DateRange_To=INT
		public Group getGroup() { return cGroup; }

		//dsl_DateRange_from=INT
		public Assignment getDsl_DateRange_fromAssignment_0() { return cDsl_DateRange_fromAssignment_0; }

		//INT
		public RuleCall getDsl_DateRange_fromINTTerminalRuleCall_0_0() { return cDsl_DateRange_fromINTTerminalRuleCall_0_0; }

		//"thru"
		public Keyword getThruKeyword_1() { return cThruKeyword_1; }

		//dsl_DateRange_To=INT
		public Assignment getDsl_DateRange_ToAssignment_2() { return cDsl_DateRange_ToAssignment_2; }

		//INT
		public RuleCall getDsl_DateRange_ToINTTerminalRuleCall_2_0() { return cDsl_DateRange_ToINTTerminalRuleCall_2_0; }
	}

	public class DateSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DateSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDslDateSet_ValuesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDslDateSet_ValuesINTTerminalRuleCall_0_0 = (RuleCall)cDslDateSet_ValuesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDslDateSet_ValuesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDslDateSet_ValuesINTTerminalRuleCall_1_1_0 = (RuleCall)cDslDateSet_ValuesAssignment_1_1.eContents().get(0);
		
		//DateSet:
		//	dslDateSet_Values+=INT ("," dslDateSet_Values+=INT)*;
		public ParserRule getRule() { return rule; }

		//dslDateSet_Values+=INT ("," dslDateSet_Values+=INT)*
		public Group getGroup() { return cGroup; }

		//dslDateSet_Values+=INT
		public Assignment getDslDateSet_ValuesAssignment_0() { return cDslDateSet_ValuesAssignment_0; }

		//INT
		public RuleCall getDslDateSet_ValuesINTTerminalRuleCall_0_0() { return cDslDateSet_ValuesINTTerminalRuleCall_0_0; }

		//("," dslDateSet_Values+=INT)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//dslDateSet_Values+=INT
		public Assignment getDslDateSet_ValuesAssignment_1_1() { return cDslDateSet_ValuesAssignment_1_1; }

		//INT
		public RuleCall getDslDateSet_ValuesINTTerminalRuleCall_1_1_0() { return cDslDateSet_ValuesINTTerminalRuleCall_1_1_0; }
	}

	public class WhenDayNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WhenDayName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhenNameOfDayIsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDsl_WhenDayName_CasesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDsl_WhenDayName_CasesWhenDayNameCaseParserRuleCall_1_0 = (RuleCall)cDsl_WhenDayName_CasesAssignment_1.eContents().get(0);
		private final Assignment cDsl_WhenDayName_OtherAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDsl_WhenDayName_OtherWhenOtherParserRuleCall_2_0 = (RuleCall)cDsl_WhenDayName_OtherAssignment_2.eContents().get(0);
		private final Keyword cEndWhenKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//WhenDayName:
		//	"when-name-of-day-is" dsl_WhenDayName_Cases+=WhenDayNameCase+ dsl_WhenDayName_Other=WhenOther? "end-when";
		public ParserRule getRule() { return rule; }

		//"when-name-of-day-is" dsl_WhenDayName_Cases+=WhenDayNameCase+ dsl_WhenDayName_Other=WhenOther? "end-when"
		public Group getGroup() { return cGroup; }

		//"when-name-of-day-is"
		public Keyword getWhenNameOfDayIsKeyword_0() { return cWhenNameOfDayIsKeyword_0; }

		//dsl_WhenDayName_Cases+=WhenDayNameCase+
		public Assignment getDsl_WhenDayName_CasesAssignment_1() { return cDsl_WhenDayName_CasesAssignment_1; }

		//WhenDayNameCase
		public RuleCall getDsl_WhenDayName_CasesWhenDayNameCaseParserRuleCall_1_0() { return cDsl_WhenDayName_CasesWhenDayNameCaseParserRuleCall_1_0; }

		//dsl_WhenDayName_Other=WhenOther?
		public Assignment getDsl_WhenDayName_OtherAssignment_2() { return cDsl_WhenDayName_OtherAssignment_2; }

		//WhenOther
		public RuleCall getDsl_WhenDayName_OtherWhenOtherParserRuleCall_2_0() { return cDsl_WhenDayName_OtherWhenOtherParserRuleCall_2_0; }

		//"end-when"
		public Keyword getEndWhenKeyword_3() { return cEndWhenKeyword_3; }
	}

	public class WhenDayNameCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WhenDayNameCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDsl_WhenDayNameCase_DaysAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDsl_WhenDayNameCase_DaysAbstractDayNameCaseParserRuleCall_0_0 = (RuleCall)cDsl_WhenDayNameCase_DaysAssignment_0.eContents().get(0);
		private final Keyword cUseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDsl_WhenDayNameCase_True_actionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDsl_WhenDayNameCase_True_actionsAbstractComponentParserRuleCall_2_0 = (RuleCall)cDsl_WhenDayNameCase_True_actionsAssignment_2.eContents().get(0);
		
		//WhenDayNameCase:
		//	dsl_WhenDayNameCase_Days=AbstractDayNameCase "use:" dsl_WhenDayNameCase_True_actions+=AbstractComponent*;
		public ParserRule getRule() { return rule; }

		//dsl_WhenDayNameCase_Days=AbstractDayNameCase "use:" dsl_WhenDayNameCase_True_actions+=AbstractComponent*
		public Group getGroup() { return cGroup; }

		//dsl_WhenDayNameCase_Days=AbstractDayNameCase
		public Assignment getDsl_WhenDayNameCase_DaysAssignment_0() { return cDsl_WhenDayNameCase_DaysAssignment_0; }

		//AbstractDayNameCase
		public RuleCall getDsl_WhenDayNameCase_DaysAbstractDayNameCaseParserRuleCall_0_0() { return cDsl_WhenDayNameCase_DaysAbstractDayNameCaseParserRuleCall_0_0; }

		//"use:"
		public Keyword getUseKeyword_1() { return cUseKeyword_1; }

		//dsl_WhenDayNameCase_True_actions+=AbstractComponent*
		public Assignment getDsl_WhenDayNameCase_True_actionsAssignment_2() { return cDsl_WhenDayNameCase_True_actionsAssignment_2; }

		//AbstractComponent
		public RuleCall getDsl_WhenDayNameCase_True_actionsAbstractComponentParserRuleCall_2_0() { return cDsl_WhenDayNameCase_True_actionsAbstractComponentParserRuleCall_2_0; }
	}

	public class AbstractDayNameCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractDayNameCase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDayNameRangeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDayNameSetParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractDayNameCase:
		//	DayNameRange | DayNameSet;
		public ParserRule getRule() { return rule; }

		//DayNameRange | DayNameSet
		public Alternatives getAlternatives() { return cAlternatives; }

		//DayNameRange
		public RuleCall getDayNameRangeParserRuleCall_0() { return cDayNameRangeParserRuleCall_0; }

		//DayNameSet
		public RuleCall getDayNameSetParserRuleCall_1() { return cDayNameSetParserRuleCall_1; }
	}

	public class DayNameRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DayNameRange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDsl_DayNameRange_fromAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDsl_DayNameRange_fromDayOfWeekEnumRuleCall_0_0 = (RuleCall)cDsl_DayNameRange_fromAssignment_0.eContents().get(0);
		private final Keyword cThruKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDsl_DayNameRange_ToAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDsl_DayNameRange_ToDayOfWeekEnumRuleCall_2_0 = (RuleCall)cDsl_DayNameRange_ToAssignment_2.eContents().get(0);
		
		//DayNameRange:
		//	dsl_DayNameRange_from=DayOfWeek "thru" dsl_DayNameRange_To=DayOfWeek;
		public ParserRule getRule() { return rule; }

		//dsl_DayNameRange_from=DayOfWeek "thru" dsl_DayNameRange_To=DayOfWeek
		public Group getGroup() { return cGroup; }

		//dsl_DayNameRange_from=DayOfWeek
		public Assignment getDsl_DayNameRange_fromAssignment_0() { return cDsl_DayNameRange_fromAssignment_0; }

		//DayOfWeek
		public RuleCall getDsl_DayNameRange_fromDayOfWeekEnumRuleCall_0_0() { return cDsl_DayNameRange_fromDayOfWeekEnumRuleCall_0_0; }

		//"thru"
		public Keyword getThruKeyword_1() { return cThruKeyword_1; }

		//dsl_DayNameRange_To=DayOfWeek
		public Assignment getDsl_DayNameRange_ToAssignment_2() { return cDsl_DayNameRange_ToAssignment_2; }

		//DayOfWeek
		public RuleCall getDsl_DayNameRange_ToDayOfWeekEnumRuleCall_2_0() { return cDsl_DayNameRange_ToDayOfWeekEnumRuleCall_2_0; }
	}

	public class DayNameSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DayNameSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDslDayNameSet_ValuesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDslDayNameSet_ValuesDayOfWeekEnumRuleCall_0_0 = (RuleCall)cDslDayNameSet_ValuesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDslDayNameSet_ValuesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDslDayNameSet_ValuesDayOfWeekEnumRuleCall_1_1_0 = (RuleCall)cDslDayNameSet_ValuesAssignment_1_1.eContents().get(0);
		
		//DayNameSet:
		//	dslDayNameSet_Values+=DayOfWeek ("," dslDayNameSet_Values+=DayOfWeek)*;
		public ParserRule getRule() { return rule; }

		//dslDayNameSet_Values+=DayOfWeek ("," dslDayNameSet_Values+=DayOfWeek)*
		public Group getGroup() { return cGroup; }

		//dslDayNameSet_Values+=DayOfWeek
		public Assignment getDslDayNameSet_ValuesAssignment_0() { return cDslDayNameSet_ValuesAssignment_0; }

		//DayOfWeek
		public RuleCall getDslDayNameSet_ValuesDayOfWeekEnumRuleCall_0_0() { return cDslDayNameSet_ValuesDayOfWeekEnumRuleCall_0_0; }

		//("," dslDayNameSet_Values+=DayOfWeek)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//dslDayNameSet_Values+=DayOfWeek
		public Assignment getDslDayNameSet_ValuesAssignment_1_1() { return cDslDayNameSet_ValuesAssignment_1_1; }

		//DayOfWeek
		public RuleCall getDslDayNameSet_ValuesDayOfWeekEnumRuleCall_1_1_0() { return cDslDayNameSet_ValuesDayOfWeekEnumRuleCall_1_1_0; }
	}

	public class WhenPentecostarionDayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WhenPentecostarionDay");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhenPentecostarionDayIsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDsl_WhenPentecostarionDay_CasesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDsl_WhenPentecostarionDay_CasesWhenPeriodCaseParserRuleCall_1_0 = (RuleCall)cDsl_WhenPentecostarionDay_CasesAssignment_1.eContents().get(0);
		private final Assignment cDsl_WhenPentecostarionDay_OtherAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDsl_WhenPentecostarionDay_OtherWhenOtherParserRuleCall_2_0 = (RuleCall)cDsl_WhenPentecostarionDay_OtherAssignment_2.eContents().get(0);
		private final Keyword cEndWhenKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//WhenPentecostarionDay:
		//	"when-pentecostarion-day-is" dsl_WhenPentecostarionDay_Cases+=WhenPeriodCase+
		//	dsl_WhenPentecostarionDay_Other=WhenOther? "end-when";
		public ParserRule getRule() { return rule; }

		//"when-pentecostarion-day-is" dsl_WhenPentecostarionDay_Cases+=WhenPeriodCase+ dsl_WhenPentecostarionDay_Other=WhenOther?
		//"end-when"
		public Group getGroup() { return cGroup; }

		//"when-pentecostarion-day-is"
		public Keyword getWhenPentecostarionDayIsKeyword_0() { return cWhenPentecostarionDayIsKeyword_0; }

		//dsl_WhenPentecostarionDay_Cases+=WhenPeriodCase+
		public Assignment getDsl_WhenPentecostarionDay_CasesAssignment_1() { return cDsl_WhenPentecostarionDay_CasesAssignment_1; }

		//WhenPeriodCase
		public RuleCall getDsl_WhenPentecostarionDay_CasesWhenPeriodCaseParserRuleCall_1_0() { return cDsl_WhenPentecostarionDay_CasesWhenPeriodCaseParserRuleCall_1_0; }

		//dsl_WhenPentecostarionDay_Other=WhenOther?
		public Assignment getDsl_WhenPentecostarionDay_OtherAssignment_2() { return cDsl_WhenPentecostarionDay_OtherAssignment_2; }

		//WhenOther
		public RuleCall getDsl_WhenPentecostarionDay_OtherWhenOtherParserRuleCall_2_0() { return cDsl_WhenPentecostarionDay_OtherWhenOtherParserRuleCall_2_0; }

		//"end-when"
		public Keyword getEndWhenKeyword_3() { return cEndWhenKeyword_3; }
	}

	public class WhenTriodionDayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WhenTriodionDay");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhenTriodionDayIsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDsl_WhenTriodionDay_CasesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDsl_WhenTriodionDay_CasesWhenPeriodCaseParserRuleCall_1_0 = (RuleCall)cDsl_WhenTriodionDay_CasesAssignment_1.eContents().get(0);
		private final Assignment cDsl_WhenTriodionDay_OtherAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDsl_WhenTriodionDay_OtherWhenOtherParserRuleCall_2_0 = (RuleCall)cDsl_WhenTriodionDay_OtherAssignment_2.eContents().get(0);
		private final Keyword cEndWhenKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//WhenTriodionDay:
		//	"when-triodion-day-is" dsl_WhenTriodionDay_Cases+=WhenPeriodCase+ dsl_WhenTriodionDay_Other=WhenOther? "end-when";
		public ParserRule getRule() { return rule; }

		//"when-triodion-day-is" dsl_WhenTriodionDay_Cases+=WhenPeriodCase+ dsl_WhenTriodionDay_Other=WhenOther? "end-when"
		public Group getGroup() { return cGroup; }

		//"when-triodion-day-is"
		public Keyword getWhenTriodionDayIsKeyword_0() { return cWhenTriodionDayIsKeyword_0; }

		//dsl_WhenTriodionDay_Cases+=WhenPeriodCase+
		public Assignment getDsl_WhenTriodionDay_CasesAssignment_1() { return cDsl_WhenTriodionDay_CasesAssignment_1; }

		//WhenPeriodCase
		public RuleCall getDsl_WhenTriodionDay_CasesWhenPeriodCaseParserRuleCall_1_0() { return cDsl_WhenTriodionDay_CasesWhenPeriodCaseParserRuleCall_1_0; }

		//dsl_WhenTriodionDay_Other=WhenOther?
		public Assignment getDsl_WhenTriodionDay_OtherAssignment_2() { return cDsl_WhenTriodionDay_OtherAssignment_2; }

		//WhenOther
		public RuleCall getDsl_WhenTriodionDay_OtherWhenOtherParserRuleCall_2_0() { return cDsl_WhenTriodionDay_OtherWhenOtherParserRuleCall_2_0; }

		//"end-when"
		public Keyword getEndWhenKeyword_3() { return cEndWhenKeyword_3; }
	}

	public class WhenMovableCycleDayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WhenMovableCycleDay");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhenMovableCycleDayIsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDsl_WhenMovableCycleDay_CasesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDsl_WhenMovableCycleDay_CasesWhenPeriodCaseParserRuleCall_1_0 = (RuleCall)cDsl_WhenMovableCycleDay_CasesAssignment_1.eContents().get(0);
		private final Assignment cDsl_WhenMovableCycleDay_OtherAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDsl_WhenMovableCycleDay_OtherWhenOtherParserRuleCall_2_0 = (RuleCall)cDsl_WhenMovableCycleDay_OtherAssignment_2.eContents().get(0);
		private final Keyword cEndWhenKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//WhenMovableCycleDay:
		//	"when-movable-cycle-day-is" dsl_WhenMovableCycleDay_Cases+=WhenPeriodCase+ dsl_WhenMovableCycleDay_Other=WhenOther?
		//	"end-when";
		public ParserRule getRule() { return rule; }

		//"when-movable-cycle-day-is" dsl_WhenMovableCycleDay_Cases+=WhenPeriodCase+ dsl_WhenMovableCycleDay_Other=WhenOther?
		//"end-when"
		public Group getGroup() { return cGroup; }

		//"when-movable-cycle-day-is"
		public Keyword getWhenMovableCycleDayIsKeyword_0() { return cWhenMovableCycleDayIsKeyword_0; }

		//dsl_WhenMovableCycleDay_Cases+=WhenPeriodCase+
		public Assignment getDsl_WhenMovableCycleDay_CasesAssignment_1() { return cDsl_WhenMovableCycleDay_CasesAssignment_1; }

		//WhenPeriodCase
		public RuleCall getDsl_WhenMovableCycleDay_CasesWhenPeriodCaseParserRuleCall_1_0() { return cDsl_WhenMovableCycleDay_CasesWhenPeriodCaseParserRuleCall_1_0; }

		//dsl_WhenMovableCycleDay_Other=WhenOther?
		public Assignment getDsl_WhenMovableCycleDay_OtherAssignment_2() { return cDsl_WhenMovableCycleDay_OtherAssignment_2; }

		//WhenOther
		public RuleCall getDsl_WhenMovableCycleDay_OtherWhenOtherParserRuleCall_2_0() { return cDsl_WhenMovableCycleDay_OtherWhenOtherParserRuleCall_2_0; }

		//"end-when"
		public Keyword getEndWhenKeyword_3() { return cEndWhenKeyword_3; }
	}

	public class WhenSundayAfterElevationOfCrossDayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WhenSundayAfterElevationOfCrossDay");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhenSundayAfterElevationOfCrossIsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDsl_WhenSundayAfterElevationOfCrossDay_CasesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDsl_WhenSundayAfterElevationOfCrossDay_CasesWhenDateCaseParserRuleCall_1_0 = (RuleCall)cDsl_WhenSundayAfterElevationOfCrossDay_CasesAssignment_1.eContents().get(0);
		private final Assignment cDsl_WhenSundayAfterElevationOfCrossDay_OtherAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDsl_WhenSundayAfterElevationOfCrossDay_OtherWhenOtherParserRuleCall_2_0 = (RuleCall)cDsl_WhenSundayAfterElevationOfCrossDay_OtherAssignment_2.eContents().get(0);
		private final Keyword cEndWhenKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//WhenSundayAfterElevationOfCrossDay:
		//	"when-Sunday-after-Elevation-of-Cross-is" dsl_WhenSundayAfterElevationOfCrossDay_Cases+=WhenDateCase+
		//	dsl_WhenSundayAfterElevationOfCrossDay_Other=WhenOther? "end-when";
		public ParserRule getRule() { return rule; }

		//"when-Sunday-after-Elevation-of-Cross-is" dsl_WhenSundayAfterElevationOfCrossDay_Cases+=WhenDateCase+
		//dsl_WhenSundayAfterElevationOfCrossDay_Other=WhenOther? "end-when"
		public Group getGroup() { return cGroup; }

		//"when-Sunday-after-Elevation-of-Cross-is"
		public Keyword getWhenSundayAfterElevationOfCrossIsKeyword_0() { return cWhenSundayAfterElevationOfCrossIsKeyword_0; }

		//dsl_WhenSundayAfterElevationOfCrossDay_Cases+=WhenDateCase+
		public Assignment getDsl_WhenSundayAfterElevationOfCrossDay_CasesAssignment_1() { return cDsl_WhenSundayAfterElevationOfCrossDay_CasesAssignment_1; }

		//WhenDateCase
		public RuleCall getDsl_WhenSundayAfterElevationOfCrossDay_CasesWhenDateCaseParserRuleCall_1_0() { return cDsl_WhenSundayAfterElevationOfCrossDay_CasesWhenDateCaseParserRuleCall_1_0; }

		//dsl_WhenSundayAfterElevationOfCrossDay_Other=WhenOther?
		public Assignment getDsl_WhenSundayAfterElevationOfCrossDay_OtherAssignment_2() { return cDsl_WhenSundayAfterElevationOfCrossDay_OtherAssignment_2; }

		//WhenOther
		public RuleCall getDsl_WhenSundayAfterElevationOfCrossDay_OtherWhenOtherParserRuleCall_2_0() { return cDsl_WhenSundayAfterElevationOfCrossDay_OtherWhenOtherParserRuleCall_2_0; }

		//"end-when"
		public Keyword getEndWhenKeyword_3() { return cEndWhenKeyword_3; }
	}

	public class WhenLukanCycleDayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WhenLukanCycleDay");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhenLukanCycleDayIsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDsl_WhenLukanCycleDay_CasesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDsl_WhenLukanCycleDay_CasesWhenPeriodCaseParserRuleCall_1_0 = (RuleCall)cDsl_WhenLukanCycleDay_CasesAssignment_1.eContents().get(0);
		private final Assignment cDsl_WhenLukanCycleDay_OtherAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDsl_WhenLukanCycleDay_OtherWhenOtherParserRuleCall_2_0 = (RuleCall)cDsl_WhenLukanCycleDay_OtherAssignment_2.eContents().get(0);
		private final Keyword cEndWhenKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//WhenLukanCycleDay:
		//	"when-Lukan-Cycle-Day-is" dsl_WhenLukanCycleDay_Cases+=WhenPeriodCase+ dsl_WhenLukanCycleDay_Other=WhenOther?
		//	"end-when";
		public ParserRule getRule() { return rule; }

		//"when-Lukan-Cycle-Day-is" dsl_WhenLukanCycleDay_Cases+=WhenPeriodCase+ dsl_WhenLukanCycleDay_Other=WhenOther? "end-when"
		public Group getGroup() { return cGroup; }

		//"when-Lukan-Cycle-Day-is"
		public Keyword getWhenLukanCycleDayIsKeyword_0() { return cWhenLukanCycleDayIsKeyword_0; }

		//dsl_WhenLukanCycleDay_Cases+=WhenPeriodCase+
		public Assignment getDsl_WhenLukanCycleDay_CasesAssignment_1() { return cDsl_WhenLukanCycleDay_CasesAssignment_1; }

		//WhenPeriodCase
		public RuleCall getDsl_WhenLukanCycleDay_CasesWhenPeriodCaseParserRuleCall_1_0() { return cDsl_WhenLukanCycleDay_CasesWhenPeriodCaseParserRuleCall_1_0; }

		//dsl_WhenLukanCycleDay_Other=WhenOther?
		public Assignment getDsl_WhenLukanCycleDay_OtherAssignment_2() { return cDsl_WhenLukanCycleDay_OtherAssignment_2; }

		//WhenOther
		public RuleCall getDsl_WhenLukanCycleDay_OtherWhenOtherParserRuleCall_2_0() { return cDsl_WhenLukanCycleDay_OtherWhenOtherParserRuleCall_2_0; }

		//"end-when"
		public Keyword getEndWhenKeyword_3() { return cEndWhenKeyword_3; }
	}

	public class WhenPaschaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WhenPascha");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhenPaschaUseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDsl_WhenPascha_true_actionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDsl_WhenPascha_true_actionsAbstractComponentParserRuleCall_1_0 = (RuleCall)cDsl_WhenPascha_true_actionsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cOtherwiseUseKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDsl_WhenPascha_Other_actionsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDsl_WhenPascha_Other_actionsAbstractComponentParserRuleCall_2_1_0 = (RuleCall)cDsl_WhenPascha_Other_actionsAssignment_2_1.eContents().get(0);
		private final Keyword cEndWhenKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//WhenPascha:
		//	"when-pascha use:" dsl_WhenPascha_true_actions+=AbstractComponent* ("otherwise use:"
		//	dsl_WhenPascha_Other_actions+=AbstractComponent*)? "end-when";
		public ParserRule getRule() { return rule; }

		//"when-pascha use:" dsl_WhenPascha_true_actions+=AbstractComponent* ("otherwise use:"
		//dsl_WhenPascha_Other_actions+=AbstractComponent*)? "end-when"
		public Group getGroup() { return cGroup; }

		//"when-pascha use:"
		public Keyword getWhenPaschaUseKeyword_0() { return cWhenPaschaUseKeyword_0; }

		//dsl_WhenPascha_true_actions+=AbstractComponent*
		public Assignment getDsl_WhenPascha_true_actionsAssignment_1() { return cDsl_WhenPascha_true_actionsAssignment_1; }

		//AbstractComponent
		public RuleCall getDsl_WhenPascha_true_actionsAbstractComponentParserRuleCall_1_0() { return cDsl_WhenPascha_true_actionsAbstractComponentParserRuleCall_1_0; }

		//("otherwise use:" dsl_WhenPascha_Other_actions+=AbstractComponent*)?
		public Group getGroup_2() { return cGroup_2; }

		//"otherwise use:"
		public Keyword getOtherwiseUseKeyword_2_0() { return cOtherwiseUseKeyword_2_0; }

		//dsl_WhenPascha_Other_actions+=AbstractComponent*
		public Assignment getDsl_WhenPascha_Other_actionsAssignment_2_1() { return cDsl_WhenPascha_Other_actionsAssignment_2_1; }

		//AbstractComponent
		public RuleCall getDsl_WhenPascha_Other_actionsAbstractComponentParserRuleCall_2_1_0() { return cDsl_WhenPascha_Other_actionsAbstractComponentParserRuleCall_2_1_0; }

		//"end-when"
		public Keyword getEndWhenKeyword_3() { return cEndWhenKeyword_3; }
	}

	public class WhenOtherElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WhenOther");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOtherwiseUseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDsl_WhenCase_Other_actionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDsl_WhenCase_Other_actionsAbstractComponentParserRuleCall_1_0 = (RuleCall)cDsl_WhenCase_Other_actionsAssignment_1.eContents().get(0);
		
		//WhenOther:
		//	"otherwise use:" dsl_WhenCase_Other_actions+=AbstractComponent*;
		public ParserRule getRule() { return rule; }

		//"otherwise use:" dsl_WhenCase_Other_actions+=AbstractComponent*
		public Group getGroup() { return cGroup; }

		//"otherwise use:"
		public Keyword getOtherwiseUseKeyword_0() { return cOtherwiseUseKeyword_0; }

		//dsl_WhenCase_Other_actions+=AbstractComponent*
		public Assignment getDsl_WhenCase_Other_actionsAssignment_1() { return cDsl_WhenCase_Other_actionsAssignment_1; }

		//AbstractComponent
		public RuleCall getDsl_WhenCase_Other_actionsAbstractComponentParserRuleCall_1_0() { return cDsl_WhenCase_Other_actionsAbstractComponentParserRuleCall_1_0; }
	}

	public class WhenPeriodCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WhenPeriodCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDsl_WhenPeriodCase_DaysAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDsl_WhenPeriodCase_DaysAbstractDayCaseParserRuleCall_0_0 = (RuleCall)cDsl_WhenPeriodCase_DaysAssignment_0.eContents().get(0);
		private final Keyword cUseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDsl_WhenPeriodCase_True_actionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDsl_WhenPeriodCase_True_actionsAbstractComponentParserRuleCall_2_0 = (RuleCall)cDsl_WhenPeriodCase_True_actionsAssignment_2.eContents().get(0);
		
		//WhenPeriodCase:
		//	dsl_WhenPeriodCase_Days=AbstractDayCase "use:" dsl_WhenPeriodCase_True_actions+=AbstractComponent*;
		public ParserRule getRule() { return rule; }

		//dsl_WhenPeriodCase_Days=AbstractDayCase "use:" dsl_WhenPeriodCase_True_actions+=AbstractComponent*
		public Group getGroup() { return cGroup; }

		//dsl_WhenPeriodCase_Days=AbstractDayCase
		public Assignment getDsl_WhenPeriodCase_DaysAssignment_0() { return cDsl_WhenPeriodCase_DaysAssignment_0; }

		//AbstractDayCase
		public RuleCall getDsl_WhenPeriodCase_DaysAbstractDayCaseParserRuleCall_0_0() { return cDsl_WhenPeriodCase_DaysAbstractDayCaseParserRuleCall_0_0; }

		//"use:"
		public Keyword getUseKeyword_1() { return cUseKeyword_1; }

		//dsl_WhenPeriodCase_True_actions+=AbstractComponent*
		public Assignment getDsl_WhenPeriodCase_True_actionsAssignment_2() { return cDsl_WhenPeriodCase_True_actionsAssignment_2; }

		//AbstractComponent
		public RuleCall getDsl_WhenPeriodCase_True_actionsAbstractComponentParserRuleCall_2_0() { return cDsl_WhenPeriodCase_True_actionsAbstractComponentParserRuleCall_2_0; }
	}

	public class AbstractDayCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractDayCase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDayRangeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDaySetParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractDayCase:
		//	DayRange | DaySet;
		public ParserRule getRule() { return rule; }

		//DayRange | DaySet
		public Alternatives getAlternatives() { return cAlternatives; }

		//DayRange
		public RuleCall getDayRangeParserRuleCall_0() { return cDayRangeParserRuleCall_0; }

		//DaySet
		public RuleCall getDaySetParserRuleCall_1() { return cDaySetParserRuleCall_1; }
	}

	public class DayRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DayRange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDsl_DayRange_fromAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDsl_DayRange_fromINTTerminalRuleCall_0_0 = (RuleCall)cDsl_DayRange_fromAssignment_0.eContents().get(0);
		private final Keyword cThruKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDsl_Range_ToAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDsl_Range_ToINTTerminalRuleCall_2_0 = (RuleCall)cDsl_Range_ToAssignment_2.eContents().get(0);
		
		//DayRange:
		//	dsl_DayRange_from=INT "thru" dsl_Range_To=INT;
		public ParserRule getRule() { return rule; }

		//dsl_DayRange_from=INT "thru" dsl_Range_To=INT
		public Group getGroup() { return cGroup; }

		//dsl_DayRange_from=INT
		public Assignment getDsl_DayRange_fromAssignment_0() { return cDsl_DayRange_fromAssignment_0; }

		//INT
		public RuleCall getDsl_DayRange_fromINTTerminalRuleCall_0_0() { return cDsl_DayRange_fromINTTerminalRuleCall_0_0; }

		//"thru"
		public Keyword getThruKeyword_1() { return cThruKeyword_1; }

		//dsl_Range_To=INT
		public Assignment getDsl_Range_ToAssignment_2() { return cDsl_Range_ToAssignment_2; }

		//INT
		public RuleCall getDsl_Range_ToINTTerminalRuleCall_2_0() { return cDsl_Range_ToINTTerminalRuleCall_2_0; }
	}

	public class DaySetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DaySet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDslSetValue_DaysAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDslSetValue_DaysINTTerminalRuleCall_0_0 = (RuleCall)cDslSetValue_DaysAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDslSetValue_DaysAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDslSetValue_DaysINTTerminalRuleCall_1_1_0 = (RuleCall)cDslSetValue_DaysAssignment_1_1.eContents().get(0);
		
		//DaySet:
		//	dslSetValue_Days+=INT ("," dslSetValue_Days+=INT)*;
		public ParserRule getRule() { return rule; }

		//dslSetValue_Days+=INT ("," dslSetValue_Days+=INT)*
		public Group getGroup() { return cGroup; }

		//dslSetValue_Days+=INT
		public Assignment getDslSetValue_DaysAssignment_0() { return cDslSetValue_DaysAssignment_0; }

		//INT
		public RuleCall getDslSetValue_DaysINTTerminalRuleCall_0_0() { return cDslSetValue_DaysINTTerminalRuleCall_0_0; }

		//("," dslSetValue_Days+=INT)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//dslSetValue_Days+=INT
		public Assignment getDslSetValue_DaysAssignment_1_1() { return cDslSetValue_DaysAssignment_1_1; }

		//INT
		public RuleCall getDslSetValue_DaysINTTerminalRuleCall_1_1_0() { return cDslSetValue_DaysINTTerminalRuleCall_1_1_0; }
	}

	public class WhenModeOfWeekElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WhenModeOfWeek");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhenModeOfWeekIsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDsl_WhenModeOfWeek_CasesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDsl_WhenModeOfWeek_CasesWhenModeOfWeekCaseParserRuleCall_1_0 = (RuleCall)cDsl_WhenModeOfWeek_CasesAssignment_1.eContents().get(0);
		private final Assignment cDsl_WhenModeOfWeek_OtherAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDsl_WhenModeOfWeek_OtherWhenOtherParserRuleCall_2_0 = (RuleCall)cDsl_WhenModeOfWeek_OtherAssignment_2.eContents().get(0);
		private final Keyword cEndWhenKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//WhenModeOfWeek:
		//	"when-mode-of-week-is" dsl_WhenModeOfWeek_Cases+=WhenModeOfWeekCase+ dsl_WhenModeOfWeek_Other=WhenOther? "end-when";
		public ParserRule getRule() { return rule; }

		//"when-mode-of-week-is" dsl_WhenModeOfWeek_Cases+=WhenModeOfWeekCase+ dsl_WhenModeOfWeek_Other=WhenOther? "end-when"
		public Group getGroup() { return cGroup; }

		//"when-mode-of-week-is"
		public Keyword getWhenModeOfWeekIsKeyword_0() { return cWhenModeOfWeekIsKeyword_0; }

		//dsl_WhenModeOfWeek_Cases+=WhenModeOfWeekCase+
		public Assignment getDsl_WhenModeOfWeek_CasesAssignment_1() { return cDsl_WhenModeOfWeek_CasesAssignment_1; }

		//WhenModeOfWeekCase
		public RuleCall getDsl_WhenModeOfWeek_CasesWhenModeOfWeekCaseParserRuleCall_1_0() { return cDsl_WhenModeOfWeek_CasesWhenModeOfWeekCaseParserRuleCall_1_0; }

		//dsl_WhenModeOfWeek_Other=WhenOther?
		public Assignment getDsl_WhenModeOfWeek_OtherAssignment_2() { return cDsl_WhenModeOfWeek_OtherAssignment_2; }

		//WhenOther
		public RuleCall getDsl_WhenModeOfWeek_OtherWhenOtherParserRuleCall_2_0() { return cDsl_WhenModeOfWeek_OtherWhenOtherParserRuleCall_2_0; }

		//"end-when"
		public Keyword getEndWhenKeyword_3() { return cEndWhenKeyword_3; }
	}

	public class WhenModeOfWeekCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WhenModeOfWeekCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDsl_WhenModeOfWeekCase_DaysAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDsl_WhenModeOfWeekCase_DaysModeOfWeekSetParserRuleCall_0_0 = (RuleCall)cDsl_WhenModeOfWeekCase_DaysAssignment_0.eContents().get(0);
		private final Keyword cUseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDsl_WhenModeOfWeekCase_True_actionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDsl_WhenModeOfWeekCase_True_actionsAbstractComponentParserRuleCall_2_0 = (RuleCall)cDsl_WhenModeOfWeekCase_True_actionsAssignment_2.eContents().get(0);
		
		//WhenModeOfWeekCase:
		//	dsl_WhenModeOfWeekCase_Days=ModeOfWeekSet "use:" dsl_WhenModeOfWeekCase_True_actions+=AbstractComponent*;
		public ParserRule getRule() { return rule; }

		//dsl_WhenModeOfWeekCase_Days=ModeOfWeekSet "use:" dsl_WhenModeOfWeekCase_True_actions+=AbstractComponent*
		public Group getGroup() { return cGroup; }

		//dsl_WhenModeOfWeekCase_Days=ModeOfWeekSet
		public Assignment getDsl_WhenModeOfWeekCase_DaysAssignment_0() { return cDsl_WhenModeOfWeekCase_DaysAssignment_0; }

		//ModeOfWeekSet
		public RuleCall getDsl_WhenModeOfWeekCase_DaysModeOfWeekSetParserRuleCall_0_0() { return cDsl_WhenModeOfWeekCase_DaysModeOfWeekSetParserRuleCall_0_0; }

		//"use:"
		public Keyword getUseKeyword_1() { return cUseKeyword_1; }

		//dsl_WhenModeOfWeekCase_True_actions+=AbstractComponent*
		public Assignment getDsl_WhenModeOfWeekCase_True_actionsAssignment_2() { return cDsl_WhenModeOfWeekCase_True_actionsAssignment_2; }

		//AbstractComponent
		public RuleCall getDsl_WhenModeOfWeekCase_True_actionsAbstractComponentParserRuleCall_2_0() { return cDsl_WhenModeOfWeekCase_True_actionsAbstractComponentParserRuleCall_2_0; }
	}

	public class ModeOfWeekSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModeOfWeekSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDsl_ModeOfWeekSet_MOWsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDsl_ModeOfWeekSet_MOWsModeTypesEnumRuleCall_0_0 = (RuleCall)cDsl_ModeOfWeekSet_MOWsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDsl_ModeOfWeekSet_MOWsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDsl_ModeOfWeekSet_MOWsModeTypesEnumRuleCall_1_1_0 = (RuleCall)cDsl_ModeOfWeekSet_MOWsAssignment_1_1.eContents().get(0);
		
		//ModeOfWeekSet:
		//	dsl_ModeOfWeekSet_MOWs+=ModeTypes ("," dsl_ModeOfWeekSet_MOWs+=ModeTypes)*;
		public ParserRule getRule() { return rule; }

		//dsl_ModeOfWeekSet_MOWs+=ModeTypes ("," dsl_ModeOfWeekSet_MOWs+=ModeTypes)*
		public Group getGroup() { return cGroup; }

		//dsl_ModeOfWeekSet_MOWs+=ModeTypes
		public Assignment getDsl_ModeOfWeekSet_MOWsAssignment_0() { return cDsl_ModeOfWeekSet_MOWsAssignment_0; }

		//ModeTypes
		public RuleCall getDsl_ModeOfWeekSet_MOWsModeTypesEnumRuleCall_0_0() { return cDsl_ModeOfWeekSet_MOWsModeTypesEnumRuleCall_0_0; }

		//("," dsl_ModeOfWeekSet_MOWs+=ModeTypes)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//dsl_ModeOfWeekSet_MOWs+=ModeTypes
		public Assignment getDsl_ModeOfWeekSet_MOWsAssignment_1_1() { return cDsl_ModeOfWeekSet_MOWsAssignment_1_1; }

		//ModeTypes
		public RuleCall getDsl_ModeOfWeekSet_MOWsModeTypesEnumRuleCall_1_1_0() { return cDsl_ModeOfWeekSet_MOWsModeTypesEnumRuleCall_1_1_0; }
	}

	public class WhenSundaysBeforeTriodionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WhenSundaysBeforeTriodion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhenSundaysBeforeTriodionIsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDsl_WhenSundaysBeforeTriodion_CasesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDsl_WhenSundaysBeforeTriodion_CasesSundaysBeforeTriodionCaseParserRuleCall_1_0 = (RuleCall)cDsl_WhenSundaysBeforeTriodion_CasesAssignment_1.eContents().get(0);
		private final Assignment cDsl_SundaysBeforeTriodion_OtherAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDsl_SundaysBeforeTriodion_OtherWhenOtherParserRuleCall_2_0 = (RuleCall)cDsl_SundaysBeforeTriodion_OtherAssignment_2.eContents().get(0);
		private final Keyword cEndWhenKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//WhenSundaysBeforeTriodion:
		//	"when-sundays-before-triodion-is" dsl_WhenSundaysBeforeTriodion_Cases+=SundaysBeforeTriodionCase+
		//	dsl_SundaysBeforeTriodion_Other=WhenOther? "end-when";
		public ParserRule getRule() { return rule; }

		//"when-sundays-before-triodion-is" dsl_WhenSundaysBeforeTriodion_Cases+=SundaysBeforeTriodionCase+
		//dsl_SundaysBeforeTriodion_Other=WhenOther? "end-when"
		public Group getGroup() { return cGroup; }

		//"when-sundays-before-triodion-is"
		public Keyword getWhenSundaysBeforeTriodionIsKeyword_0() { return cWhenSundaysBeforeTriodionIsKeyword_0; }

		//dsl_WhenSundaysBeforeTriodion_Cases+=SundaysBeforeTriodionCase+
		public Assignment getDsl_WhenSundaysBeforeTriodion_CasesAssignment_1() { return cDsl_WhenSundaysBeforeTriodion_CasesAssignment_1; }

		//SundaysBeforeTriodionCase
		public RuleCall getDsl_WhenSundaysBeforeTriodion_CasesSundaysBeforeTriodionCaseParserRuleCall_1_0() { return cDsl_WhenSundaysBeforeTriodion_CasesSundaysBeforeTriodionCaseParserRuleCall_1_0; }

		//dsl_SundaysBeforeTriodion_Other=WhenOther?
		public Assignment getDsl_SundaysBeforeTriodion_OtherAssignment_2() { return cDsl_SundaysBeforeTriodion_OtherAssignment_2; }

		//WhenOther
		public RuleCall getDsl_SundaysBeforeTriodion_OtherWhenOtherParserRuleCall_2_0() { return cDsl_SundaysBeforeTriodion_OtherWhenOtherParserRuleCall_2_0; }

		//"end-when"
		public Keyword getEndWhenKeyword_3() { return cEndWhenKeyword_3; }
	}

	public class SundaysBeforeTriodionCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SundaysBeforeTriodionCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDsl_SundaysBeforeTriodionCase_DaysAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDsl_SundaysBeforeTriodionCase_DaysINTTerminalRuleCall_0_0 = (RuleCall)cDsl_SundaysBeforeTriodionCase_DaysAssignment_0.eContents().get(0);
		private final Keyword cUseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDsl_SundaysBeforeTriodionCase_True_actionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDsl_SundaysBeforeTriodionCase_True_actionsAbstractComponentParserRuleCall_2_0 = (RuleCall)cDsl_SundaysBeforeTriodionCase_True_actionsAssignment_2.eContents().get(0);
		
		//SundaysBeforeTriodionCase:
		//	dsl_SundaysBeforeTriodionCase_Days=INT "use:" dsl_SundaysBeforeTriodionCase_True_actions+=AbstractComponent*;
		public ParserRule getRule() { return rule; }

		//dsl_SundaysBeforeTriodionCase_Days=INT "use:" dsl_SundaysBeforeTriodionCase_True_actions+=AbstractComponent*
		public Group getGroup() { return cGroup; }

		//dsl_SundaysBeforeTriodionCase_Days=INT
		public Assignment getDsl_SundaysBeforeTriodionCase_DaysAssignment_0() { return cDsl_SundaysBeforeTriodionCase_DaysAssignment_0; }

		//INT
		public RuleCall getDsl_SundaysBeforeTriodionCase_DaysINTTerminalRuleCall_0_0() { return cDsl_SundaysBeforeTriodionCase_DaysINTTerminalRuleCall_0_0; }

		//"use:"
		public Keyword getUseKeyword_1() { return cUseKeyword_1; }

		//dsl_SundaysBeforeTriodionCase_True_actions+=AbstractComponent*
		public Assignment getDsl_SundaysBeforeTriodionCase_True_actionsAssignment_2() { return cDsl_SundaysBeforeTriodionCase_True_actionsAssignment_2; }

		//AbstractComponent
		public RuleCall getDsl_SundaysBeforeTriodionCase_True_actionsAbstractComponentParserRuleCall_2_0() { return cDsl_SundaysBeforeTriodionCase_True_actionsAbstractComponentParserRuleCall_2_0; }
	}

	public class WhenExistsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WhenExists");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhenExistsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDsl_WhenExists_CasesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDsl_WhenExists_CasesWhenExistsCaseParserRuleCall_1_0 = (RuleCall)cDsl_WhenExists_CasesAssignment_1.eContents().get(0);
		private final Assignment cDsl_WhenExists_OtherAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDsl_WhenExists_OtherWhenOtherParserRuleCall_2_0 = (RuleCall)cDsl_WhenExists_OtherAssignment_2.eContents().get(0);
		private final Keyword cEndWhenKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//WhenExists:
		//	"when-exists" dsl_WhenExists_Cases+=WhenExistsCase+ dsl_WhenExists_Other=WhenOther? "end-when";
		public ParserRule getRule() { return rule; }

		//"when-exists" dsl_WhenExists_Cases+=WhenExistsCase+ dsl_WhenExists_Other=WhenOther? "end-when"
		public Group getGroup() { return cGroup; }

		//"when-exists"
		public Keyword getWhenExistsKeyword_0() { return cWhenExistsKeyword_0; }

		//dsl_WhenExists_Cases+=WhenExistsCase+
		public Assignment getDsl_WhenExists_CasesAssignment_1() { return cDsl_WhenExists_CasesAssignment_1; }

		//WhenExistsCase
		public RuleCall getDsl_WhenExists_CasesWhenExistsCaseParserRuleCall_1_0() { return cDsl_WhenExists_CasesWhenExistsCaseParserRuleCall_1_0; }

		//dsl_WhenExists_Other=WhenOther?
		public Assignment getDsl_WhenExists_OtherAssignment_2() { return cDsl_WhenExists_OtherAssignment_2; }

		//WhenOther
		public RuleCall getDsl_WhenExists_OtherWhenOtherParserRuleCall_2_0() { return cDsl_WhenExists_OtherWhenOtherParserRuleCall_2_0; }

		//"end-when"
		public Keyword getEndWhenKeyword_3() { return cEndWhenKeyword_3; }
	}

	public class WhenExistsCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WhenExistsCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRidKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDsl_WhenExistsCase_RefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cDsl_WhenExistsCase_RefDefinitionCrossReference_1_0 = (CrossReference)cDsl_WhenExistsCase_RefAssignment_1.eContents().get(0);
		private final RuleCall cDsl_WhenExistsCase_RefDefinitionQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cDsl_WhenExistsCase_RefDefinitionCrossReference_1_0.eContents().get(1);
		private final Keyword cUseKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDsl_WhenExistsCase_True_actionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDsl_WhenExistsCase_True_actionsAbstractComponentParserRuleCall_3_0 = (RuleCall)cDsl_WhenExistsCase_True_actionsAssignment_3.eContents().get(0);
		
		//WhenExistsCase:
		//	"rid" dsl_WhenExistsCase_Ref=[def::Definition|QualifiedName] "use:"
		//	dsl_WhenExistsCase_True_actions+=AbstractComponent*;
		public ParserRule getRule() { return rule; }

		//"rid" dsl_WhenExistsCase_Ref=[def::Definition|QualifiedName] "use:" dsl_WhenExistsCase_True_actions+=AbstractComponent*
		public Group getGroup() { return cGroup; }

		//"rid"
		public Keyword getRidKeyword_0() { return cRidKeyword_0; }

		//dsl_WhenExistsCase_Ref=[def::Definition|QualifiedName]
		public Assignment getDsl_WhenExistsCase_RefAssignment_1() { return cDsl_WhenExistsCase_RefAssignment_1; }

		//[def::Definition|QualifiedName]
		public CrossReference getDsl_WhenExistsCase_RefDefinitionCrossReference_1_0() { return cDsl_WhenExistsCase_RefDefinitionCrossReference_1_0; }

		//QualifiedName
		public RuleCall getDsl_WhenExistsCase_RefDefinitionQualifiedNameParserRuleCall_1_0_1() { return cDsl_WhenExistsCase_RefDefinitionQualifiedNameParserRuleCall_1_0_1; }

		//"use:"
		public Keyword getUseKeyword_2() { return cUseKeyword_2; }

		//dsl_WhenExistsCase_True_actions+=AbstractComponent*
		public Assignment getDsl_WhenExistsCase_True_actionsAssignment_3() { return cDsl_WhenExistsCase_True_actionsAssignment_3; }

		//AbstractComponent
		public RuleCall getDsl_WhenExistsCase_True_actionsAbstractComponentParserRuleCall_3_0() { return cDsl_WhenExistsCase_True_actionsAbstractComponentParserRuleCall_3_0; }
	}
	
	
	public class VersionSwitchTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "VersionSwitchType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cL1EnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cL1L1Keyword_0_0 = (Keyword)cL1EnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cL2EnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cL2L2Keyword_1_0 = (Keyword)cL2EnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBothEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBothBothKeyword_2_0 = (Keyword)cBothEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum VersionSwitchType:
		//	L1 | L2 | Both;
		public EnumRule getRule() { return rule; }

		//L1 | L2 | Both
		public Alternatives getAlternatives() { return cAlternatives; }

		//L1
		public EnumLiteralDeclaration getL1EnumLiteralDeclaration_0() { return cL1EnumLiteralDeclaration_0; }

		//"L1"
		public Keyword getL1L1Keyword_0_0() { return cL1L1Keyword_0_0; }

		//L2
		public EnumLiteralDeclaration getL2EnumLiteralDeclaration_1() { return cL2EnumLiteralDeclaration_1; }

		//"L2"
		public Keyword getL2L2Keyword_1_0() { return cL2L2Keyword_1_0; }

		//Both
		public EnumLiteralDeclaration getBothEnumLiteralDeclaration_2() { return cBothEnumLiteralDeclaration_2; }

		//"Both"
		public Keyword getBothBothKeyword_2_0() { return cBothBothKeyword_2_0; }
	}

	public class LanguageElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Language");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cL1EnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cL1L1Keyword_0_0 = (Keyword)cL1EnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cL2EnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cL2L2Keyword_1_0 = (Keyword)cL2EnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Language:
		//	L1 | L2;
		public EnumRule getRule() { return rule; }

		//L1 | L2
		public Alternatives getAlternatives() { return cAlternatives; }

		//L1
		public EnumLiteralDeclaration getL1EnumLiteralDeclaration_0() { return cL1EnumLiteralDeclaration_0; }

		//"L1"
		public Keyword getL1L1Keyword_0_0() { return cL1L1Keyword_0_0; }

		//L2
		public EnumLiteralDeclaration getL2EnumLiteralDeclaration_1() { return cL2EnumLiteralDeclaration_1; }

		//"L2"
		public Keyword getL2L2Keyword_1_0() { return cL2L2Keyword_1_0; }
	}

	public class BreakTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "BreakType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLineEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLineLineKeyword_0_0 = (Keyword)cLineEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPageEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPagePageKeyword_1_0 = (Keyword)cPageEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum BreakType:
		//	line | page;
		public EnumRule getRule() { return rule; }

		//line | page
		public Alternatives getAlternatives() { return cAlternatives; }

		//line
		public EnumLiteralDeclaration getLineEnumLiteralDeclaration_0() { return cLineEnumLiteralDeclaration_0; }

		//"line"
		public Keyword getLineLineKeyword_0_0() { return cLineLineKeyword_0_0; }

		//page
		public EnumLiteralDeclaration getPageEnumLiteralDeclaration_1() { return cPageEnumLiteralDeclaration_1; }

		//"page"
		public Keyword getPagePageKeyword_1_0() { return cPagePageKeyword_1_0; }
	}

	public class TemplateStatusesElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "TemplateStatuses");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNAEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNANAKeyword_0_0 = (Keyword)cNAEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDraftEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDraftDraftKeyword_1_0 = (Keyword)cDraftEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cReviewEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cReviewReviewKeyword_2_0 = (Keyword)cReviewEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cFinalEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cFinalFinalKeyword_3_0 = (Keyword)cFinalEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum TemplateStatuses:
		//	NA | Draft | Review | Final;
		public EnumRule getRule() { return rule; }

		//NA | Draft | Review | Final
		public Alternatives getAlternatives() { return cAlternatives; }

		//NA
		public EnumLiteralDeclaration getNAEnumLiteralDeclaration_0() { return cNAEnumLiteralDeclaration_0; }

		//"NA"
		public Keyword getNANAKeyword_0_0() { return cNANAKeyword_0_0; }

		//Draft
		public EnumLiteralDeclaration getDraftEnumLiteralDeclaration_1() { return cDraftEnumLiteralDeclaration_1; }

		//"Draft"
		public Keyword getDraftDraftKeyword_1_0() { return cDraftDraftKeyword_1_0; }

		//Review
		public EnumLiteralDeclaration getReviewEnumLiteralDeclaration_2() { return cReviewEnumLiteralDeclaration_2; }

		//"Review"
		public Keyword getReviewReviewKeyword_2_0() { return cReviewReviewKeyword_2_0; }

		//Final
		public EnumLiteralDeclaration getFinalEnumLiteralDeclaration_3() { return cFinalEnumLiteralDeclaration_3; }

		//"Final"
		public Keyword getFinalFinalKeyword_3_0() { return cFinalFinalKeyword_3_0; }
	}

	public class NullElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Null");
		private final EnumLiteralDeclaration cNullEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cNullNullKeyword_0 = (Keyword)cNullEnumLiteralDeclaration.eContents().get(0);
		
		//enum Null:
		//	null;
		public EnumRule getRule() { return rule; }

		//null
		public EnumLiteralDeclaration getNullEnumLiteralDeclaration() { return cNullEnumLiteralDeclaration; }

		//"null"
		public Keyword getNullNullKeyword_0() { return cNullNullKeyword_0; }
	}

	public class ModeTypesElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ModeTypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cM1EnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cM1M1Keyword_0_0 = (Keyword)cM1EnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cM2EnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cM2M2Keyword_1_0 = (Keyword)cM2EnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cM3EnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cM3M3Keyword_2_0 = (Keyword)cM3EnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cM4EnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cM4M4Keyword_3_0 = (Keyword)cM4EnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cM5EnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cM5M5Keyword_4_0 = (Keyword)cM5EnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cM6EnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cM6M6Keyword_5_0 = (Keyword)cM6EnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cM7EnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cM7M7Keyword_6_0 = (Keyword)cM7EnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cM8EnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cM8M8Keyword_7_0 = (Keyword)cM8EnumLiteralDeclaration_7.eContents().get(0);
		
		/// * 
		//WhenCondition:
		//'when-condition'
		//(dsl_WhenCondition_Cases+=WhenConditionCase)+
		//(dsl_WhenCondition_Other=WhenOther)?
		//'end-when'
		//;
		//
		//WhenConditionCase: dsl_WhenConditionCase=[Condition | QualifiedName] 'use:';
		//
		//Condition: 'Condition' name=QualifiedName  
		//	dsl_Condition_Cases+=AbstractCases*
		//'End-Condition'
		//;
		//AbstractCases: CaseAnyTrue | CaseAllTrue | CaseNoneTrue;
		//CaseAnyTrue: 'AnyCaseTrue' '(' anyCases+=Case (',' anyCases+=Case)* ')';
		//CaseAllTrue: 'AllCasesTrue' '(' allCases+=Case (',' allCases+=Case)* ')';
		//CaseNoneTrue: 'NoCaseTrue' '(' noCases+=Case (',' noCases+=Case)* ')';
		//
		//Case: 
		//	CaseDayOfMonth
		//	| Case_Pointer
		//	| CaseDaysAfterFeast 
		//	| CaseDaysBeforeFeast 
		//	| CaseExists
		//	| CaseFeastOf
		//	| CaseMonth
		//	| CaseModeOfWeek 
		//	| CaseDayOfSeason 
		//	| CaseSeason 
		//	| CaseWeekday
		//;
		//
		//Case_Pointer: name=[Condition | QualifiedName] ;
		//CaseSeason: "The_Season_is" dsl_CaseSeason=Seasons;
		//CaseDayOfMonth: 'Day_of_Month_is' dsl_CaseDayOfMonth=INT;
		//CaseDaysAfterFeast: 'Today_is' dsl_CaseDaysAfter_Count=INT 'days_after_feast' dsl_CaseDaysAfter_Event=[def::Definition | QualifiedName] ;
		//CaseDaysBeforeFeast: 'Today_is' dsl_CaseDaysBefore_Count=INT 'days_before_feast' dsl_CaseDaysBefore_Event=[def::Definition | QualifiedName] ;
		//CaseExists: 'Exists_rid' dsl_CaseExists_Ref=[def::Definition | QualifiedName];
		//CaseFeastOf: 'Today_is_feast_of' dsl_CaseDayOf_Event=[def::Definition | QualifiedName] ;
		//CaseModeOfWeek: 'Mode_of_the_week_is' dsl_CaseModeOfWeek_Mode=ModeTypes;
		//CaseDayOfSeason: 'Day_of_Season_is' dsl_CaseDayOfSeason_Season=INT;
		//CaseMonth: 'Month_is' dsl_CaseMonth=MonthName;
		//CaseWeekday: 'Day_of_Week_is' dsl_CaseDayOfWeek=DayOfWeek ;
		// * 
		// * / / *
		//IfStatement: 
		//'if ' dsl_IF_Condition+=[Rule | QualifiedName] ( ',' dsl_IF_Condition+=[Rule | QualifiedName])* 'then' 
		//	(dsl_IF_True_Actions+=AbstractComponent)*
		//('else' 
		//	(dsl_IF_False_Actions+=AbstractComponent)*
		//)? 
		//'end-if'
		//;
		//
		// * / enum ModeTypes:
		//	M1 | M2 | M3 | M4 | M5 | M6 | M7 | M8;
		public EnumRule getRule() { return rule; }

		//M1 | M2 | M3 | M4 | M5 | M6 | M7 | M8
		public Alternatives getAlternatives() { return cAlternatives; }

		//M1
		public EnumLiteralDeclaration getM1EnumLiteralDeclaration_0() { return cM1EnumLiteralDeclaration_0; }

		//"M1"
		public Keyword getM1M1Keyword_0_0() { return cM1M1Keyword_0_0; }

		//M2
		public EnumLiteralDeclaration getM2EnumLiteralDeclaration_1() { return cM2EnumLiteralDeclaration_1; }

		//"M2"
		public Keyword getM2M2Keyword_1_0() { return cM2M2Keyword_1_0; }

		//M3
		public EnumLiteralDeclaration getM3EnumLiteralDeclaration_2() { return cM3EnumLiteralDeclaration_2; }

		//"M3"
		public Keyword getM3M3Keyword_2_0() { return cM3M3Keyword_2_0; }

		//M4
		public EnumLiteralDeclaration getM4EnumLiteralDeclaration_3() { return cM4EnumLiteralDeclaration_3; }

		//"M4"
		public Keyword getM4M4Keyword_3_0() { return cM4M4Keyword_3_0; }

		//M5
		public EnumLiteralDeclaration getM5EnumLiteralDeclaration_4() { return cM5EnumLiteralDeclaration_4; }

		//"M5"
		public Keyword getM5M5Keyword_4_0() { return cM5M5Keyword_4_0; }

		//M6
		public EnumLiteralDeclaration getM6EnumLiteralDeclaration_5() { return cM6EnumLiteralDeclaration_5; }

		//"M6"
		public Keyword getM6M6Keyword_5_0() { return cM6M6Keyword_5_0; }

		//M7
		public EnumLiteralDeclaration getM7EnumLiteralDeclaration_6() { return cM7EnumLiteralDeclaration_6; }

		//"M7"
		public Keyword getM7M7Keyword_6_0() { return cM7M7Keyword_6_0; }

		//M8
		public EnumLiteralDeclaration getM8EnumLiteralDeclaration_7() { return cM8EnumLiteralDeclaration_7; }

		//"M8"
		public Keyword getM8M8Keyword_7_0() { return cM8M8Keyword_7_0; }
	}

	public class DowTypesElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "DowTypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cD1EnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cD1D1Keyword_0_0 = (Keyword)cD1EnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cD2EnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cD2D2Keyword_1_0 = (Keyword)cD2EnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cD3EnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cD3D3Keyword_2_0 = (Keyword)cD3EnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cD4EnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cD4D4Keyword_3_0 = (Keyword)cD4EnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cD5EnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cD5D5Keyword_4_0 = (Keyword)cD5EnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cD6EnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cD6D6Keyword_5_0 = (Keyword)cD6EnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cD7EnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cD7D7Keyword_6_0 = (Keyword)cD7EnumLiteralDeclaration_6.eContents().get(0);
		
		//enum DowTypes:
		//	D1 | D2 | D3 | D4 | D5 | D6 | D7;
		public EnumRule getRule() { return rule; }

		//D1 | D2 | D3 | D4 | D5 | D6 | D7
		public Alternatives getAlternatives() { return cAlternatives; }

		//D1
		public EnumLiteralDeclaration getD1EnumLiteralDeclaration_0() { return cD1EnumLiteralDeclaration_0; }

		//"D1"
		public Keyword getD1D1Keyword_0_0() { return cD1D1Keyword_0_0; }

		//D2
		public EnumLiteralDeclaration getD2EnumLiteralDeclaration_1() { return cD2EnumLiteralDeclaration_1; }

		//"D2"
		public Keyword getD2D2Keyword_1_0() { return cD2D2Keyword_1_0; }

		//D3
		public EnumLiteralDeclaration getD3EnumLiteralDeclaration_2() { return cD3EnumLiteralDeclaration_2; }

		//"D3"
		public Keyword getD3D3Keyword_2_0() { return cD3D3Keyword_2_0; }

		//D4
		public EnumLiteralDeclaration getD4EnumLiteralDeclaration_3() { return cD4EnumLiteralDeclaration_3; }

		//"D4"
		public Keyword getD4D4Keyword_3_0() { return cD4D4Keyword_3_0; }

		//D5
		public EnumLiteralDeclaration getD5EnumLiteralDeclaration_4() { return cD5EnumLiteralDeclaration_4; }

		//"D5"
		public Keyword getD5D5Keyword_4_0() { return cD5D5Keyword_4_0; }

		//D6
		public EnumLiteralDeclaration getD6EnumLiteralDeclaration_5() { return cD6EnumLiteralDeclaration_5; }

		//"D6"
		public Keyword getD6D6Keyword_5_0() { return cD6D6Keyword_5_0; }

		//D7
		public EnumLiteralDeclaration getD7EnumLiteralDeclaration_6() { return cD7EnumLiteralDeclaration_6; }

		//"D7"
		public Keyword getD7D7Keyword_6_0() { return cD7D7Keyword_6_0; }
	}

	public class BookTypesElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "BookTypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOctochechosEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cOctochechosOctochechosKeyword_0_0 = (Keyword)cOctochechosEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMenaionEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMenaionMenaionKeyword_1_0 = (Keyword)cMenaionEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEuchologionEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEuchologionEuchologionKeyword_2_0 = (Keyword)cEuchologionEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cPentecostarionEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cPentecostarionPentecostarionKeyword_3_0 = (Keyword)cPentecostarionEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cTriodionEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cTriodionTriodionKeyword_4_0 = (Keyword)cTriodionEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cHorologionEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cHorologionHorologionKeyword_5_0 = (Keyword)cHorologionEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cEothinaEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cEothinaEothinaKeyword_6_0 = (Keyword)cEothinaEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cHeirmologionEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cHeirmologionHeirmologionKeyword_7_0 = (Keyword)cHeirmologionEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cKatavasiasEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cKatavasiasKatavasiasKeyword_8_0 = (Keyword)cKatavasiasEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cPsalterEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cPsalterPsalterKeyword_9_0 = (Keyword)cPsalterEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cLectionaryEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cLectionaryLectionaryKeyword_10_0 = (Keyword)cLectionaryEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cOtherEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cOtherOtherKeyword_11_0 = (Keyword)cOtherEnumLiteralDeclaration_11.eContents().get(0);
		
		//enum BookTypes:
		//	Octochechos | Menaion | Euchologion | Pentecostarion | Triodion | Horologion | Eothina | Heirmologion | Katavasias |
		//	Psalter | Lectionary | Other;
		public EnumRule getRule() { return rule; }

		//Octochechos | Menaion | Euchologion | Pentecostarion | Triodion | Horologion | Eothina | Heirmologion | Katavasias |
		//Psalter | Lectionary | Other
		public Alternatives getAlternatives() { return cAlternatives; }

		//Octochechos
		public EnumLiteralDeclaration getOctochechosEnumLiteralDeclaration_0() { return cOctochechosEnumLiteralDeclaration_0; }

		//"Octochechos"
		public Keyword getOctochechosOctochechosKeyword_0_0() { return cOctochechosOctochechosKeyword_0_0; }

		//Menaion
		public EnumLiteralDeclaration getMenaionEnumLiteralDeclaration_1() { return cMenaionEnumLiteralDeclaration_1; }

		//"Menaion"
		public Keyword getMenaionMenaionKeyword_1_0() { return cMenaionMenaionKeyword_1_0; }

		//Euchologion
		public EnumLiteralDeclaration getEuchologionEnumLiteralDeclaration_2() { return cEuchologionEnumLiteralDeclaration_2; }

		//"Euchologion"
		public Keyword getEuchologionEuchologionKeyword_2_0() { return cEuchologionEuchologionKeyword_2_0; }

		//Pentecostarion
		public EnumLiteralDeclaration getPentecostarionEnumLiteralDeclaration_3() { return cPentecostarionEnumLiteralDeclaration_3; }

		//"Pentecostarion"
		public Keyword getPentecostarionPentecostarionKeyword_3_0() { return cPentecostarionPentecostarionKeyword_3_0; }

		//Triodion
		public EnumLiteralDeclaration getTriodionEnumLiteralDeclaration_4() { return cTriodionEnumLiteralDeclaration_4; }

		//"Triodion"
		public Keyword getTriodionTriodionKeyword_4_0() { return cTriodionTriodionKeyword_4_0; }

		//Horologion
		public EnumLiteralDeclaration getHorologionEnumLiteralDeclaration_5() { return cHorologionEnumLiteralDeclaration_5; }

		//"Horologion"
		public Keyword getHorologionHorologionKeyword_5_0() { return cHorologionHorologionKeyword_5_0; }

		//Eothina
		public EnumLiteralDeclaration getEothinaEnumLiteralDeclaration_6() { return cEothinaEnumLiteralDeclaration_6; }

		//"Eothina"
		public Keyword getEothinaEothinaKeyword_6_0() { return cEothinaEothinaKeyword_6_0; }

		//Heirmologion
		public EnumLiteralDeclaration getHeirmologionEnumLiteralDeclaration_7() { return cHeirmologionEnumLiteralDeclaration_7; }

		//"Heirmologion"
		public Keyword getHeirmologionHeirmologionKeyword_7_0() { return cHeirmologionHeirmologionKeyword_7_0; }

		//Katavasias
		public EnumLiteralDeclaration getKatavasiasEnumLiteralDeclaration_8() { return cKatavasiasEnumLiteralDeclaration_8; }

		//"Katavasias"
		public Keyword getKatavasiasKatavasiasKeyword_8_0() { return cKatavasiasKatavasiasKeyword_8_0; }

		//Psalter
		public EnumLiteralDeclaration getPsalterEnumLiteralDeclaration_9() { return cPsalterEnumLiteralDeclaration_9; }

		//"Psalter"
		public Keyword getPsalterPsalterKeyword_9_0() { return cPsalterPsalterKeyword_9_0; }

		//Lectionary
		public EnumLiteralDeclaration getLectionaryEnumLiteralDeclaration_10() { return cLectionaryEnumLiteralDeclaration_10; }

		//"Lectionary"
		public Keyword getLectionaryLectionaryKeyword_10_0() { return cLectionaryLectionaryKeyword_10_0; }

		//Other
		public EnumLiteralDeclaration getOtherEnumLiteralDeclaration_11() { return cOtherEnumLiteralDeclaration_11; }

		//"Other"
		public Keyword getOtherOtherKeyword_11_0() { return cOtherOtherKeyword_11_0; }
	}

	public class SeasonsElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Seasons");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTriodionEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTriodionTriodionKeyword_0_0 = (Keyword)cTriodionEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPentecostarionEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPentecostarionPentecostarionKeyword_1_0 = (Keyword)cPentecostarionEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cNativity_FastEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cNativity_FastNativity_FastKeyword_2_0 = (Keyword)cNativity_FastEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cApostles_FastEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cApostles_FastApostles_FastKeyword_3_0 = (Keyword)cApostles_FastEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDormition_FastEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDormition_FastDormition_FastKeyword_4_0 = (Keyword)cDormition_FastEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum Seasons:
		//	Triodion | Pentecostarion | Nativity_Fast | Apostles_Fast | Dormition_Fast;
		public EnumRule getRule() { return rule; }

		//Triodion | Pentecostarion | Nativity_Fast | Apostles_Fast | Dormition_Fast
		public Alternatives getAlternatives() { return cAlternatives; }

		//Triodion
		public EnumLiteralDeclaration getTriodionEnumLiteralDeclaration_0() { return cTriodionEnumLiteralDeclaration_0; }

		//"Triodion"
		public Keyword getTriodionTriodionKeyword_0_0() { return cTriodionTriodionKeyword_0_0; }

		//Pentecostarion
		public EnumLiteralDeclaration getPentecostarionEnumLiteralDeclaration_1() { return cPentecostarionEnumLiteralDeclaration_1; }

		//"Pentecostarion"
		public Keyword getPentecostarionPentecostarionKeyword_1_0() { return cPentecostarionPentecostarionKeyword_1_0; }

		//Nativity_Fast
		public EnumLiteralDeclaration getNativity_FastEnumLiteralDeclaration_2() { return cNativity_FastEnumLiteralDeclaration_2; }

		//"Nativity_Fast"
		public Keyword getNativity_FastNativity_FastKeyword_2_0() { return cNativity_FastNativity_FastKeyword_2_0; }

		//Apostles_Fast
		public EnumLiteralDeclaration getApostles_FastEnumLiteralDeclaration_3() { return cApostles_FastEnumLiteralDeclaration_3; }

		//"Apostles_Fast"
		public Keyword getApostles_FastApostles_FastKeyword_3_0() { return cApostles_FastApostles_FastKeyword_3_0; }

		//Dormition_Fast
		public EnumLiteralDeclaration getDormition_FastEnumLiteralDeclaration_4() { return cDormition_FastEnumLiteralDeclaration_4; }

		//"Dormition_Fast"
		public Keyword getDormition_FastDormition_FastKeyword_4_0() { return cDormition_FastDormition_FastKeyword_4_0; }
	}

	public class DayOfMonthTypesElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "DayOfMonthTypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cD01EnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cD01D01Keyword_0_0 = (Keyword)cD01EnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cD02EnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cD02D02Keyword_1_0 = (Keyword)cD02EnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cD03EnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cD03D03Keyword_2_0 = (Keyword)cD03EnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cD04EnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cD04D04Keyword_3_0 = (Keyword)cD04EnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cD05EnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cD05D05Keyword_4_0 = (Keyword)cD05EnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cD06EnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cD06D06Keyword_5_0 = (Keyword)cD06EnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cD07EnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cD07D07Keyword_6_0 = (Keyword)cD07EnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cD08EnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cD08D08Keyword_7_0 = (Keyword)cD08EnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cD09EnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cD09D09Keyword_8_0 = (Keyword)cD09EnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cD10EnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cD10D10Keyword_9_0 = (Keyword)cD10EnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cD11EnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cD11D11Keyword_10_0 = (Keyword)cD11EnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cD12EnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cD12D12Keyword_11_0 = (Keyword)cD12EnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cD13EnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cD13D13Keyword_12_0 = (Keyword)cD13EnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cD14EnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cD14D14Keyword_13_0 = (Keyword)cD14EnumLiteralDeclaration_13.eContents().get(0);
		private final EnumLiteralDeclaration cD15EnumLiteralDeclaration_14 = (EnumLiteralDeclaration)cAlternatives.eContents().get(14);
		private final Keyword cD15D15Keyword_14_0 = (Keyword)cD15EnumLiteralDeclaration_14.eContents().get(0);
		private final EnumLiteralDeclaration cD16EnumLiteralDeclaration_15 = (EnumLiteralDeclaration)cAlternatives.eContents().get(15);
		private final Keyword cD16D16Keyword_15_0 = (Keyword)cD16EnumLiteralDeclaration_15.eContents().get(0);
		private final EnumLiteralDeclaration cD17EnumLiteralDeclaration_16 = (EnumLiteralDeclaration)cAlternatives.eContents().get(16);
		private final Keyword cD17D17Keyword_16_0 = (Keyword)cD17EnumLiteralDeclaration_16.eContents().get(0);
		private final EnumLiteralDeclaration cD18EnumLiteralDeclaration_17 = (EnumLiteralDeclaration)cAlternatives.eContents().get(17);
		private final Keyword cD18D18Keyword_17_0 = (Keyword)cD18EnumLiteralDeclaration_17.eContents().get(0);
		private final EnumLiteralDeclaration cD19EnumLiteralDeclaration_18 = (EnumLiteralDeclaration)cAlternatives.eContents().get(18);
		private final Keyword cD19D19Keyword_18_0 = (Keyword)cD19EnumLiteralDeclaration_18.eContents().get(0);
		private final EnumLiteralDeclaration cD20EnumLiteralDeclaration_19 = (EnumLiteralDeclaration)cAlternatives.eContents().get(19);
		private final Keyword cD20D20Keyword_19_0 = (Keyword)cD20EnumLiteralDeclaration_19.eContents().get(0);
		private final EnumLiteralDeclaration cD21EnumLiteralDeclaration_20 = (EnumLiteralDeclaration)cAlternatives.eContents().get(20);
		private final Keyword cD21D21Keyword_20_0 = (Keyword)cD21EnumLiteralDeclaration_20.eContents().get(0);
		private final EnumLiteralDeclaration cD22EnumLiteralDeclaration_21 = (EnumLiteralDeclaration)cAlternatives.eContents().get(21);
		private final Keyword cD22D22Keyword_21_0 = (Keyword)cD22EnumLiteralDeclaration_21.eContents().get(0);
		private final EnumLiteralDeclaration cD23EnumLiteralDeclaration_22 = (EnumLiteralDeclaration)cAlternatives.eContents().get(22);
		private final Keyword cD23D23Keyword_22_0 = (Keyword)cD23EnumLiteralDeclaration_22.eContents().get(0);
		private final EnumLiteralDeclaration cD24EnumLiteralDeclaration_23 = (EnumLiteralDeclaration)cAlternatives.eContents().get(23);
		private final Keyword cD24D24Keyword_23_0 = (Keyword)cD24EnumLiteralDeclaration_23.eContents().get(0);
		private final EnumLiteralDeclaration cD25EnumLiteralDeclaration_24 = (EnumLiteralDeclaration)cAlternatives.eContents().get(24);
		private final Keyword cD25D25Keyword_24_0 = (Keyword)cD25EnumLiteralDeclaration_24.eContents().get(0);
		private final EnumLiteralDeclaration cD26EnumLiteralDeclaration_25 = (EnumLiteralDeclaration)cAlternatives.eContents().get(25);
		private final Keyword cD26D26Keyword_25_0 = (Keyword)cD26EnumLiteralDeclaration_25.eContents().get(0);
		private final EnumLiteralDeclaration cD27EnumLiteralDeclaration_26 = (EnumLiteralDeclaration)cAlternatives.eContents().get(26);
		private final Keyword cD27D27Keyword_26_0 = (Keyword)cD27EnumLiteralDeclaration_26.eContents().get(0);
		private final EnumLiteralDeclaration cD28EnumLiteralDeclaration_27 = (EnumLiteralDeclaration)cAlternatives.eContents().get(27);
		private final Keyword cD28D28Keyword_27_0 = (Keyword)cD28EnumLiteralDeclaration_27.eContents().get(0);
		private final EnumLiteralDeclaration cD29EnumLiteralDeclaration_28 = (EnumLiteralDeclaration)cAlternatives.eContents().get(28);
		private final Keyword cD29D29Keyword_28_0 = (Keyword)cD29EnumLiteralDeclaration_28.eContents().get(0);
		private final EnumLiteralDeclaration cD30EnumLiteralDeclaration_29 = (EnumLiteralDeclaration)cAlternatives.eContents().get(29);
		private final Keyword cD30D30Keyword_29_0 = (Keyword)cD30EnumLiteralDeclaration_29.eContents().get(0);
		private final EnumLiteralDeclaration cD31EnumLiteralDeclaration_30 = (EnumLiteralDeclaration)cAlternatives.eContents().get(30);
		private final Keyword cD31D31Keyword_30_0 = (Keyword)cD31EnumLiteralDeclaration_30.eContents().get(0);
		
		/// ** 
		//enum DayOfSeasonTypes: 
		//	  D01 | D02 | D03 | D04 | D05 | D06 | D07 | D08 | D09
		//	| D10 | D11 | D12 | D13 | D14 | D15 | D16 | D17 | D18 | D19
		//	| D20 | D21 | D22 | D23 | D24 | D25 | D26 | D27 | D28 | D29
		//	| D30 | D31 | D32 | D33 | D34 | D35 | D36 | D37 | D38 | D39
		//	| D40 | D41 | D42 | D43 | D44 | D45 | D46 | D47 | D48 | D49
		//	| D50 | D51 | D52 | D53 | D54 | D55 | D56 | D57 | D58| D59 
		//	| D60 | D61 | D62 | D63 | D64 | D65 | D66 | D67 | D68 | D69 
		//	| D70 
		//	;
		// ** / enum DayOfMonthTypes:
		//	D01 | D02 | D03 | D04 | D05 | D06 | D07 | D08 | D09 | D10 | D11 | D12 | D13 | D14 | D15 | D16 | D17 | D18 | D19 | D20
		//	| D21 | D22 | D23 | D24 | D25 | D26 | D27 | D28 | D29 | D30 | D31;
		public EnumRule getRule() { return rule; }

		//D01 | D02 | D03 | D04 | D05 | D06 | D07 | D08 | D09 | D10 | D11 | D12 | D13 | D14 | D15 | D16 | D17 | D18 | D19 | D20 |
		//D21 | D22 | D23 | D24 | D25 | D26 | D27 | D28 | D29 | D30 | D31
		public Alternatives getAlternatives() { return cAlternatives; }

		//D01
		public EnumLiteralDeclaration getD01EnumLiteralDeclaration_0() { return cD01EnumLiteralDeclaration_0; }

		//"D01"
		public Keyword getD01D01Keyword_0_0() { return cD01D01Keyword_0_0; }

		//D02
		public EnumLiteralDeclaration getD02EnumLiteralDeclaration_1() { return cD02EnumLiteralDeclaration_1; }

		//"D02"
		public Keyword getD02D02Keyword_1_0() { return cD02D02Keyword_1_0; }

		//D03
		public EnumLiteralDeclaration getD03EnumLiteralDeclaration_2() { return cD03EnumLiteralDeclaration_2; }

		//"D03"
		public Keyword getD03D03Keyword_2_0() { return cD03D03Keyword_2_0; }

		//D04
		public EnumLiteralDeclaration getD04EnumLiteralDeclaration_3() { return cD04EnumLiteralDeclaration_3; }

		//"D04"
		public Keyword getD04D04Keyword_3_0() { return cD04D04Keyword_3_0; }

		//D05
		public EnumLiteralDeclaration getD05EnumLiteralDeclaration_4() { return cD05EnumLiteralDeclaration_4; }

		//"D05"
		public Keyword getD05D05Keyword_4_0() { return cD05D05Keyword_4_0; }

		//D06
		public EnumLiteralDeclaration getD06EnumLiteralDeclaration_5() { return cD06EnumLiteralDeclaration_5; }

		//"D06"
		public Keyword getD06D06Keyword_5_0() { return cD06D06Keyword_5_0; }

		//D07
		public EnumLiteralDeclaration getD07EnumLiteralDeclaration_6() { return cD07EnumLiteralDeclaration_6; }

		//"D07"
		public Keyword getD07D07Keyword_6_0() { return cD07D07Keyword_6_0; }

		//D08
		public EnumLiteralDeclaration getD08EnumLiteralDeclaration_7() { return cD08EnumLiteralDeclaration_7; }

		//"D08"
		public Keyword getD08D08Keyword_7_0() { return cD08D08Keyword_7_0; }

		//D09
		public EnumLiteralDeclaration getD09EnumLiteralDeclaration_8() { return cD09EnumLiteralDeclaration_8; }

		//"D09"
		public Keyword getD09D09Keyword_8_0() { return cD09D09Keyword_8_0; }

		//D10
		public EnumLiteralDeclaration getD10EnumLiteralDeclaration_9() { return cD10EnumLiteralDeclaration_9; }

		//"D10"
		public Keyword getD10D10Keyword_9_0() { return cD10D10Keyword_9_0; }

		//D11
		public EnumLiteralDeclaration getD11EnumLiteralDeclaration_10() { return cD11EnumLiteralDeclaration_10; }

		//"D11"
		public Keyword getD11D11Keyword_10_0() { return cD11D11Keyword_10_0; }

		//D12
		public EnumLiteralDeclaration getD12EnumLiteralDeclaration_11() { return cD12EnumLiteralDeclaration_11; }

		//"D12"
		public Keyword getD12D12Keyword_11_0() { return cD12D12Keyword_11_0; }

		//D13
		public EnumLiteralDeclaration getD13EnumLiteralDeclaration_12() { return cD13EnumLiteralDeclaration_12; }

		//"D13"
		public Keyword getD13D13Keyword_12_0() { return cD13D13Keyword_12_0; }

		//D14
		public EnumLiteralDeclaration getD14EnumLiteralDeclaration_13() { return cD14EnumLiteralDeclaration_13; }

		//"D14"
		public Keyword getD14D14Keyword_13_0() { return cD14D14Keyword_13_0; }

		//D15
		public EnumLiteralDeclaration getD15EnumLiteralDeclaration_14() { return cD15EnumLiteralDeclaration_14; }

		//"D15"
		public Keyword getD15D15Keyword_14_0() { return cD15D15Keyword_14_0; }

		//D16
		public EnumLiteralDeclaration getD16EnumLiteralDeclaration_15() { return cD16EnumLiteralDeclaration_15; }

		//"D16"
		public Keyword getD16D16Keyword_15_0() { return cD16D16Keyword_15_0; }

		//D17
		public EnumLiteralDeclaration getD17EnumLiteralDeclaration_16() { return cD17EnumLiteralDeclaration_16; }

		//"D17"
		public Keyword getD17D17Keyword_16_0() { return cD17D17Keyword_16_0; }

		//D18
		public EnumLiteralDeclaration getD18EnumLiteralDeclaration_17() { return cD18EnumLiteralDeclaration_17; }

		//"D18"
		public Keyword getD18D18Keyword_17_0() { return cD18D18Keyword_17_0; }

		//D19
		public EnumLiteralDeclaration getD19EnumLiteralDeclaration_18() { return cD19EnumLiteralDeclaration_18; }

		//"D19"
		public Keyword getD19D19Keyword_18_0() { return cD19D19Keyword_18_0; }

		//D20
		public EnumLiteralDeclaration getD20EnumLiteralDeclaration_19() { return cD20EnumLiteralDeclaration_19; }

		//"D20"
		public Keyword getD20D20Keyword_19_0() { return cD20D20Keyword_19_0; }

		//D21
		public EnumLiteralDeclaration getD21EnumLiteralDeclaration_20() { return cD21EnumLiteralDeclaration_20; }

		//"D21"
		public Keyword getD21D21Keyword_20_0() { return cD21D21Keyword_20_0; }

		//D22
		public EnumLiteralDeclaration getD22EnumLiteralDeclaration_21() { return cD22EnumLiteralDeclaration_21; }

		//"D22"
		public Keyword getD22D22Keyword_21_0() { return cD22D22Keyword_21_0; }

		//D23
		public EnumLiteralDeclaration getD23EnumLiteralDeclaration_22() { return cD23EnumLiteralDeclaration_22; }

		//"D23"
		public Keyword getD23D23Keyword_22_0() { return cD23D23Keyword_22_0; }

		//D24
		public EnumLiteralDeclaration getD24EnumLiteralDeclaration_23() { return cD24EnumLiteralDeclaration_23; }

		//"D24"
		public Keyword getD24D24Keyword_23_0() { return cD24D24Keyword_23_0; }

		//D25
		public EnumLiteralDeclaration getD25EnumLiteralDeclaration_24() { return cD25EnumLiteralDeclaration_24; }

		//"D25"
		public Keyword getD25D25Keyword_24_0() { return cD25D25Keyword_24_0; }

		//D26
		public EnumLiteralDeclaration getD26EnumLiteralDeclaration_25() { return cD26EnumLiteralDeclaration_25; }

		//"D26"
		public Keyword getD26D26Keyword_25_0() { return cD26D26Keyword_25_0; }

		//D27
		public EnumLiteralDeclaration getD27EnumLiteralDeclaration_26() { return cD27EnumLiteralDeclaration_26; }

		//"D27"
		public Keyword getD27D27Keyword_26_0() { return cD27D27Keyword_26_0; }

		//D28
		public EnumLiteralDeclaration getD28EnumLiteralDeclaration_27() { return cD28EnumLiteralDeclaration_27; }

		//"D28"
		public Keyword getD28D28Keyword_27_0() { return cD28D28Keyword_27_0; }

		//D29
		public EnumLiteralDeclaration getD29EnumLiteralDeclaration_28() { return cD29EnumLiteralDeclaration_28; }

		//"D29"
		public Keyword getD29D29Keyword_28_0() { return cD29D29Keyword_28_0; }

		//D30
		public EnumLiteralDeclaration getD30EnumLiteralDeclaration_29() { return cD30EnumLiteralDeclaration_29; }

		//"D30"
		public Keyword getD30D30Keyword_29_0() { return cD30D30Keyword_29_0; }

		//D31
		public EnumLiteralDeclaration getD31EnumLiteralDeclaration_30() { return cD31EnumLiteralDeclaration_30; }

		//"D31"
		public Keyword getD31D31Keyword_30_0() { return cD31D31Keyword_30_0; }
	}

	public class PeriodTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "PeriodType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPaschaEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPaschaPaschaKeyword_0_0 = (Keyword)cPaschaEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPentecostarionEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPentecostarionPentecostarionKeyword_1_0 = (Keyword)cPentecostarionEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cTriodionEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cTriodionTriodionKeyword_2_0 = (Keyword)cTriodionEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum PeriodType:
		//	pascha | pentecostarion | triodion;
		public EnumRule getRule() { return rule; }

		//pascha | pentecostarion | triodion
		public Alternatives getAlternatives() { return cAlternatives; }

		//pascha
		public EnumLiteralDeclaration getPaschaEnumLiteralDeclaration_0() { return cPaschaEnumLiteralDeclaration_0; }

		//"pascha"
		public Keyword getPaschaPaschaKeyword_0_0() { return cPaschaPaschaKeyword_0_0; }

		//pentecostarion
		public EnumLiteralDeclaration getPentecostarionEnumLiteralDeclaration_1() { return cPentecostarionEnumLiteralDeclaration_1; }

		//"pentecostarion"
		public Keyword getPentecostarionPentecostarionKeyword_1_0() { return cPentecostarionPentecostarionKeyword_1_0; }

		//triodion
		public EnumLiteralDeclaration getTriodionEnumLiteralDeclaration_2() { return cTriodionEnumLiteralDeclaration_2; }

		//"triodion"
		public Keyword getTriodionTriodionKeyword_2_0() { return cTriodionTriodionKeyword_2_0; }
	}

	public class DayOfWeekElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "DayOfWeek");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSundayEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSundaySundayKeyword_0_0 = (Keyword)cSundayEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMondayEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMondayMondayKeyword_1_0 = (Keyword)cMondayEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cTuesdayEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cTuesdayTuesdayKeyword_2_0 = (Keyword)cTuesdayEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cWednesdayEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cWednesdayWednesdayKeyword_3_0 = (Keyword)cWednesdayEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cThursdayEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cThursdayThursdayKeyword_4_0 = (Keyword)cThursdayEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cFridayEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cFridayFridayKeyword_5_0 = (Keyword)cFridayEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cSaturdayEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cSaturdaySaturdayKeyword_6_0 = (Keyword)cSaturdayEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum DayOfWeek:
		//	Sunday | Monday | Tuesday | Wednesday | Thursday | Friday | Saturday;
		public EnumRule getRule() { return rule; }

		//Sunday | Monday | Tuesday | Wednesday | Thursday | Friday | Saturday
		public Alternatives getAlternatives() { return cAlternatives; }

		//Sunday
		public EnumLiteralDeclaration getSundayEnumLiteralDeclaration_0() { return cSundayEnumLiteralDeclaration_0; }

		//"Sunday"
		public Keyword getSundaySundayKeyword_0_0() { return cSundaySundayKeyword_0_0; }

		//Monday
		public EnumLiteralDeclaration getMondayEnumLiteralDeclaration_1() { return cMondayEnumLiteralDeclaration_1; }

		//"Monday"
		public Keyword getMondayMondayKeyword_1_0() { return cMondayMondayKeyword_1_0; }

		//Tuesday
		public EnumLiteralDeclaration getTuesdayEnumLiteralDeclaration_2() { return cTuesdayEnumLiteralDeclaration_2; }

		//"Tuesday"
		public Keyword getTuesdayTuesdayKeyword_2_0() { return cTuesdayTuesdayKeyword_2_0; }

		//Wednesday
		public EnumLiteralDeclaration getWednesdayEnumLiteralDeclaration_3() { return cWednesdayEnumLiteralDeclaration_3; }

		//"Wednesday"
		public Keyword getWednesdayWednesdayKeyword_3_0() { return cWednesdayWednesdayKeyword_3_0; }

		//Thursday
		public EnumLiteralDeclaration getThursdayEnumLiteralDeclaration_4() { return cThursdayEnumLiteralDeclaration_4; }

		//"Thursday"
		public Keyword getThursdayThursdayKeyword_4_0() { return cThursdayThursdayKeyword_4_0; }

		//Friday
		public EnumLiteralDeclaration getFridayEnumLiteralDeclaration_5() { return cFridayEnumLiteralDeclaration_5; }

		//"Friday"
		public Keyword getFridayFridayKeyword_5_0() { return cFridayFridayKeyword_5_0; }

		//Saturday
		public EnumLiteralDeclaration getSaturdayEnumLiteralDeclaration_6() { return cSaturdayEnumLiteralDeclaration_6; }

		//"Saturday"
		public Keyword getSaturdaySaturdayKeyword_6_0() { return cSaturdaySaturdayKeyword_6_0; }
	}

	public class MonthNameElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "MonthName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cJanEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cJanJanKeyword_0_0 = (Keyword)cJanEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFebEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFebFebKeyword_1_0 = (Keyword)cFebEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMarEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMarMarKeyword_2_0 = (Keyword)cMarEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cAprEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cAprAprKeyword_3_0 = (Keyword)cAprEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cMayEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cMayMayKeyword_4_0 = (Keyword)cMayEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cJunEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cJunJunKeyword_5_0 = (Keyword)cJunEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cJulEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cJulJulKeyword_6_0 = (Keyword)cJulEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cAugEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cAugAugKeyword_7_0 = (Keyword)cAugEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cSepEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cSepSepKeyword_8_0 = (Keyword)cSepEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cOctEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cOctOctKeyword_9_0 = (Keyword)cOctEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cNovEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cNovNovKeyword_10_0 = (Keyword)cNovEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cDecEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cDecDecKeyword_11_0 = (Keyword)cDecEnumLiteralDeclaration_11.eContents().get(0);
		
		//enum MonthName:
		//	Jan | Feb | Mar | Apr | May | Jun | Jul | Aug | Sep | Oct | Nov | Dec;
		public EnumRule getRule() { return rule; }

		//Jan | Feb | Mar | Apr | May | Jun | Jul | Aug | Sep | Oct | Nov | Dec
		public Alternatives getAlternatives() { return cAlternatives; }

		//Jan
		public EnumLiteralDeclaration getJanEnumLiteralDeclaration_0() { return cJanEnumLiteralDeclaration_0; }

		//"Jan"
		public Keyword getJanJanKeyword_0_0() { return cJanJanKeyword_0_0; }

		//Feb
		public EnumLiteralDeclaration getFebEnumLiteralDeclaration_1() { return cFebEnumLiteralDeclaration_1; }

		//"Feb"
		public Keyword getFebFebKeyword_1_0() { return cFebFebKeyword_1_0; }

		//Mar
		public EnumLiteralDeclaration getMarEnumLiteralDeclaration_2() { return cMarEnumLiteralDeclaration_2; }

		//"Mar"
		public Keyword getMarMarKeyword_2_0() { return cMarMarKeyword_2_0; }

		//Apr
		public EnumLiteralDeclaration getAprEnumLiteralDeclaration_3() { return cAprEnumLiteralDeclaration_3; }

		//"Apr"
		public Keyword getAprAprKeyword_3_0() { return cAprAprKeyword_3_0; }

		//May
		public EnumLiteralDeclaration getMayEnumLiteralDeclaration_4() { return cMayEnumLiteralDeclaration_4; }

		//"May"
		public Keyword getMayMayKeyword_4_0() { return cMayMayKeyword_4_0; }

		//Jun
		public EnumLiteralDeclaration getJunEnumLiteralDeclaration_5() { return cJunEnumLiteralDeclaration_5; }

		//"Jun"
		public Keyword getJunJunKeyword_5_0() { return cJunJunKeyword_5_0; }

		//Jul
		public EnumLiteralDeclaration getJulEnumLiteralDeclaration_6() { return cJulEnumLiteralDeclaration_6; }

		//"Jul"
		public Keyword getJulJulKeyword_6_0() { return cJulJulKeyword_6_0; }

		//Aug
		public EnumLiteralDeclaration getAugEnumLiteralDeclaration_7() { return cAugEnumLiteralDeclaration_7; }

		//"Aug"
		public Keyword getAugAugKeyword_7_0() { return cAugAugKeyword_7_0; }

		//Sep
		public EnumLiteralDeclaration getSepEnumLiteralDeclaration_8() { return cSepEnumLiteralDeclaration_8; }

		//"Sep"
		public Keyword getSepSepKeyword_8_0() { return cSepSepKeyword_8_0; }

		//Oct
		public EnumLiteralDeclaration getOctEnumLiteralDeclaration_9() { return cOctEnumLiteralDeclaration_9; }

		//"Oct"
		public Keyword getOctOctKeyword_9_0() { return cOctOctKeyword_9_0; }

		//Nov
		public EnumLiteralDeclaration getNovEnumLiteralDeclaration_10() { return cNovEnumLiteralDeclaration_10; }

		//"Nov"
		public Keyword getNovNovKeyword_10_0() { return cNovNovKeyword_10_0; }

		//Dec
		public EnumLiteralDeclaration getDecEnumLiteralDeclaration_11() { return cDecEnumLiteralDeclaration_11; }

		//"Dec"
		public Keyword getDecDecKeyword_11_0() { return cDecDecKeyword_11_0; }
	}
	
	private AtemModelElements pAtemModel;
	private HeadElements pHead;
	private HeadComponentElements pHeadComponent;
	private DriverElements pDriver;
	private TemplateTitleElements pTemplateTitle;
	private PageKeepWithNextElements pPageKeepWithNext;
	private PageHeaderEvenElements pPageHeaderEven;
	private PageHeaderOddElements pPageHeaderOdd;
	private PageFooterEvenElements pPageFooterEven;
	private PageFooterOddElements pPageFooterOdd;
	private HeaderFooterColumnElements pHeaderFooterColumn;
	private HeaderFooterColumnLeftElements pHeaderFooterColumnLeft;
	private HeaderFooterColumnCenterElements pHeaderFooterColumnCenter;
	private HeaderFooterColumnRightElements pHeaderFooterColumnRight;
	private HeaderFooterFragmentElements pHeaderFooterFragment;
	private HeaderFooterTextElements pHeaderFooterText;
	private HeaderFooterDateElements pHeaderFooterDate;
	private HeaderFooterPageNumberElements pHeaderFooterPageNumber;
	private HeaderFooterLookupElements pHeaderFooterLookup;
	private HeaderFooterTitleElements pHeaderFooterTitle;
	private HeaderFooterCommemorationElements pHeaderFooterCommemoration;
	private CommemorationElements pCommemoration;
	private TemplateStatusElements pTemplateStatus;
	private AbstractComponentElements pAbstractComponent;
	private QualifiedNameElements pQualifiedName;
	private QualifiedNameWithWildCardElements pQualifiedNameWithWildCard;
	private ImportElements pImport;
	private VersionSwitchElements pVersionSwitch;
	private VersionSwitchTypeElements unknownRuleVersionSwitchType;
	private LanguageElements unknownRuleLanguage;
	private ResourceTextElements pResourceText;
	private LookupElements pLookup;
	private LDPElements pLDP;
	private TaggedTextElements pTaggedText;
	private InfoElements pInfo;
	private InfoElementTypeElements pInfoElementType;
	private DateElements pDate;
	private PrefaceElements pPreface;
	private PrefaceElementTypeElements pPrefaceElementType;
	private SectionElements pSection;
	private SectionElementTypeElements pSectionElementType;
	private LdpTypeElements pLdpType;
	private AllElements pAll;
	private GenDateElements pGenDate;
	private GenYearElements pGenYear;
	private MCDElements pMCD;
	private MOWElements pMOW;
	private NOPElements pNOP;
	private DOMElements pDOM;
	private DOPElements pDOP;
	private DOWNElements pDOWN;
	private DOWTElements pDOWT;
	private EOWElements pEOW;
	private SAECElements pSAEC;
	private SOLElements pSOL;
	private DOLElements pDOL;
	private WOLCElements pWOLC;
	private WDOLCElements pWDOLC;
	private SBTElements pSBT;
	private TemplateFragmentElements pTemplateFragment;
	private PrefaceFragmentElements pPrefaceFragment;
	private SectionFragmentElements pSectionFragment;
	private BreakElements pBreak;
	private BreakTypeElements unknownRuleBreakType;
	private PageNumberElements pPageNumber;
	private PassThroughHtmlElements pPassThroughHtml;
	private PassThroughPdfElements pPassThroughPdf;
	private TitleElements pTitle;
	private SubTitleElements pSubTitle;
	private ParagraphElements pParagraph;
	private BlockElements pBlock;
	private HymnElements pHymn;
	private MediaElements pMedia;
	private VerseElements pVerse;
	private ActorElements pActor;
	private RubricElements pRubric;
	private DialogElements pDialog;
	private ReadingElements pReading;
	private Heading1Elements pHeading1;
	private Heading2Elements pHeading2;
	private Heading3Elements pHeading3;
	private ElementTypeElements pElementType;
	private AidElements pAid;
	private VersionElements pVersion;
	private LitBookElements pLitBook;
	private SetLocaleElements pSetLocale;
	private RestoreLocaleElements pRestoreLocale;
	private TemplateStatusesElements unknownRuleTemplateStatuses;
	private NullElements unknownRuleNull;
	private ModeTypesElements unknownRuleModeTypes;
	private DowTypesElements unknownRuleDowTypes;
	private BookTypesElements unknownRuleBookTypes;
	private SeasonsElements unknownRuleSeasons;
	private DayOfMonthTypesElements unknownRuleDayOfMonthTypes;
	private WhenDateElements pWhenDate;
	private WhenDateCaseElements pWhenDateCase;
	private AbstractDateCaseElements pAbstractDateCase;
	private DateRangeElements pDateRange;
	private DateSetElements pDateSet;
	private WhenDayNameElements pWhenDayName;
	private WhenDayNameCaseElements pWhenDayNameCase;
	private AbstractDayNameCaseElements pAbstractDayNameCase;
	private DayNameRangeElements pDayNameRange;
	private DayNameSetElements pDayNameSet;
	private PeriodTypeElements unknownRulePeriodType;
	private WhenPentecostarionDayElements pWhenPentecostarionDay;
	private WhenTriodionDayElements pWhenTriodionDay;
	private WhenMovableCycleDayElements pWhenMovableCycleDay;
	private WhenSundayAfterElevationOfCrossDayElements pWhenSundayAfterElevationOfCrossDay;
	private WhenLukanCycleDayElements pWhenLukanCycleDay;
	private WhenPaschaElements pWhenPascha;
	private WhenOtherElements pWhenOther;
	private WhenPeriodCaseElements pWhenPeriodCase;
	private AbstractDayCaseElements pAbstractDayCase;
	private DayRangeElements pDayRange;
	private DaySetElements pDaySet;
	private WhenModeOfWeekElements pWhenModeOfWeek;
	private WhenModeOfWeekCaseElements pWhenModeOfWeekCase;
	private ModeOfWeekSetElements pModeOfWeekSet;
	private WhenSundaysBeforeTriodionElements pWhenSundaysBeforeTriodion;
	private SundaysBeforeTriodionCaseElements pSundaysBeforeTriodionCase;
	private DayOfWeekElements unknownRuleDayOfWeek;
	private MonthNameElements unknownRuleMonthName;
	private WhenExistsElements pWhenExists;
	private WhenExistsCaseElements pWhenExistsCase;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public AtemGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("net.ages.workbench.templates.dsl.Atem".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	/// *
	// * Note: there is a limit to the number of rules you can have.  If you add new ones
	// * and suddenly get errors you can't explain, it might be that you added too many rules.
	// * / AtemModel:
	//	"Template" name=QualifiedName dsl_Template_Status=TemplateStatus? imports+=Import* dsl_Template_Driver=Driver?
	//	dsl_Template_head=Head? dsl_Template_preface=Preface? dsl_Template_components+=AbstractComponent* "End-Template";
	public AtemModelElements getAtemModelAccess() {
		return (pAtemModel != null) ? pAtemModel : (pAtemModel = new AtemModelElements());
	}
	
	public ParserRule getAtemModelRule() {
		return getAtemModelAccess().getRule();
	}

	//Head:
	//	"Head" dsl_Head_components+=HeadComponent+ "End_Head";
	public HeadElements getHeadAccess() {
		return (pHead != null) ? pHead : (pHead = new HeadElements());
	}
	
	public ParserRule getHeadRule() {
		return getHeadAccess().getRule();
	}

	//HeadComponent:
	//	Commemoration | Date | PageHeaderEven | PageHeaderOdd | PageFooterEven | PageFooterOdd | PageKeepWithNext | PageNumber
	//	| TemplateTitle;
	public HeadComponentElements getHeadComponentAccess() {
		return (pHeadComponent != null) ? pHeadComponent : (pHeadComponent = new HeadComponentElements());
	}
	
	public ParserRule getHeadComponentRule() {
		return getHeadComponentAccess().getRule();
	}

	//Driver:
	//	"Generation_Driver" "Service_Regular_Expression" dsl_Driver_RegEx=STRING ("Service_Status"
	//	dsl_Driver_Status=TemplateStatuses)? "End_Generation_Driver";
	public DriverElements getDriverAccess() {
		return (pDriver != null) ? pDriver : (pDriver = new DriverElements());
	}
	
	public ParserRule getDriverRule() {
		return getDriverAccess().getRule();
	}

	//TemplateTitle:
	//	"Template_Title" dsl_TemplateTitle_Elements+=HeaderFooterFragment+ "End_Title";
	public TemplateTitleElements getTemplateTitleAccess() {
		return (pTemplateTitle != null) ? pTemplateTitle : (pTemplateTitle = new TemplateTitleElements());
	}
	
	public ParserRule getTemplateTitleRule() {
		return getTemplateTitleAccess().getRule();
	}

	//PageKeepWithNext:
	//	"Page_Keep_With_Next" dsl_PageKeepWithNext_value=STRING "End_Page_Keep_With_Next";
	public PageKeepWithNextElements getPageKeepWithNextAccess() {
		return (pPageKeepWithNext != null) ? pPageKeepWithNext : (pPageKeepWithNext = new PageKeepWithNextElements());
	}
	
	public ParserRule getPageKeepWithNextRule() {
		return getPageKeepWithNextAccess().getRule();
	}

	//PageHeaderEven:
	//	"Page_Header_Even" dsl_PageHeader_columns+=HeaderFooterColumn+ "End_Page_Header_Even";
	public PageHeaderEvenElements getPageHeaderEvenAccess() {
		return (pPageHeaderEven != null) ? pPageHeaderEven : (pPageHeaderEven = new PageHeaderEvenElements());
	}
	
	public ParserRule getPageHeaderEvenRule() {
		return getPageHeaderEvenAccess().getRule();
	}

	//PageHeaderOdd:
	//	"Page_Header_Odd" dsl_PageHeader_columns+=HeaderFooterColumn+ "End_Page_Header_Odd";
	public PageHeaderOddElements getPageHeaderOddAccess() {
		return (pPageHeaderOdd != null) ? pPageHeaderOdd : (pPageHeaderOdd = new PageHeaderOddElements());
	}
	
	public ParserRule getPageHeaderOddRule() {
		return getPageHeaderOddAccess().getRule();
	}

	//PageFooterEven:
	//	"Page_Footer_Even" dsl_PageHeader_columns+=HeaderFooterColumn+ "End_Page_Footer_Even";
	public PageFooterEvenElements getPageFooterEvenAccess() {
		return (pPageFooterEven != null) ? pPageFooterEven : (pPageFooterEven = new PageFooterEvenElements());
	}
	
	public ParserRule getPageFooterEvenRule() {
		return getPageFooterEvenAccess().getRule();
	}

	//PageFooterOdd:
	//	"Page_Footer_Odd" dsl_PageHeader_columns+=HeaderFooterColumn+ "End_Page_Footer_Odd";
	public PageFooterOddElements getPageFooterOddAccess() {
		return (pPageFooterOdd != null) ? pPageFooterOdd : (pPageFooterOdd = new PageFooterOddElements());
	}
	
	public ParserRule getPageFooterOddRule() {
		return getPageFooterOddAccess().getRule();
	}

	//HeaderFooterColumn:
	//	HeaderFooterColumnLeft | HeaderFooterColumnCenter | HeaderFooterColumnRight;
	public HeaderFooterColumnElements getHeaderFooterColumnAccess() {
		return (pHeaderFooterColumn != null) ? pHeaderFooterColumn : (pHeaderFooterColumn = new HeaderFooterColumnElements());
	}
	
	public ParserRule getHeaderFooterColumnRule() {
		return getHeaderFooterColumnAccess().getRule();
	}

	//HeaderFooterColumnLeft:
	//	"left" dsl_HeaderFooterColumn_fragments+=HeaderFooterFragment+;
	public HeaderFooterColumnLeftElements getHeaderFooterColumnLeftAccess() {
		return (pHeaderFooterColumnLeft != null) ? pHeaderFooterColumnLeft : (pHeaderFooterColumnLeft = new HeaderFooterColumnLeftElements());
	}
	
	public ParserRule getHeaderFooterColumnLeftRule() {
		return getHeaderFooterColumnLeftAccess().getRule();
	}

	//HeaderFooterColumnCenter:
	//	"center" dsl_HeaderFooterColumn_fragments+=HeaderFooterFragment+;
	public HeaderFooterColumnCenterElements getHeaderFooterColumnCenterAccess() {
		return (pHeaderFooterColumnCenter != null) ? pHeaderFooterColumnCenter : (pHeaderFooterColumnCenter = new HeaderFooterColumnCenterElements());
	}
	
	public ParserRule getHeaderFooterColumnCenterRule() {
		return getHeaderFooterColumnCenterAccess().getRule();
	}

	//HeaderFooterColumnRight:
	//	"right" dsl_HeaderFooterColumn_fragments+=HeaderFooterFragment+;
	public HeaderFooterColumnRightElements getHeaderFooterColumnRightAccess() {
		return (pHeaderFooterColumnRight != null) ? pHeaderFooterColumnRight : (pHeaderFooterColumnRight = new HeaderFooterColumnRightElements());
	}
	
	public ParserRule getHeaderFooterColumnRightRule() {
		return getHeaderFooterColumnRightAccess().getRule();
	}

	//HeaderFooterFragment:
	//	HeaderFooterText | HeaderFooterDate | HeaderFooterPageNumber | HeaderFooterLookup | HeaderFooterTitle |
	//	HeaderFooterCommemoration;
	public HeaderFooterFragmentElements getHeaderFooterFragmentAccess() {
		return (pHeaderFooterFragment != null) ? pHeaderFooterFragment : (pHeaderFooterFragment = new HeaderFooterFragmentElements());
	}
	
	public ParserRule getHeaderFooterFragmentRule() {
		return getHeaderFooterFragmentAccess().getRule();
	}

	//HeaderFooterText:
	//	"@text" dsl_HeaderFooterText=STRING;
	public HeaderFooterTextElements getHeaderFooterTextAccess() {
		return (pHeaderFooterText != null) ? pHeaderFooterText : (pHeaderFooterText = new HeaderFooterTextElements());
	}
	
	public ParserRule getHeaderFooterTextRule() {
		return getHeaderFooterTextAccess().getRule();
	}

	//HeaderFooterDate:
	//	dsl_HeaderFooterDate?="@date" ("lang" dsl_HeaderFooterDate_Language=Language)?;
	public HeaderFooterDateElements getHeaderFooterDateAccess() {
		return (pHeaderFooterDate != null) ? pHeaderFooterDate : (pHeaderFooterDate = new HeaderFooterDateElements());
	}
	
	public ParserRule getHeaderFooterDateRule() {
		return getHeaderFooterDateAccess().getRule();
	}

	//HeaderFooterPageNumber:
	//	dsl_HeaderFooterPageNumber?="@pageNbr";
	public HeaderFooterPageNumberElements getHeaderFooterPageNumberAccess() {
		return (pHeaderFooterPageNumber != null) ? pHeaderFooterPageNumber : (pHeaderFooterPageNumber = new HeaderFooterPageNumberElements());
	}
	
	public ParserRule getHeaderFooterPageNumberRule() {
		return getHeaderFooterPageNumberAccess().getRule();
	}

	//HeaderFooterLookup:
	//	"@lookup" dsl_HeaderFooterLookup_Elements+=ElementType* "lang" dsl_HeaderFooterLookup_Language=Language;
	public HeaderFooterLookupElements getHeaderFooterLookupAccess() {
		return (pHeaderFooterLookup != null) ? pHeaderFooterLookup : (pHeaderFooterLookup = new HeaderFooterLookupElements());
	}
	
	public ParserRule getHeaderFooterLookupRule() {
		return getHeaderFooterLookupAccess().getRule();
	}

	//HeaderFooterTitle:
	//	dsl_HeaderFooterTitle?="@title";
	public HeaderFooterTitleElements getHeaderFooterTitleAccess() {
		return (pHeaderFooterTitle != null) ? pHeaderFooterTitle : (pHeaderFooterTitle = new HeaderFooterTitleElements());
	}
	
	public ParserRule getHeaderFooterTitleRule() {
		return getHeaderFooterTitleAccess().getRule();
	}

	//HeaderFooterCommemoration:
	//	dsl_HeaderFooterCommemoration?="@commemoration";
	public HeaderFooterCommemorationElements getHeaderFooterCommemorationAccess() {
		return (pHeaderFooterCommemoration != null) ? pHeaderFooterCommemoration : (pHeaderFooterCommemoration = new HeaderFooterCommemorationElements());
	}
	
	public ParserRule getHeaderFooterCommemorationRule() {
		return getHeaderFooterCommemorationAccess().getRule();
	}

	//Commemoration:
	//	"Template_Commemoration" dsl_Commemoration_Elements+=HeaderFooterFragment+ "End_Template_Commemoration";
	public CommemorationElements getCommemorationAccess() {
		return (pCommemoration != null) ? pCommemoration : (pCommemoration = new CommemorationElements());
	}
	
	public ParserRule getCommemorationRule() {
		return getCommemorationAccess().getRule();
	}

	//TemplateStatus:
	//	"Status" dsl_TemplateStatus=TemplateStatuses;
	public TemplateStatusElements getTemplateStatusAccess() {
		return (pTemplateStatus != null) ? pTemplateStatus : (pTemplateStatus = new TemplateStatusElements());
	}
	
	public ParserRule getTemplateStatusRule() {
		return getTemplateStatusAccess().getRule();
	}

	//AbstractComponent:
	//	Actor //	| Condition
	//	//	| IfStatement
	//	//	| WhenCondition
	//	| Aid | Block | Break | Dialog | Title | Heading1 | Heading2 | Heading3 | Hymn | Media | Info | LitBook | Paragraph |
	//	PassThroughHtml | PassThroughPdf | Reading | RestoreLocale | Rubric | Section | SectionFragment | SetLocale |
	//	TemplateFragment | SubTitle | Verse | Version | VersionSwitch | WhenDate | WhenDayName | WhenExists |
	//	WhenLukanCycleDay | WhenModeOfWeek | WhenPascha | WhenMovableCycleDay | WhenPentecostarionDay |
	//	WhenSundayAfterElevationOfCrossDay | WhenTriodionDay | WhenSundaysBeforeTriodion;
	public AbstractComponentElements getAbstractComponentAccess() {
		return (pAbstractComponent != null) ? pAbstractComponent : (pAbstractComponent = new AbstractComponentElements());
	}
	
	public ParserRule getAbstractComponentRule() {
		return getAbstractComponentAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//QualifiedNameWithWildCard:
	//	QualifiedName ".*"?;
	public QualifiedNameWithWildCardElements getQualifiedNameWithWildCardAccess() {
		return (pQualifiedNameWithWildCard != null) ? pQualifiedNameWithWildCard : (pQualifiedNameWithWildCard = new QualifiedNameWithWildCardElements());
	}
	
	public ParserRule getQualifiedNameWithWildCardRule() {
		return getQualifiedNameWithWildCardAccess().getRule();
	}

	//Import:
	//	"import" importedNamespace=QualifiedNameWithWildCard;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//VersionSwitch:
	//	"Switch-Version" dsl_VersionSwitch_flag=VersionSwitchType "End-Switch-Version";
	public VersionSwitchElements getVersionSwitchAccess() {
		return (pVersionSwitch != null) ? pVersionSwitch : (pVersionSwitch = new VersionSwitchElements());
	}
	
	public ParserRule getVersionSwitchRule() {
		return getVersionSwitchAccess().getRule();
	}

	//enum VersionSwitchType:
	//	L1 | L2 | Both;
	public VersionSwitchTypeElements getVersionSwitchTypeAccess() {
		return (unknownRuleVersionSwitchType != null) ? unknownRuleVersionSwitchType : (unknownRuleVersionSwitchType = new VersionSwitchTypeElements());
	}
	
	public EnumRule getVersionSwitchTypeRule() {
		return getVersionSwitchTypeAccess().getRule();
	}

	//enum Language:
	//	L1 | L2;
	public LanguageElements getLanguageAccess() {
		return (unknownRuleLanguage != null) ? unknownRuleLanguage : (unknownRuleLanguage = new LanguageElements());
	}
	
	public EnumRule getLanguageRule() {
		return getLanguageAccess().getRule();
	}

	//ResourceText:
	//	"sid" dsl_ResourceTextRef=[def::Definition|QualifiedName] dsl_ResourceText_Media_Off?="media-off"?;
	public ResourceTextElements getResourceTextAccess() {
		return (pResourceText != null) ? pResourceText : (pResourceText = new ResourceTextElements());
	}
	
	public ParserRule getResourceTextRule() {
		return getResourceTextAccess().getRule();
	}

	//Lookup:
	//	"rid" dsl_ResourceTextRef=[def::Definition|QualifiedName] dsl_Lookup_Media_Off?="media-off"?
	//	(dsl_Lookup_Override_Mode_Set?="@mode" dsl_Lookup_OverrideMode=ModeTypes)? (dsl_Lookup_Override__Day_Set?="@day"
	//	dsl_Lookup_OverrideDay=DowTypes)?;
	public LookupElements getLookupAccess() {
		return (pLookup != null) ? pLookup : (pLookup = new LookupElements());
	}
	
	public ParserRule getLookupRule() {
		return getLookupAccess().getRule();
	}

	//LDP:
	//	"ldp" dsl_LDP+=LdpType*;
	public LDPElements getLDPAccess() {
		return (pLDP != null) ? pLDP : (pLDP = new LDPElements());
	}
	
	public ParserRule getLDPRule() {
		return getLDPAccess().getRule();
	}

	//TaggedText:
	//	"<" dsl_TaggedText_tag=[def::Definition|QualifiedName] ">" dsl_TaggedText+=ElementType* "</>";
	public TaggedTextElements getTaggedTextAccess() {
		return (pTaggedText != null) ? pTaggedText : (pTaggedText = new TaggedTextElements());
	}
	
	public ParserRule getTaggedTextRule() {
		return getTaggedTextAccess().getRule();
	}

	//Info:
	//	"Info" name=ID dsl_Info_Elements+=InfoElementType* "End-Info";
	public InfoElements getInfoAccess() {
		return (pInfo != null) ? pInfo : (pInfo = new InfoElements());
	}
	
	public ParserRule getInfoRule() {
		return getInfoAccess().getRule();
	}

	//InfoElementType:
	//	VersionSwitch | Block | Paragraph | SubTitle | Title;
	public InfoElementTypeElements getInfoElementTypeAccess() {
		return (pInfoElementType != null) ? pInfoElementType : (pInfoElementType = new InfoElementTypeElements());
	}
	
	public ParserRule getInfoElementTypeRule() {
		return getInfoElementTypeAccess().getRule();
	}

	//Date:
	//	"Set_Date" "month" dsl_Date_month=INT "day" dsl_Date_day=INT ("year" dsl_Date_year=INT)? "End_Date";
	public DateElements getDateAccess() {
		return (pDate != null) ? pDate : (pDate = new DateElements());
	}
	
	public ParserRule getDateRule() {
		return getDateAccess().getRule();
	}

	//Preface:
	//	"Preface" name=ID dsl_Preface_Elements+=PrefaceElementType* "End-Preface";
	public PrefaceElements getPrefaceAccess() {
		return (pPreface != null) ? pPreface : (pPreface = new PrefaceElements());
	}
	
	public ParserRule getPrefaceRule() {
		return getPrefaceAccess().getRule();
	}

	//PrefaceElementType:
	//	VersionSwitch | Block | Paragraph | Section | SectionFragment | SubTitle | TemplateFragment | Title;
	public PrefaceElementTypeElements getPrefaceElementTypeAccess() {
		return (pPrefaceElementType != null) ? pPrefaceElementType : (pPrefaceElementType = new PrefaceElementTypeElements());
	}
	
	public ParserRule getPrefaceElementTypeRule() {
		return getPrefaceElementTypeAccess().getRule();
	}

	//Section:
	//	"Section" name=ID ("role" dsl_Section_Role=[def::Definition|QualifiedName])? dsl_Section_Elements+=SectionElementType*
	//	"End-Section";
	public SectionElements getSectionAccess() {
		return (pSection != null) ? pSection : (pSection = new SectionElements());
	}
	
	public ParserRule getSectionRule() {
		return getSectionAccess().getRule();
	}

	//SectionElementType:
	//	Actor //	| Condition
	//	//	| Rule 
	//	//	| WhenCondition
	//	| Block | Break | Date | Dialog | Heading1 | Heading2 | Heading3 | Hymn | Media | Paragraph | PassThroughHtml |
	//	PassThroughPdf | Reading | RestoreLocale | Rubric | Section | SectionFragment | SetLocale | TemplateFragment | Title |
	//	SubTitle | Verse | WhenDate | WhenDayName | WhenExists | WhenLukanCycleDay | WhenModeOfWeek | WhenMovableCycleDay |
	//	WhenPascha | WhenPentecostarionDay | WhenSundayAfterElevationOfCrossDay | WhenTriodionDay | WhenSundaysBeforeTriodion;
	public SectionElementTypeElements getSectionElementTypeAccess() {
		return (pSectionElementType != null) ? pSectionElementType : (pSectionElementType = new SectionElementTypeElements());
	}
	
	public ParserRule getSectionElementTypeRule() {
		return getSectionElementTypeAccess().getRule();
	}

	//LdpType:
	//	DOM | DOWN | DOWT | EOW | All | GenDate | GenYear | MCD | MOW | NOP | DOP | SAEC | SOL | DOL | WOLC | WDOLC | SBT;
	public LdpTypeElements getLdpTypeAccess() {
		return (pLdpType != null) ? pLdpType : (pLdpType = new LdpTypeElements());
	}
	
	public ParserRule getLdpTypeRule() {
		return getLdpTypeAccess().getRule();
	}

	//All:
	//	dsl_Display_LiturgicalDayProperties?="@All_Liturgical_Day_Properties";
	public AllElements getAllAccess() {
		return (pAll != null) ? pAll : (pAll = new AllElements());
	}
	
	public ParserRule getAllRule() {
		return getAllAccess().getRule();
	}

	//GenDate:
	//	dsl_Display_Date?="@Service_Date";
	public GenDateElements getGenDateAccess() {
		return (pGenDate != null) ? pGenDate : (pGenDate = new GenDateElements());
	}
	
	public ParserRule getGenDateRule() {
		return getGenDateAccess().getRule();
	}

	//GenYear:
	//	dsl_Display_Year?="@Service_Year";
	public GenYearElements getGenYearAccess() {
		return (pGenYear != null) ? pGenYear : (pGenYear = new GenYearElements());
	}
	
	public ParserRule getGenYearRule() {
		return getGenYearAccess().getRule();
	}

	//MCD:
	//	dsl_MCD_value?="@Day_of_Movable_Cycle";
	public MCDElements getMCDAccess() {
		return (pMCD != null) ? pMCD : (pMCD = new MCDElements());
	}
	
	public ParserRule getMCDRule() {
		return getMCDAccess().getRule();
	}

	//MOW:
	//	dsl_Display_Mode?="@Mode_of_Week";
	public MOWElements getMOWAccess() {
		return (pMOW != null) ? pMOW : (pMOW = new MOWElements());
	}
	
	public ParserRule getMOWRule() {
		return getMOWAccess().getRule();
	}

	//NOP:
	//	dsl_Display_Mode?="@Name_of_Period";
	public NOPElements getNOPAccess() {
		return (pNOP != null) ? pNOP : (pNOP = new NOPElements());
	}
	
	public ParserRule getNOPRule() {
		return getNOPAccess().getRule();
	}

	//DOM:
	//	dsl_Display_Mode?="@Day_of_Month";
	public DOMElements getDOMAccess() {
		return (pDOM != null) ? pDOM : (pDOM = new DOMElements());
	}
	
	public ParserRule getDOMRule() {
		return getDOMAccess().getRule();
	}

	//DOP:
	//	dsl_Display_Mode?="@Day_of_Period";
	public DOPElements getDOPAccess() {
		return (pDOP != null) ? pDOP : (pDOP = new DOPElements());
	}
	
	public ParserRule getDOPRule() {
		return getDOPAccess().getRule();
	}

	//DOWN:
	//	dsl_Display_Mode?="@Day_of_Week_As_Number";
	public DOWNElements getDOWNAccess() {
		return (pDOWN != null) ? pDOWN : (pDOWN = new DOWNElements());
	}
	
	public ParserRule getDOWNRule() {
		return getDOWNAccess().getRule();
	}

	//DOWT:
	//	dsl_Display_Mode?="@Day_of_Week_As_Text";
	public DOWTElements getDOWTAccess() {
		return (pDOWT != null) ? pDOWT : (pDOWT = new DOWTElements());
	}
	
	public ParserRule getDOWTRule() {
		return getDOWTAccess().getRule();
	}

	//EOW:
	//	dsl_Display_Eothinon?="@Eothinon";
	public EOWElements getEOWAccess() {
		return (pEOW != null) ? pEOW : (pEOW = new EOWElements());
	}
	
	public ParserRule getEOWRule() {
		return getEOWAccess().getRule();
	}

	//SAEC:
	//	dsl_Display_SundayAfterElevationCross?="@Sunday_After_Elevation_Cross_Date";
	public SAECElements getSAECAccess() {
		return (pSAEC != null) ? pSAEC : (pSAEC = new SAECElements());
	}
	
	public ParserRule getSAECRule() {
		return getSAECAccess().getRule();
	}

	//SOL:
	//	dsl_Display_StartLukan?="@Lukan_Cycle_Start_Date";
	public SOLElements getSOLAccess() {
		return (pSOL != null) ? pSOL : (pSOL = new SOLElements());
	}
	
	public ParserRule getSOLRule() {
		return getSOLAccess().getRule();
	}

	//DOL:
	//	dsl_Display_DayLukan?="@Lukan_Cycle_Elapsed_Days";
	public DOLElements getDOLAccess() {
		return (pDOL != null) ? pDOL : (pDOL = new DOLElements());
	}
	
	public ParserRule getDOLRule() {
		return getDOLAccess().getRule();
	}

	//WOLC:
	//	dsl_Display_DayLukan?="@Lukan_Cycle_Week";
	public WOLCElements getWOLCAccess() {
		return (pWOLC != null) ? pWOLC : (pWOLC = new WOLCElements());
	}
	
	public ParserRule getWOLCRule() {
		return getWOLCAccess().getRule();
	}

	//WDOLC:
	//	dsl_Display_DayLukan?="@Lukan_Cycle_Week_Day";
	public WDOLCElements getWDOLCAccess() {
		return (pWDOLC != null) ? pWDOLC : (pWDOLC = new WDOLCElements());
	}
	
	public ParserRule getWDOLCRule() {
		return getWDOLCAccess().getRule();
	}

	//SBT:
	//	dsl_Display_SundaysBeforeTriodion?="@Sundays_Before_Triodion";
	public SBTElements getSBTAccess() {
		return (pSBT != null) ? pSBT : (pSBT = new SBTElements());
	}
	
	public ParserRule getSBTRule() {
		return getSBTAccess().getRule();
	}

	//TemplateFragment:
	//	"Insert_template" name=[AtemModel|QualifiedName] "End-Insert";
	public TemplateFragmentElements getTemplateFragmentAccess() {
		return (pTemplateFragment != null) ? pTemplateFragment : (pTemplateFragment = new TemplateFragmentElements());
	}
	
	public ParserRule getTemplateFragmentRule() {
		return getTemplateFragmentAccess().getRule();
	}

	//PrefaceFragment:
	//	"Insert_preface" name=[Preface|QualifiedName] "End-Insert";
	public PrefaceFragmentElements getPrefaceFragmentAccess() {
		return (pPrefaceFragment != null) ? pPrefaceFragment : (pPrefaceFragment = new PrefaceFragmentElements());
	}
	
	public ParserRule getPrefaceFragmentRule() {
		return getPrefaceFragmentAccess().getRule();
	}

	//SectionFragment:
	//	"Insert_section" name=[Section|QualifiedName] "End-Insert";
	public SectionFragmentElements getSectionFragmentAccess() {
		return (pSectionFragment != null) ? pSectionFragment : (pSectionFragment = new SectionFragmentElements());
	}
	
	public ParserRule getSectionFragmentRule() {
		return getSectionFragmentAccess().getRule();
	}

	//Break:
	//	"Break" dsl_break_type=BreakType "End_Break";
	public BreakElements getBreakAccess() {
		return (pBreak != null) ? pBreak : (pBreak = new BreakElements());
	}
	
	public ParserRule getBreakRule() {
		return getBreakAccess().getRule();
	}

	//enum BreakType:
	//	line | page;
	public BreakTypeElements getBreakTypeAccess() {
		return (unknownRuleBreakType != null) ? unknownRuleBreakType : (unknownRuleBreakType = new BreakTypeElements());
	}
	
	public EnumRule getBreakTypeRule() {
		return getBreakTypeAccess().getRule();
	}

	//PageNumber:
	//	"Set_Page_Number" dsl_PageNumber_value=INT "End_Set_Page_Number";
	public PageNumberElements getPageNumberAccess() {
		return (pPageNumber != null) ? pPageNumber : (pPageNumber = new PageNumberElements());
	}
	
	public ParserRule getPageNumberRule() {
		return getPageNumberAccess().getRule();
	}

	//PassThroughHtml:
	//	"Passthrough-Html" dsl_Passthrough_html_text=STRING "END-Passthrough-Html";
	public PassThroughHtmlElements getPassThroughHtmlAccess() {
		return (pPassThroughHtml != null) ? pPassThroughHtml : (pPassThroughHtml = new PassThroughHtmlElements());
	}
	
	public ParserRule getPassThroughHtmlRule() {
		return getPassThroughHtmlAccess().getRule();
	}

	//PassThroughPdf:
	//	"Passthrough-Html" dsl_Passthrough_pdf_text=STRING "END-Passthrough-Pdf";
	public PassThroughPdfElements getPassThroughPdfAccess() {
		return (pPassThroughPdf != null) ? pPassThroughPdf : (pPassThroughPdf = new PassThroughPdfElements());
	}
	
	public ParserRule getPassThroughPdfRule() {
		return getPassThroughPdfAccess().getRule();
	}

	//Title:
	//	"Title" ("role" dsl_Title_Role=[def::Definition|QualifiedName])? dsl_Elements+=ElementType* "End-Title";
	public TitleElements getTitleAccess() {
		return (pTitle != null) ? pTitle : (pTitle = new TitleElements());
	}
	
	public ParserRule getTitleRule() {
		return getTitleAccess().getRule();
	}

	//SubTitle:
	//	"Sub-Title" ("role" dsl_SubTitle_Role=[def::Definition|QualifiedName])? dsl_Elements+=ElementType* "End-Sub-Title";
	public SubTitleElements getSubTitleAccess() {
		return (pSubTitle != null) ? pSubTitle : (pSubTitle = new SubTitleElements());
	}
	
	public ParserRule getSubTitleRule() {
		return getSubTitleAccess().getRule();
	}

	//Paragraph:
	//	"Para" ("role" dsl_Para_Role=[def::Definition|QualifiedName])? dsl_Elements+=ElementType* "End-Para";
	public ParagraphElements getParagraphAccess() {
		return (pParagraph != null) ? pParagraph : (pParagraph = new ParagraphElements());
	}
	
	public ParserRule getParagraphRule() {
		return getParagraphAccess().getRule();
	}

	//Block:
	//	"bTag" dsl_Block_Role=[def::Definition|QualifiedName] dsl_Elements+=ElementType* "End-bTag";
	public BlockElements getBlockAccess() {
		return (pBlock != null) ? pBlock : (pBlock = new BlockElements());
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}

	//Hymn:
	//	"Hymn" dsl_Elements+=ElementType* "End-Hymn";
	public HymnElements getHymnAccess() {
		return (pHymn != null) ? pHymn : (pHymn = new HymnElements());
	}
	
	public ParserRule getHymnRule() {
		return getHymnAccess().getRule();
	}

	//Media:
	//	"Media" dsl_Elements+=ElementType* "End-Media";
	public MediaElements getMediaAccess() {
		return (pMedia != null) ? pMedia : (pMedia = new MediaElements());
	}
	
	public ParserRule getMediaRule() {
		return getMediaAccess().getRule();
	}

	//Verse:
	//	"Verse" dsl_Elements+=ElementType* "End-Verse";
	public VerseElements getVerseAccess() {
		return (pVerse != null) ? pVerse : (pVerse = new VerseElements());
	}
	
	public ParserRule getVerseRule() {
		return getVerseAccess().getRule();
	}

	//Actor:
	//	"Actor" dsl_Elements+=ElementType* "End-Actor";
	public ActorElements getActorAccess() {
		return (pActor != null) ? pActor : (pActor = new ActorElements());
	}
	
	public ParserRule getActorRule() {
		return getActorAccess().getRule();
	}

	//Rubric:
	//	"Rubric" dsl_Elements+=ElementType* "End-Rubric";
	public RubricElements getRubricAccess() {
		return (pRubric != null) ? pRubric : (pRubric = new RubricElements());
	}
	
	public ParserRule getRubricRule() {
		return getRubricAccess().getRule();
	}

	//Dialog:
	//	"Dialog" dsl_Elements+=ElementType* "End-Dialog";
	public DialogElements getDialogAccess() {
		return (pDialog != null) ? pDialog : (pDialog = new DialogElements());
	}
	
	public ParserRule getDialogRule() {
		return getDialogAccess().getRule();
	}

	//Reading:
	//	"Reading" dsl_Elements+=ElementType* "End-Reading";
	public ReadingElements getReadingAccess() {
		return (pReading != null) ? pReading : (pReading = new ReadingElements());
	}
	
	public ParserRule getReadingRule() {
		return getReadingAccess().getRule();
	}

	//Heading1:
	//	"Heading_1" dsl_Elements+=ElementType* "End_Heading_1";
	public Heading1Elements getHeading1Access() {
		return (pHeading1 != null) ? pHeading1 : (pHeading1 = new Heading1Elements());
	}
	
	public ParserRule getHeading1Rule() {
		return getHeading1Access().getRule();
	}

	//Heading2:
	//	"Heading_2" dsl_Elements+=ElementType* "End_Heading_2";
	public Heading2Elements getHeading2Access() {
		return (pHeading2 != null) ? pHeading2 : (pHeading2 = new Heading2Elements());
	}
	
	public ParserRule getHeading2Rule() {
		return getHeading2Access().getRule();
	}

	//Heading3:
	//	"Heading_3" dsl_Elements+=ElementType* "End_Heading_3";
	public Heading3Elements getHeading3Access() {
		return (pHeading3 != null) ? pHeading3 : (pHeading3 = new Heading3Elements());
	}
	
	public ParserRule getHeading3Rule() {
		return getHeading3Access().getRule();
	}

	//ElementType:
	//	ResourceText | TaggedText | Lookup | LDP;
	public ElementTypeElements getElementTypeAccess() {
		return (pElementType != null) ? pElementType : (pElementType = new ElementTypeElements());
	}
	
	public ParserRule getElementTypeRule() {
		return getElementTypeAccess().getRule();
	}

	//Aid:
	//	"AGES_ID" name=QualifiedName;
	public AidElements getAidAccess() {
		return (pAid != null) ? pAid : (pAid = new AidElements());
	}
	
	public ParserRule getAidRule() {
		return getAidAccess().getRule();
	}

	//Version:
	//	"Version" name=QualifiedName;
	public VersionElements getVersionAccess() {
		return (pVersion != null) ? pVersion : (pVersion = new VersionElements());
	}
	
	public ParserRule getVersionRule() {
		return getVersionAccess().getRule();
	}

	//LitBook:
	//	"LiturgicalBook" name=QualifiedName;
	public LitBookElements getLitBookAccess() {
		return (pLitBook != null) ? pLitBook : (pLitBook = new LitBookElements());
	}
	
	public ParserRule getLitBookRule() {
		return getLitBookAccess().getRule();
	}

	//SetLocale:
	//	"Set_Locale" "locale_1" dsl_SetLocale_V1=STRING "locale_2" dsl_SetLocale_V2=STRING "End_Set_Locale";
	public SetLocaleElements getSetLocaleAccess() {
		return (pSetLocale != null) ? pSetLocale : (pSetLocale = new SetLocaleElements());
	}
	
	public ParserRule getSetLocaleRule() {
		return getSetLocaleAccess().getRule();
	}

	//RestoreLocale:
	//	dsl_RestoreLocale?="@restoreLocale";
	public RestoreLocaleElements getRestoreLocaleAccess() {
		return (pRestoreLocale != null) ? pRestoreLocale : (pRestoreLocale = new RestoreLocaleElements());
	}
	
	public ParserRule getRestoreLocaleRule() {
		return getRestoreLocaleAccess().getRule();
	}

	//enum TemplateStatuses:
	//	NA | Draft | Review | Final;
	public TemplateStatusesElements getTemplateStatusesAccess() {
		return (unknownRuleTemplateStatuses != null) ? unknownRuleTemplateStatuses : (unknownRuleTemplateStatuses = new TemplateStatusesElements());
	}
	
	public EnumRule getTemplateStatusesRule() {
		return getTemplateStatusesAccess().getRule();
	}

	//enum Null:
	//	null;
	public NullElements getNullAccess() {
		return (unknownRuleNull != null) ? unknownRuleNull : (unknownRuleNull = new NullElements());
	}
	
	public EnumRule getNullRule() {
		return getNullAccess().getRule();
	}

	/// * 
	//WhenCondition:
	//'when-condition'
	//(dsl_WhenCondition_Cases+=WhenConditionCase)+
	//(dsl_WhenCondition_Other=WhenOther)?
	//'end-when'
	//;
	//
	//WhenConditionCase: dsl_WhenConditionCase=[Condition | QualifiedName] 'use:';
	//
	//Condition: 'Condition' name=QualifiedName  
	//	dsl_Condition_Cases+=AbstractCases*
	//'End-Condition'
	//;
	//AbstractCases: CaseAnyTrue | CaseAllTrue | CaseNoneTrue;
	//CaseAnyTrue: 'AnyCaseTrue' '(' anyCases+=Case (',' anyCases+=Case)* ')';
	//CaseAllTrue: 'AllCasesTrue' '(' allCases+=Case (',' allCases+=Case)* ')';
	//CaseNoneTrue: 'NoCaseTrue' '(' noCases+=Case (',' noCases+=Case)* ')';
	//
	//Case: 
	//	CaseDayOfMonth
	//	| Case_Pointer
	//	| CaseDaysAfterFeast 
	//	| CaseDaysBeforeFeast 
	//	| CaseExists
	//	| CaseFeastOf
	//	| CaseMonth
	//	| CaseModeOfWeek 
	//	| CaseDayOfSeason 
	//	| CaseSeason 
	//	| CaseWeekday
	//;
	//
	//Case_Pointer: name=[Condition | QualifiedName] ;
	//CaseSeason: "The_Season_is" dsl_CaseSeason=Seasons;
	//CaseDayOfMonth: 'Day_of_Month_is' dsl_CaseDayOfMonth=INT;
	//CaseDaysAfterFeast: 'Today_is' dsl_CaseDaysAfter_Count=INT 'days_after_feast' dsl_CaseDaysAfter_Event=[def::Definition | QualifiedName] ;
	//CaseDaysBeforeFeast: 'Today_is' dsl_CaseDaysBefore_Count=INT 'days_before_feast' dsl_CaseDaysBefore_Event=[def::Definition | QualifiedName] ;
	//CaseExists: 'Exists_rid' dsl_CaseExists_Ref=[def::Definition | QualifiedName];
	//CaseFeastOf: 'Today_is_feast_of' dsl_CaseDayOf_Event=[def::Definition | QualifiedName] ;
	//CaseModeOfWeek: 'Mode_of_the_week_is' dsl_CaseModeOfWeek_Mode=ModeTypes;
	//CaseDayOfSeason: 'Day_of_Season_is' dsl_CaseDayOfSeason_Season=INT;
	//CaseMonth: 'Month_is' dsl_CaseMonth=MonthName;
	//CaseWeekday: 'Day_of_Week_is' dsl_CaseDayOfWeek=DayOfWeek ;
	// * 
	// * / / *
	//IfStatement: 
	//'if ' dsl_IF_Condition+=[Rule | QualifiedName] ( ',' dsl_IF_Condition+=[Rule | QualifiedName])* 'then' 
	//	(dsl_IF_True_Actions+=AbstractComponent)*
	//('else' 
	//	(dsl_IF_False_Actions+=AbstractComponent)*
	//)? 
	//'end-if'
	//;
	//
	// * / enum ModeTypes:
	//	M1 | M2 | M3 | M4 | M5 | M6 | M7 | M8;
	public ModeTypesElements getModeTypesAccess() {
		return (unknownRuleModeTypes != null) ? unknownRuleModeTypes : (unknownRuleModeTypes = new ModeTypesElements());
	}
	
	public EnumRule getModeTypesRule() {
		return getModeTypesAccess().getRule();
	}

	//enum DowTypes:
	//	D1 | D2 | D3 | D4 | D5 | D6 | D7;
	public DowTypesElements getDowTypesAccess() {
		return (unknownRuleDowTypes != null) ? unknownRuleDowTypes : (unknownRuleDowTypes = new DowTypesElements());
	}
	
	public EnumRule getDowTypesRule() {
		return getDowTypesAccess().getRule();
	}

	//enum BookTypes:
	//	Octochechos | Menaion | Euchologion | Pentecostarion | Triodion | Horologion | Eothina | Heirmologion | Katavasias |
	//	Psalter | Lectionary | Other;
	public BookTypesElements getBookTypesAccess() {
		return (unknownRuleBookTypes != null) ? unknownRuleBookTypes : (unknownRuleBookTypes = new BookTypesElements());
	}
	
	public EnumRule getBookTypesRule() {
		return getBookTypesAccess().getRule();
	}

	//enum Seasons:
	//	Triodion | Pentecostarion | Nativity_Fast | Apostles_Fast | Dormition_Fast;
	public SeasonsElements getSeasonsAccess() {
		return (unknownRuleSeasons != null) ? unknownRuleSeasons : (unknownRuleSeasons = new SeasonsElements());
	}
	
	public EnumRule getSeasonsRule() {
		return getSeasonsAccess().getRule();
	}

	/// ** 
	//enum DayOfSeasonTypes: 
	//	  D01 | D02 | D03 | D04 | D05 | D06 | D07 | D08 | D09
	//	| D10 | D11 | D12 | D13 | D14 | D15 | D16 | D17 | D18 | D19
	//	| D20 | D21 | D22 | D23 | D24 | D25 | D26 | D27 | D28 | D29
	//	| D30 | D31 | D32 | D33 | D34 | D35 | D36 | D37 | D38 | D39
	//	| D40 | D41 | D42 | D43 | D44 | D45 | D46 | D47 | D48 | D49
	//	| D50 | D51 | D52 | D53 | D54 | D55 | D56 | D57 | D58| D59 
	//	| D60 | D61 | D62 | D63 | D64 | D65 | D66 | D67 | D68 | D69 
	//	| D70 
	//	;
	// ** / enum DayOfMonthTypes:
	//	D01 | D02 | D03 | D04 | D05 | D06 | D07 | D08 | D09 | D10 | D11 | D12 | D13 | D14 | D15 | D16 | D17 | D18 | D19 | D20
	//	| D21 | D22 | D23 | D24 | D25 | D26 | D27 | D28 | D29 | D30 | D31;
	public DayOfMonthTypesElements getDayOfMonthTypesAccess() {
		return (unknownRuleDayOfMonthTypes != null) ? unknownRuleDayOfMonthTypes : (unknownRuleDayOfMonthTypes = new DayOfMonthTypesElements());
	}
	
	public EnumRule getDayOfMonthTypesRule() {
		return getDayOfMonthTypesAccess().getRule();
	}

	//WhenDate:
	//	"when-date-is" dsl_WhenDate_Cases+=WhenDateCase+ dsl_WhenDate_Other=WhenOther? "end-when";
	public WhenDateElements getWhenDateAccess() {
		return (pWhenDate != null) ? pWhenDate : (pWhenDate = new WhenDateElements());
	}
	
	public ParserRule getWhenDateRule() {
		return getWhenDateAccess().getRule();
	}

	//WhenDateCase:
	//	dsl_WhenDate_Case_Month=MonthName dsl_WhenDateCase_Days=AbstractDateCase "use:"
	//	dsl_WhenDateCase_True_actions+=AbstractComponent*;
	public WhenDateCaseElements getWhenDateCaseAccess() {
		return (pWhenDateCase != null) ? pWhenDateCase : (pWhenDateCase = new WhenDateCaseElements());
	}
	
	public ParserRule getWhenDateCaseRule() {
		return getWhenDateCaseAccess().getRule();
	}

	//AbstractDateCase:
	//	DateRange | DateSet;
	public AbstractDateCaseElements getAbstractDateCaseAccess() {
		return (pAbstractDateCase != null) ? pAbstractDateCase : (pAbstractDateCase = new AbstractDateCaseElements());
	}
	
	public ParserRule getAbstractDateCaseRule() {
		return getAbstractDateCaseAccess().getRule();
	}

	//DateRange:
	//	dsl_DateRange_from=INT "thru" dsl_DateRange_To=INT;
	public DateRangeElements getDateRangeAccess() {
		return (pDateRange != null) ? pDateRange : (pDateRange = new DateRangeElements());
	}
	
	public ParserRule getDateRangeRule() {
		return getDateRangeAccess().getRule();
	}

	//DateSet:
	//	dslDateSet_Values+=INT ("," dslDateSet_Values+=INT)*;
	public DateSetElements getDateSetAccess() {
		return (pDateSet != null) ? pDateSet : (pDateSet = new DateSetElements());
	}
	
	public ParserRule getDateSetRule() {
		return getDateSetAccess().getRule();
	}

	//WhenDayName:
	//	"when-name-of-day-is" dsl_WhenDayName_Cases+=WhenDayNameCase+ dsl_WhenDayName_Other=WhenOther? "end-when";
	public WhenDayNameElements getWhenDayNameAccess() {
		return (pWhenDayName != null) ? pWhenDayName : (pWhenDayName = new WhenDayNameElements());
	}
	
	public ParserRule getWhenDayNameRule() {
		return getWhenDayNameAccess().getRule();
	}

	//WhenDayNameCase:
	//	dsl_WhenDayNameCase_Days=AbstractDayNameCase "use:" dsl_WhenDayNameCase_True_actions+=AbstractComponent*;
	public WhenDayNameCaseElements getWhenDayNameCaseAccess() {
		return (pWhenDayNameCase != null) ? pWhenDayNameCase : (pWhenDayNameCase = new WhenDayNameCaseElements());
	}
	
	public ParserRule getWhenDayNameCaseRule() {
		return getWhenDayNameCaseAccess().getRule();
	}

	//AbstractDayNameCase:
	//	DayNameRange | DayNameSet;
	public AbstractDayNameCaseElements getAbstractDayNameCaseAccess() {
		return (pAbstractDayNameCase != null) ? pAbstractDayNameCase : (pAbstractDayNameCase = new AbstractDayNameCaseElements());
	}
	
	public ParserRule getAbstractDayNameCaseRule() {
		return getAbstractDayNameCaseAccess().getRule();
	}

	//DayNameRange:
	//	dsl_DayNameRange_from=DayOfWeek "thru" dsl_DayNameRange_To=DayOfWeek;
	public DayNameRangeElements getDayNameRangeAccess() {
		return (pDayNameRange != null) ? pDayNameRange : (pDayNameRange = new DayNameRangeElements());
	}
	
	public ParserRule getDayNameRangeRule() {
		return getDayNameRangeAccess().getRule();
	}

	//DayNameSet:
	//	dslDayNameSet_Values+=DayOfWeek ("," dslDayNameSet_Values+=DayOfWeek)*;
	public DayNameSetElements getDayNameSetAccess() {
		return (pDayNameSet != null) ? pDayNameSet : (pDayNameSet = new DayNameSetElements());
	}
	
	public ParserRule getDayNameSetRule() {
		return getDayNameSetAccess().getRule();
	}

	//enum PeriodType:
	//	pascha | pentecostarion | triodion;
	public PeriodTypeElements getPeriodTypeAccess() {
		return (unknownRulePeriodType != null) ? unknownRulePeriodType : (unknownRulePeriodType = new PeriodTypeElements());
	}
	
	public EnumRule getPeriodTypeRule() {
		return getPeriodTypeAccess().getRule();
	}

	//WhenPentecostarionDay:
	//	"when-pentecostarion-day-is" dsl_WhenPentecostarionDay_Cases+=WhenPeriodCase+
	//	dsl_WhenPentecostarionDay_Other=WhenOther? "end-when";
	public WhenPentecostarionDayElements getWhenPentecostarionDayAccess() {
		return (pWhenPentecostarionDay != null) ? pWhenPentecostarionDay : (pWhenPentecostarionDay = new WhenPentecostarionDayElements());
	}
	
	public ParserRule getWhenPentecostarionDayRule() {
		return getWhenPentecostarionDayAccess().getRule();
	}

	//WhenTriodionDay:
	//	"when-triodion-day-is" dsl_WhenTriodionDay_Cases+=WhenPeriodCase+ dsl_WhenTriodionDay_Other=WhenOther? "end-when";
	public WhenTriodionDayElements getWhenTriodionDayAccess() {
		return (pWhenTriodionDay != null) ? pWhenTriodionDay : (pWhenTriodionDay = new WhenTriodionDayElements());
	}
	
	public ParserRule getWhenTriodionDayRule() {
		return getWhenTriodionDayAccess().getRule();
	}

	//WhenMovableCycleDay:
	//	"when-movable-cycle-day-is" dsl_WhenMovableCycleDay_Cases+=WhenPeriodCase+ dsl_WhenMovableCycleDay_Other=WhenOther?
	//	"end-when";
	public WhenMovableCycleDayElements getWhenMovableCycleDayAccess() {
		return (pWhenMovableCycleDay != null) ? pWhenMovableCycleDay : (pWhenMovableCycleDay = new WhenMovableCycleDayElements());
	}
	
	public ParserRule getWhenMovableCycleDayRule() {
		return getWhenMovableCycleDayAccess().getRule();
	}

	//WhenSundayAfterElevationOfCrossDay:
	//	"when-Sunday-after-Elevation-of-Cross-is" dsl_WhenSundayAfterElevationOfCrossDay_Cases+=WhenDateCase+
	//	dsl_WhenSundayAfterElevationOfCrossDay_Other=WhenOther? "end-when";
	public WhenSundayAfterElevationOfCrossDayElements getWhenSundayAfterElevationOfCrossDayAccess() {
		return (pWhenSundayAfterElevationOfCrossDay != null) ? pWhenSundayAfterElevationOfCrossDay : (pWhenSundayAfterElevationOfCrossDay = new WhenSundayAfterElevationOfCrossDayElements());
	}
	
	public ParserRule getWhenSundayAfterElevationOfCrossDayRule() {
		return getWhenSundayAfterElevationOfCrossDayAccess().getRule();
	}

	//WhenLukanCycleDay:
	//	"when-Lukan-Cycle-Day-is" dsl_WhenLukanCycleDay_Cases+=WhenPeriodCase+ dsl_WhenLukanCycleDay_Other=WhenOther?
	//	"end-when";
	public WhenLukanCycleDayElements getWhenLukanCycleDayAccess() {
		return (pWhenLukanCycleDay != null) ? pWhenLukanCycleDay : (pWhenLukanCycleDay = new WhenLukanCycleDayElements());
	}
	
	public ParserRule getWhenLukanCycleDayRule() {
		return getWhenLukanCycleDayAccess().getRule();
	}

	//WhenPascha:
	//	"when-pascha use:" dsl_WhenPascha_true_actions+=AbstractComponent* ("otherwise use:"
	//	dsl_WhenPascha_Other_actions+=AbstractComponent*)? "end-when";
	public WhenPaschaElements getWhenPaschaAccess() {
		return (pWhenPascha != null) ? pWhenPascha : (pWhenPascha = new WhenPaschaElements());
	}
	
	public ParserRule getWhenPaschaRule() {
		return getWhenPaschaAccess().getRule();
	}

	//WhenOther:
	//	"otherwise use:" dsl_WhenCase_Other_actions+=AbstractComponent*;
	public WhenOtherElements getWhenOtherAccess() {
		return (pWhenOther != null) ? pWhenOther : (pWhenOther = new WhenOtherElements());
	}
	
	public ParserRule getWhenOtherRule() {
		return getWhenOtherAccess().getRule();
	}

	//WhenPeriodCase:
	//	dsl_WhenPeriodCase_Days=AbstractDayCase "use:" dsl_WhenPeriodCase_True_actions+=AbstractComponent*;
	public WhenPeriodCaseElements getWhenPeriodCaseAccess() {
		return (pWhenPeriodCase != null) ? pWhenPeriodCase : (pWhenPeriodCase = new WhenPeriodCaseElements());
	}
	
	public ParserRule getWhenPeriodCaseRule() {
		return getWhenPeriodCaseAccess().getRule();
	}

	//AbstractDayCase:
	//	DayRange | DaySet;
	public AbstractDayCaseElements getAbstractDayCaseAccess() {
		return (pAbstractDayCase != null) ? pAbstractDayCase : (pAbstractDayCase = new AbstractDayCaseElements());
	}
	
	public ParserRule getAbstractDayCaseRule() {
		return getAbstractDayCaseAccess().getRule();
	}

	//DayRange:
	//	dsl_DayRange_from=INT "thru" dsl_Range_To=INT;
	public DayRangeElements getDayRangeAccess() {
		return (pDayRange != null) ? pDayRange : (pDayRange = new DayRangeElements());
	}
	
	public ParserRule getDayRangeRule() {
		return getDayRangeAccess().getRule();
	}

	//DaySet:
	//	dslSetValue_Days+=INT ("," dslSetValue_Days+=INT)*;
	public DaySetElements getDaySetAccess() {
		return (pDaySet != null) ? pDaySet : (pDaySet = new DaySetElements());
	}
	
	public ParserRule getDaySetRule() {
		return getDaySetAccess().getRule();
	}

	//WhenModeOfWeek:
	//	"when-mode-of-week-is" dsl_WhenModeOfWeek_Cases+=WhenModeOfWeekCase+ dsl_WhenModeOfWeek_Other=WhenOther? "end-when";
	public WhenModeOfWeekElements getWhenModeOfWeekAccess() {
		return (pWhenModeOfWeek != null) ? pWhenModeOfWeek : (pWhenModeOfWeek = new WhenModeOfWeekElements());
	}
	
	public ParserRule getWhenModeOfWeekRule() {
		return getWhenModeOfWeekAccess().getRule();
	}

	//WhenModeOfWeekCase:
	//	dsl_WhenModeOfWeekCase_Days=ModeOfWeekSet "use:" dsl_WhenModeOfWeekCase_True_actions+=AbstractComponent*;
	public WhenModeOfWeekCaseElements getWhenModeOfWeekCaseAccess() {
		return (pWhenModeOfWeekCase != null) ? pWhenModeOfWeekCase : (pWhenModeOfWeekCase = new WhenModeOfWeekCaseElements());
	}
	
	public ParserRule getWhenModeOfWeekCaseRule() {
		return getWhenModeOfWeekCaseAccess().getRule();
	}

	//ModeOfWeekSet:
	//	dsl_ModeOfWeekSet_MOWs+=ModeTypes ("," dsl_ModeOfWeekSet_MOWs+=ModeTypes)*;
	public ModeOfWeekSetElements getModeOfWeekSetAccess() {
		return (pModeOfWeekSet != null) ? pModeOfWeekSet : (pModeOfWeekSet = new ModeOfWeekSetElements());
	}
	
	public ParserRule getModeOfWeekSetRule() {
		return getModeOfWeekSetAccess().getRule();
	}

	//WhenSundaysBeforeTriodion:
	//	"when-sundays-before-triodion-is" dsl_WhenSundaysBeforeTriodion_Cases+=SundaysBeforeTriodionCase+
	//	dsl_SundaysBeforeTriodion_Other=WhenOther? "end-when";
	public WhenSundaysBeforeTriodionElements getWhenSundaysBeforeTriodionAccess() {
		return (pWhenSundaysBeforeTriodion != null) ? pWhenSundaysBeforeTriodion : (pWhenSundaysBeforeTriodion = new WhenSundaysBeforeTriodionElements());
	}
	
	public ParserRule getWhenSundaysBeforeTriodionRule() {
		return getWhenSundaysBeforeTriodionAccess().getRule();
	}

	//SundaysBeforeTriodionCase:
	//	dsl_SundaysBeforeTriodionCase_Days=INT "use:" dsl_SundaysBeforeTriodionCase_True_actions+=AbstractComponent*;
	public SundaysBeforeTriodionCaseElements getSundaysBeforeTriodionCaseAccess() {
		return (pSundaysBeforeTriodionCase != null) ? pSundaysBeforeTriodionCase : (pSundaysBeforeTriodionCase = new SundaysBeforeTriodionCaseElements());
	}
	
	public ParserRule getSundaysBeforeTriodionCaseRule() {
		return getSundaysBeforeTriodionCaseAccess().getRule();
	}

	//enum DayOfWeek:
	//	Sunday | Monday | Tuesday | Wednesday | Thursday | Friday | Saturday;
	public DayOfWeekElements getDayOfWeekAccess() {
		return (unknownRuleDayOfWeek != null) ? unknownRuleDayOfWeek : (unknownRuleDayOfWeek = new DayOfWeekElements());
	}
	
	public EnumRule getDayOfWeekRule() {
		return getDayOfWeekAccess().getRule();
	}

	//enum MonthName:
	//	Jan | Feb | Mar | Apr | May | Jun | Jul | Aug | Sep | Oct | Nov | Dec;
	public MonthNameElements getMonthNameAccess() {
		return (unknownRuleMonthName != null) ? unknownRuleMonthName : (unknownRuleMonthName = new MonthNameElements());
	}
	
	public EnumRule getMonthNameRule() {
		return getMonthNameAccess().getRule();
	}

	//WhenExists:
	//	"when-exists" dsl_WhenExists_Cases+=WhenExistsCase+ dsl_WhenExists_Other=WhenOther? "end-when";
	public WhenExistsElements getWhenExistsAccess() {
		return (pWhenExists != null) ? pWhenExists : (pWhenExists = new WhenExistsElements());
	}
	
	public ParserRule getWhenExistsRule() {
		return getWhenExistsAccess().getRule();
	}

	//WhenExistsCase:
	//	"rid" dsl_WhenExistsCase_Ref=[def::Definition|QualifiedName] "use:"
	//	dsl_WhenExistsCase_True_actions+=AbstractComponent*;
	public WhenExistsCaseElements getWhenExistsCaseAccess() {
		return (pWhenExistsCase != null) ? pWhenExistsCase : (pWhenExistsCase = new WhenExistsCaseElements());
	}
	
	public ParserRule getWhenExistsCaseRule() {
		return getWhenExistsCaseAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
